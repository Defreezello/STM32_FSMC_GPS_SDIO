
Test_All_LED_TOUCH_GPS_SD_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000058dc  0800ca60  0800ca60  0000da60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801233c  0801233c  0001420c  2**0
                  CONTENTS
  4 .ARM          00000008  0801233c  0801233c  0001333c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012344  08012344  0001420c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012344  08012344  00013344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012348  08012348  00013348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0801234c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001420c  2**0
                  CONTENTS
 10 .bss          000026a4  2000020c  2000020c  0001420c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200028b0  200028b0  0001420c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001420c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002971f  00000000  00000000  0001423c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b21  00000000  00000000  0003d95b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000124e8  00000000  00000000  0004347c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ca0  00000000  00000000  00055968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001560  00000000  00000000  00057608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002aaef  00000000  00000000  00058b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00032d06  00000000  00000000  00083657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000edfd6  00000000  00000000  000b635d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001a4333  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000064b0  00000000  00000000  001a4378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  001aa828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ca48 	.word	0x0800ca48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	0800ca48 	.word	0x0800ca48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <ParseCoordinate>:

static GPS_Data gpsData = {0};
int UTC = 3;

// conversion of coordinates to degrees
float ParseCoordinate(char* coord, char direction) {	//static
 8000fe4:	b510      	push	{r4, lr}
 8000fe6:	ed2d 8b02 	vpush	{d8}
 8000fea:	460c      	mov	r4, r1
    float degrees = (coord[0] - '0') * 10 + (coord[1] - '0');
 8000fec:	7803      	ldrb	r3, [r0, #0]
 8000fee:	3b30      	subs	r3, #48	@ 0x30
 8000ff0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000ff4:	7843      	ldrb	r3, [r0, #1]
 8000ff6:	3b30      	subs	r3, #48	@ 0x30
 8000ff8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8000ffc:	ee07 3a90 	vmov	s15, r3
 8001000:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    float minutes = atof(&coord[2]);
 8001004:	3002      	adds	r0, #2
 8001006:	f007 f916 	bl	8008236 <atof>
 800100a:	ec51 0b10 	vmov	r0, r1, d0
 800100e:	f7ff fdeb 	bl	8000be8 <__aeabi_d2f>
 8001012:	ee07 0a10 	vmov	s14, r0
    float decimal = degrees + minutes / 100.0f; //	 60.0f; - to degrees
 8001016:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8001034 <ParseCoordinate+0x50>
 800101a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800101e:	ee30 0a08 	vadd.f32	s0, s0, s16
    
    if (direction == 'S' || direction == 'W') {
 8001022:	2c53      	cmp	r4, #83	@ 0x53
 8001024:	d001      	beq.n	800102a <ParseCoordinate+0x46>
 8001026:	2c57      	cmp	r4, #87	@ 0x57
 8001028:	d101      	bne.n	800102e <ParseCoordinate+0x4a>
        decimal = -decimal;
 800102a:	eeb1 0a40 	vneg.f32	s0, s0
    }
    
    return decimal;
}
 800102e:	ecbd 8b02 	vpop	{d8}
 8001032:	bd10      	pop	{r4, pc}
 8001034:	42c80000 	.word	0x42c80000

08001038 <GPS_ProcessChar>:

char GPS_ProcessChar(char *nmeaBuffer) {
 8001038:	b538      	push	{r3, r4, r5, lr}
        //nmeaBuffer[bufferIndex] = '\0';
            char *token;
            uint8_t tokenIndex = 0;
            
            // search comma in packet
            token = strtok(nmeaBuffer, ",");
 800103a:	496b      	ldr	r1, [pc, #428]	@ (80011e8 <GPS_ProcessChar+0x1b0>)
 800103c:	f008 feec 	bl	8009e18 <strtok>
 8001040:	4604      	mov	r4, r0
            uint8_t tokenIndex = 0;
 8001042:	2500      	movs	r5, #0
            while (token != NULL) {
 8001044:	e031      	b.n	80010aa <GPS_ProcessChar+0x72>
                switch(tokenIndex) {
                    case 1: // Time
                        if (strlen(token) >= 6) {
 8001046:	4620      	mov	r0, r4
 8001048:	f7ff f912 	bl	8000270 <strlen>
 800104c:	2805      	cmp	r0, #5
 800104e:	d925      	bls.n	800109c <GPS_ProcessChar+0x64>
                            gpsData.hour = ((token[0] - '0') * 10 + (token[1] - '0') + 3);
 8001050:	7823      	ldrb	r3, [r4, #0]
 8001052:	3b30      	subs	r3, #48	@ 0x30
 8001054:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001058:	7863      	ldrb	r3, [r4, #1]
 800105a:	3b30      	subs	r3, #48	@ 0x30
 800105c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8001060:	1cda      	adds	r2, r3, #3
 8001062:	4962      	ldr	r1, [pc, #392]	@ (80011ec <GPS_ProcessChar+0x1b4>)
 8001064:	614a      	str	r2, [r1, #20]
                            if(gpsData.hour >= 24)
 8001066:	2a17      	cmp	r2, #23
 8001068:	dd01      	ble.n	800106e <GPS_ProcessChar+0x36>
                            	gpsData.hour = (gpsData.hour - 24);
 800106a:	3b15      	subs	r3, #21
 800106c:	614b      	str	r3, [r1, #20]
                            gpsData.minutes = (token[2] - '0') * 10 + (token[3] - '0');
 800106e:	78a3      	ldrb	r3, [r4, #2]
 8001070:	3b30      	subs	r3, #48	@ 0x30
 8001072:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001076:	78e2      	ldrb	r2, [r4, #3]
 8001078:	3a30      	subs	r2, #48	@ 0x30
 800107a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800107e:	495b      	ldr	r1, [pc, #364]	@ (80011ec <GPS_ProcessChar+0x1b4>)
 8001080:	618b      	str	r3, [r1, #24]
                            gpsData.seconds = (token[4] - '0') * 10 + (token[5] - '0');
 8001082:	7923      	ldrb	r3, [r4, #4]
 8001084:	3b30      	subs	r3, #48	@ 0x30
 8001086:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800108a:	7962      	ldrb	r2, [r4, #5]
 800108c:	3a30      	subs	r2, #48	@ 0x30
 800108e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001092:	61cb      	str	r3, [r1, #28]
 8001094:	e002      	b.n	800109c <GPS_ProcessChar+0x64>
                        }
                        break;
                    case 2: // State
                        gpsData.valid = (token[0]);
 8001096:	7822      	ldrb	r2, [r4, #0]
 8001098:	4b54      	ldr	r3, [pc, #336]	@ (80011ec <GPS_ProcessChar+0x1b4>)
 800109a:	741a      	strb	r2, [r3, #16]
                            gpsData.month = (token[2] - '0') * 10 + (token[3] - '0');
                            gpsData.year = (token[4] - '0') * 10 + (token[5] - '0');
                         }
                        break;
                }
                token = strtok(NULL, ",");
 800109c:	4952      	ldr	r1, [pc, #328]	@ (80011e8 <GPS_ProcessChar+0x1b0>)
 800109e:	2000      	movs	r0, #0
 80010a0:	f008 feba 	bl	8009e18 <strtok>
 80010a4:	4604      	mov	r4, r0
                tokenIndex++;
 80010a6:	3501      	adds	r5, #1
 80010a8:	b2ed      	uxtb	r5, r5
            while (token != NULL) {
 80010aa:	2c00      	cmp	r4, #0
 80010ac:	f000 8095 	beq.w	80011da <GPS_ProcessChar+0x1a2>
                switch(tokenIndex) {
 80010b0:	1e6b      	subs	r3, r5, #1
 80010b2:	2b08      	cmp	r3, #8
 80010b4:	d8f2      	bhi.n	800109c <GPS_ProcessChar+0x64>
 80010b6:	a201      	add	r2, pc, #4	@ (adr r2, 80010bc <GPS_ProcessChar+0x84>)
 80010b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010bc:	08001047 	.word	0x08001047
 80010c0:	08001097 	.word	0x08001097
 80010c4:	080010e1 	.word	0x080010e1
 80010c8:	0800109d 	.word	0x0800109d
 80010cc:	080010ff 	.word	0x080010ff
 80010d0:	0800109d 	.word	0x0800109d
 80010d4:	0800111d 	.word	0x0800111d
 80010d8:	08001141 	.word	0x08001141
 80010dc:	08001195 	.word	0x08001195
                        if (strlen(token) > 0) {
 80010e0:	7823      	ldrb	r3, [r4, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0da      	beq.n	800109c <GPS_ProcessChar+0x64>
                            char nextToken = *(token + strlen(token) + 1);
 80010e6:	4620      	mov	r0, r4
 80010e8:	f7ff f8c2 	bl	8000270 <strlen>
 80010ec:	3001      	adds	r0, #1
                            gpsData.latitude = ParseCoordinate(token, nextToken);
 80010ee:	5c21      	ldrb	r1, [r4, r0]
 80010f0:	4620      	mov	r0, r4
 80010f2:	f7ff ff77 	bl	8000fe4 <ParseCoordinate>
 80010f6:	4b3d      	ldr	r3, [pc, #244]	@ (80011ec <GPS_ProcessChar+0x1b4>)
 80010f8:	ed83 0a00 	vstr	s0, [r3]
 80010fc:	e7ce      	b.n	800109c <GPS_ProcessChar+0x64>
                        if (strlen(token) > 0) {
 80010fe:	7823      	ldrb	r3, [r4, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0cb      	beq.n	800109c <GPS_ProcessChar+0x64>
                            char nextToken = *(token + strlen(token) + 1);
 8001104:	4620      	mov	r0, r4
 8001106:	f7ff f8b3 	bl	8000270 <strlen>
 800110a:	3001      	adds	r0, #1
                            gpsData.longitude = ParseCoordinate(token + 1, nextToken);
 800110c:	5c21      	ldrb	r1, [r4, r0]
 800110e:	1c60      	adds	r0, r4, #1
 8001110:	f7ff ff68 	bl	8000fe4 <ParseCoordinate>
 8001114:	4b35      	ldr	r3, [pc, #212]	@ (80011ec <GPS_ProcessChar+0x1b4>)
 8001116:	ed83 0a01 	vstr	s0, [r3, #4]
 800111a:	e7bf      	b.n	800109c <GPS_ProcessChar+0x64>
                        if (strlen(token) > 0) {
 800111c:	7823      	ldrb	r3, [r4, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0bc      	beq.n	800109c <GPS_ProcessChar+0x64>
                            gpsData.speed = atof(token) * 1.852f; // converting to km/h
 8001122:	4620      	mov	r0, r4
 8001124:	f007 f887 	bl	8008236 <atof>
 8001128:	ec51 0b10 	vmov	r0, r1, d0
 800112c:	a32c      	add	r3, pc, #176	@ (adr r3, 80011e0 <GPS_ProcessChar+0x1a8>)
 800112e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001132:	f7ff fa61 	bl	80005f8 <__aeabi_dmul>
 8001136:	f7ff fd57 	bl	8000be8 <__aeabi_d2f>
 800113a:	4b2c      	ldr	r3, [pc, #176]	@ (80011ec <GPS_ProcessChar+0x1b4>)
 800113c:	6098      	str	r0, [r3, #8]
 800113e:	e7ad      	b.n	800109c <GPS_ProcessChar+0x64>
                    	if (strchr(token, '.'))
 8001140:	212e      	movs	r1, #46	@ 0x2e
 8001142:	4620      	mov	r0, r4
 8001144:	f008 fe48 	bl	8009dd8 <strchr>
 8001148:	2800      	cmp	r0, #0
 800114a:	d1a7      	bne.n	800109c <GPS_ProcessChar+0x64>
                        if (strlen(token) >= 6) {
 800114c:	4620      	mov	r0, r4
 800114e:	f7ff f88f 	bl	8000270 <strlen>
 8001152:	2805      	cmp	r0, #5
 8001154:	d9a2      	bls.n	800109c <GPS_ProcessChar+0x64>
                        	gpsData.date = (token[0] - '0') * 10 + (token[1] - '0');
 8001156:	7823      	ldrb	r3, [r4, #0]
 8001158:	3b30      	subs	r3, #48	@ 0x30
 800115a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800115e:	7862      	ldrb	r2, [r4, #1]
 8001160:	3a30      	subs	r2, #48	@ 0x30
 8001162:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001166:	4921      	ldr	r1, [pc, #132]	@ (80011ec <GPS_ProcessChar+0x1b4>)
 8001168:	620b      	str	r3, [r1, #32]
                        	gpsData.month = (token[2] - '0') * 10 + (token[3] - '0');
 800116a:	78a3      	ldrb	r3, [r4, #2]
 800116c:	3b30      	subs	r3, #48	@ 0x30
 800116e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001172:	78e2      	ldrb	r2, [r4, #3]
 8001174:	3a30      	subs	r2, #48	@ 0x30
 8001176:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800117a:	624b      	str	r3, [r1, #36]	@ 0x24
                        	gpsData.year = (token[4] - '0') * 10 + (token[5] - '0');
 800117c:	7923      	ldrb	r3, [r4, #4]
 800117e:	3b30      	subs	r3, #48	@ 0x30
 8001180:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001184:	7962      	ldrb	r2, [r4, #5]
 8001186:	3a30      	subs	r2, #48	@ 0x30
 8001188:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800118c:	628b      	str	r3, [r1, #40]	@ 0x28
                        	tokenIndex++;
 800118e:	3501      	adds	r5, #1
 8001190:	b2ed      	uxtb	r5, r5
 8001192:	e783      	b.n	800109c <GPS_ProcessChar+0x64>
                        if (strlen(token) >= 6) {
 8001194:	4620      	mov	r0, r4
 8001196:	f7ff f86b 	bl	8000270 <strlen>
 800119a:	2805      	cmp	r0, #5
 800119c:	f67f af7e 	bls.w	800109c <GPS_ProcessChar+0x64>
                            gpsData.date = (token[0] - '0') * 10 + (token[1] - '0');
 80011a0:	7823      	ldrb	r3, [r4, #0]
 80011a2:	3b30      	subs	r3, #48	@ 0x30
 80011a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011a8:	7862      	ldrb	r2, [r4, #1]
 80011aa:	3a30      	subs	r2, #48	@ 0x30
 80011ac:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80011b0:	490e      	ldr	r1, [pc, #56]	@ (80011ec <GPS_ProcessChar+0x1b4>)
 80011b2:	620b      	str	r3, [r1, #32]
                            gpsData.month = (token[2] - '0') * 10 + (token[3] - '0');
 80011b4:	78a3      	ldrb	r3, [r4, #2]
 80011b6:	3b30      	subs	r3, #48	@ 0x30
 80011b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011bc:	78e2      	ldrb	r2, [r4, #3]
 80011be:	3a30      	subs	r2, #48	@ 0x30
 80011c0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80011c4:	624b      	str	r3, [r1, #36]	@ 0x24
                            gpsData.year = (token[4] - '0') * 10 + (token[5] - '0');
 80011c6:	7923      	ldrb	r3, [r4, #4]
 80011c8:	3b30      	subs	r3, #48	@ 0x30
 80011ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011ce:	7962      	ldrb	r2, [r4, #5]
 80011d0:	3a30      	subs	r2, #48	@ 0x30
 80011d2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80011d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80011d8:	e760      	b.n	800109c <GPS_ProcessChar+0x64>
            }
return gpsData.valid;
}
 80011da:	4b04      	ldr	r3, [pc, #16]	@ (80011ec <GPS_ProcessChar+0x1b4>)
 80011dc:	7c18      	ldrb	r0, [r3, #16]
 80011de:	bd38      	pop	{r3, r4, r5, pc}
 80011e0:	c0000000 	.word	0xc0000000
 80011e4:	3ffda1ca 	.word	0x3ffda1ca
 80011e8:	0800caa8 	.word	0x0800caa8
 80011ec:	20000228 	.word	0x20000228

080011f0 <GPS_GetData>:


GPS_Data* GPS_GetData(void) {
    return &gpsData;
}
 80011f0:	4800      	ldr	r0, [pc, #0]	@ (80011f4 <GPS_GetData+0x4>)
 80011f2:	4770      	bx	lr
 80011f4:	20000228 	.word	0x20000228

080011f8 <XPT2046_TouchSelect>:

#define READ_X 0x90
#define READ_Y 0xD0

static void XPT2046_TouchSelect()
{
 80011f8:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001200:	4801      	ldr	r0, [pc, #4]	@ (8001208 <XPT2046_TouchSelect+0x10>)
 8001202:	f002 fd04 	bl	8003c0e <HAL_GPIO_WritePin>
}
 8001206:	bd08      	pop	{r3, pc}
 8001208:	40020400 	.word	0x40020400

0800120c <XPT2046_TouchUnselect>:

static void XPT2046_TouchUnselect()
{
 800120c:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_SET);
 800120e:	2201      	movs	r2, #1
 8001210:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001214:	4801      	ldr	r0, [pc, #4]	@ (800121c <XPT2046_TouchUnselect+0x10>)
 8001216:	f002 fcfa 	bl	8003c0e <HAL_GPIO_WritePin>
}
 800121a:	bd08      	pop	{r3, pc}
 800121c:	40020400 	.word	0x40020400

08001220 <XPT2046_TouchPressed>:

bool XPT2046_TouchPressed()
{
 8001220:	b508      	push	{r3, lr}
    return HAL_GPIO_ReadPin(XPT2046_IRQ_GPIO_Port, XPT2046_IRQ_Pin) == GPIO_PIN_RESET;
 8001222:	2120      	movs	r1, #32
 8001224:	4803      	ldr	r0, [pc, #12]	@ (8001234 <XPT2046_TouchPressed+0x14>)
 8001226:	f002 fceb 	bl	8003c00 <HAL_GPIO_ReadPin>
}
 800122a:	fab0 f080 	clz	r0, r0
 800122e:	0940      	lsrs	r0, r0, #5
 8001230:	bd08      	pop	{r3, pc}
 8001232:	bf00      	nop
 8001234:	40020800 	.word	0x40020800

08001238 <XPT2046_TouchGetCoordinates>:

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 8001238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800123c:	b087      	sub	sp, #28
 800123e:	4607      	mov	r7, r0
 8001240:	4688      	mov	r8, r1
    static const uint8_t cmd_read_x[] = { READ_X };
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

    XPT2046_TouchSelect();
 8001242:	f7ff ffd9 	bl	80011f8 <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
    uint32_t avg_y = 0;
    uint8_t nsamples = 0;

    for(uint8_t i = 0; i < 16; i++)
 8001246:	2400      	movs	r4, #0
    uint8_t nsamples = 0;
 8001248:	4626      	mov	r6, r4
    uint32_t avg_y = 0;
 800124a:	46a1      	mov	r9, r4
    uint32_t avg_x = 0;
 800124c:	46a2      	mov	sl, r4
 800124e:	9703      	str	r7, [sp, #12]
    for(uint8_t i = 0; i < 16; i++)
 8001250:	2c0f      	cmp	r4, #15
 8001252:	d835      	bhi.n	80012c0 <XPT2046_TouchGetCoordinates+0x88>
    {
        if(!XPT2046_TouchPressed())
 8001254:	f7ff ffe4 	bl	8001220 <XPT2046_TouchPressed>
 8001258:	b390      	cbz	r0, 80012c0 <XPT2046_TouchGetCoordinates+0x88>
            break;

        nsamples++;
 800125a:	3601      	adds	r6, #1
 800125c:	b2f6      	uxtb	r6, r6

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 800125e:	4d39      	ldr	r5, [pc, #228]	@ (8001344 <XPT2046_TouchGetCoordinates+0x10c>)
 8001260:	f04f 33ff 	mov.w	r3, #4294967295
 8001264:	2201      	movs	r2, #1
 8001266:	4938      	ldr	r1, [pc, #224]	@ (8001348 <XPT2046_TouchGetCoordinates+0x110>)
 8001268:	4628      	mov	r0, r5
 800126a:	f004 fa38 	bl	80056de <HAL_SPI_Transmit>
        uint8_t y_raw[2];
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 800126e:	f8df b0f0 	ldr.w	fp, [pc, #240]	@ 8001360 <XPT2046_TouchGetCoordinates+0x128>
 8001272:	f04f 37ff 	mov.w	r7, #4294967295
 8001276:	9700      	str	r7, [sp, #0]
 8001278:	2302      	movs	r3, #2
 800127a:	aa04      	add	r2, sp, #16
 800127c:	4659      	mov	r1, fp
 800127e:	4628      	mov	r0, r5
 8001280:	f004 fb09 	bl	8005896 <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 8001284:	463b      	mov	r3, r7
 8001286:	2201      	movs	r2, #1
 8001288:	4930      	ldr	r1, [pc, #192]	@ (800134c <XPT2046_TouchGetCoordinates+0x114>)
 800128a:	4628      	mov	r0, r5
 800128c:	f004 fa27 	bl	80056de <HAL_SPI_Transmit>
        uint8_t x_raw[2];
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8001290:	9700      	str	r7, [sp, #0]
 8001292:	2302      	movs	r3, #2
 8001294:	aa05      	add	r2, sp, #20
 8001296:	4659      	mov	r1, fp
 8001298:	4628      	mov	r0, r5
 800129a:	f004 fafc 	bl	8005896 <HAL_SPI_TransmitReceive>

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 800129e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80012a2:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80012a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80012aa:	449a      	add	sl, r3
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 80012ac:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80012b0:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80012b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80012b8:	4499      	add	r9, r3
    for(uint8_t i = 0; i < 16; i++)
 80012ba:	3401      	adds	r4, #1
 80012bc:	b2e4      	uxtb	r4, r4
 80012be:	e7c7      	b.n	8001250 <XPT2046_TouchGetCoordinates+0x18>
    }

    XPT2046_TouchUnselect();
 80012c0:	9f03      	ldr	r7, [sp, #12]
 80012c2:	f7ff ffa3 	bl	800120c <XPT2046_TouchUnselect>

    if(nsamples < 16)
 80012c6:	2e0f      	cmp	r6, #15
 80012c8:	d939      	bls.n	800133e <XPT2046_TouchGetCoordinates+0x106>
        return false;

    uint32_t raw_x = (avg_x / 16);
 80012ca:	ea4f 121a 	mov.w	r2, sl, lsr #4
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 80012ce:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 80012d2:	459a      	cmp	sl, r3
 80012d4:	d905      	bls.n	80012e2 <XPT2046_TouchGetCoordinates+0xaa>
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 80012d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001350 <XPT2046_TouchGetCoordinates+0x118>)
 80012d8:	459a      	cmp	sl, r3
 80012da:	d904      	bls.n	80012e6 <XPT2046_TouchGetCoordinates+0xae>
 80012dc:	f647 1218 	movw	r2, #31000	@ 0x7918
 80012e0:	e001      	b.n	80012e6 <XPT2046_TouchGetCoordinates+0xae>
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 80012e2:	f240 52dc 	movw	r2, #1500	@ 0x5dc

    uint32_t raw_y = (avg_y / 16);
 80012e6:	ea4f 1319 	mov.w	r3, r9, lsr #4
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 80012ea:	f64c 41bf 	movw	r1, #52415	@ 0xccbf
 80012ee:	4589      	cmp	r9, r1
 80012f0:	d905      	bls.n	80012fe <XPT2046_TouchGetCoordinates+0xc6>
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 80012f2:	4918      	ldr	r1, [pc, #96]	@ (8001354 <XPT2046_TouchGetCoordinates+0x11c>)
 80012f4:	4589      	cmp	r9, r1
 80012f6:	d904      	bls.n	8001302 <XPT2046_TouchGetCoordinates+0xca>
 80012f8:	f247 539e 	movw	r3, #30110	@ 0x759e
 80012fc:	e001      	b.n	8001302 <XPT2046_TouchGetCoordinates+0xca>
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 80012fe:	f640 43cc 	movw	r3, #3276	@ 0xccc

    *x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 8001302:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001306:	0192      	lsls	r2, r2, #6
 8001308:	f5a2 22ea 	sub.w	r2, r2, #479232	@ 0x75000
 800130c:	f5a2 7240 	sub.w	r2, r2, #768	@ 0x300
 8001310:	4911      	ldr	r1, [pc, #68]	@ (8001358 <XPT2046_TouchGetCoordinates+0x120>)
 8001312:	fba1 1202 	umull	r1, r2, r1, r2
 8001316:	0b92      	lsrs	r2, r2, #14
 8001318:	803a      	strh	r2, [r7, #0]
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 800131a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800131e:	011b      	lsls	r3, r3, #4
 8001320:	f5a3 233f 	sub.w	r3, r3, #782336	@ 0xbf000
 8001324:	f5a3 6374 	sub.w	r3, r3, #3904	@ 0xf40
 8001328:	085b      	lsrs	r3, r3, #1
 800132a:	4a0c      	ldr	r2, [pc, #48]	@ (800135c <XPT2046_TouchGetCoordinates+0x124>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	0a9b      	lsrs	r3, r3, #10
 8001332:	f8a8 3000 	strh.w	r3, [r8]

    return true;
 8001336:	2001      	movs	r0, #1
}
 8001338:	b007      	add	sp, #28
 800133a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return false;
 800133e:	2000      	movs	r0, #0
 8001340:	e7fa      	b.n	8001338 <XPT2046_TouchGetCoordinates+0x100>
 8001342:	bf00      	nop
 8001344:	200025f0 	.word	0x200025f0
 8001348:	0800e2ec 	.word	0x0800e2ec
 800134c:	0800e2e4 	.word	0x0800e2e4
 8001350:	0007918f 	.word	0x0007918f
 8001354:	000759ef 	.word	0x000759ef
 8001358:	8e2e0727 	.word	0x8e2e0727
 800135c:	1389c755 	.word	0x1389c755
 8001360:	0800e2e8 	.word	0x0800e2e8

08001364 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001364:	b500      	push	{lr}
 8001366:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001368:	2300      	movs	r3, #0
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	9302      	str	r3, [sp, #8]
 8001370:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001372:	481c      	ldr	r0, [pc, #112]	@ (80013e4 <MX_ADC1_Init+0x80>)
 8001374:	4a1c      	ldr	r2, [pc, #112]	@ (80013e8 <MX_ADC1_Init+0x84>)
 8001376:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001378:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800137c:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800137e:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001380:	2201      	movs	r2, #1
 8001382:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001384:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001386:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800138a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800138c:	4917      	ldr	r1, [pc, #92]	@ (80013ec <MX_ADC1_Init+0x88>)
 800138e:	6281      	str	r1, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001390:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001392:	2102      	movs	r1, #2
 8001394:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001396:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800139a:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800139c:	f001 fe3e 	bl	800301c <HAL_ADC_Init>
 80013a0:	b9b0      	cbnz	r0, 80013d0 <MX_ADC1_Init+0x6c>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 80013a6:	2301      	movs	r3, #1
 80013a8:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80013aa:	2304      	movs	r3, #4
 80013ac:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ae:	4669      	mov	r1, sp
 80013b0:	480c      	ldr	r0, [pc, #48]	@ (80013e4 <MX_ADC1_Init+0x80>)
 80013b2:	f001 ff81 	bl	80032b8 <HAL_ADC_ConfigChannel>
 80013b6:	b970      	cbnz	r0, 80013d6 <MX_ADC1_Init+0x72>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80013b8:	2310      	movs	r3, #16
 80013ba:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 80013bc:	2302      	movs	r3, #2
 80013be:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c0:	4669      	mov	r1, sp
 80013c2:	4808      	ldr	r0, [pc, #32]	@ (80013e4 <MX_ADC1_Init+0x80>)
 80013c4:	f001 ff78 	bl	80032b8 <HAL_ADC_ConfigChannel>
 80013c8:	b940      	cbnz	r0, 80013dc <MX_ADC1_Init+0x78>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ca:	b005      	add	sp, #20
 80013cc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80013d0:	f000 ff2a 	bl	8002228 <Error_Handler>
 80013d4:	e7e5      	b.n	80013a2 <MX_ADC1_Init+0x3e>
    Error_Handler();
 80013d6:	f000 ff27 	bl	8002228 <Error_Handler>
 80013da:	e7ed      	b.n	80013b8 <MX_ADC1_Init+0x54>
    Error_Handler();
 80013dc:	f000 ff24 	bl	8002228 <Error_Handler>
}
 80013e0:	e7f3      	b.n	80013ca <MX_ADC1_Init+0x66>
 80013e2:	bf00      	nop
 80013e4:	20000254 	.word	0x20000254
 80013e8:	40012000 	.word	0x40012000
 80013ec:	0f000001 	.word	0x0f000001

080013f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013f0:	b500      	push	{lr}
 80013f2:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	2300      	movs	r3, #0
 80013f6:	9303      	str	r3, [sp, #12]
 80013f8:	9304      	str	r3, [sp, #16]
 80013fa:	9305      	str	r3, [sp, #20]
 80013fc:	9306      	str	r3, [sp, #24]
 80013fe:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8001400:	6802      	ldr	r2, [r0, #0]
 8001402:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001406:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 800140a:	429a      	cmp	r2, r3
 800140c:	d002      	beq.n	8001414 <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800140e:	b009      	add	sp, #36	@ 0x24
 8001410:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001414:	2100      	movs	r1, #0
 8001416:	9101      	str	r1, [sp, #4]
 8001418:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 800141c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800141e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001422:	645a      	str	r2, [r3, #68]	@ 0x44
 8001424:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001426:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800142a:	9201      	str	r2, [sp, #4]
 800142c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	9102      	str	r1, [sp, #8]
 8001430:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001432:	f042 0201 	orr.w	r2, r2, #1
 8001436:	631a      	str	r2, [r3, #48]	@ 0x30
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	9302      	str	r3, [sp, #8]
 8001440:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001442:	2301      	movs	r3, #1
 8001444:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001446:	2303      	movs	r3, #3
 8001448:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	a903      	add	r1, sp, #12
 800144c:	4801      	ldr	r0, [pc, #4]	@ (8001454 <HAL_ADC_MspInit+0x64>)
 800144e:	f002 fae1 	bl	8003a14 <HAL_GPIO_Init>
}
 8001452:	e7dc      	b.n	800140e <HAL_ADC_MspInit+0x1e>
 8001454:	40020000 	.word	0x40020000

08001458 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001458:	b500      	push	{lr}
 800145a:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800145c:	2100      	movs	r1, #0
 800145e:	9101      	str	r1, [sp, #4]
 8001460:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <MX_DMA_Init+0x30>)
 8001462:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001464:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001468:	631a      	str	r2, [r3, #48]	@ 0x30
 800146a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001474:	460a      	mov	r2, r1
 8001476:	203b      	movs	r0, #59	@ 0x3b
 8001478:	f002 f83c 	bl	80034f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800147c:	203b      	movs	r0, #59	@ 0x3b
 800147e:	f002 f849 	bl	8003514 <HAL_NVIC_EnableIRQ>

}
 8001482:	b003      	add	sp, #12
 8001484:	f85d fb04 	ldr.w	pc, [sp], #4
 8001488:	40023800 	.word	0x40023800

0800148c <HAL_FSMC_MspInit>:
  /* USER CODE END FSMC_Init 2 */
}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148e:	b087      	sub	sp, #28
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	2300      	movs	r3, #0
 8001492:	9301      	str	r3, [sp, #4]
 8001494:	9302      	str	r3, [sp, #8]
 8001496:	9303      	str	r3, [sp, #12]
 8001498:	9304      	str	r3, [sp, #16]
 800149a:	9305      	str	r3, [sp, #20]
  if (FSMC_Initialized) {
 800149c:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <HAL_FSMC_MspInit+0x6c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	b10b      	cbz	r3, 80014a6 <HAL_FSMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80014a2:	b007      	add	sp, #28
 80014a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FSMC_Initialized = 1;
 80014a6:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <HAL_FSMC_MspInit+0x6c>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 80014ac:	2600      	movs	r6, #0
 80014ae:	9600      	str	r6, [sp, #0]
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <HAL_FSMC_MspInit+0x70>)
 80014b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014b4:	f042 0201 	orr.w	r2, r2, #1
 80014b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80014ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80014c4:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80014c8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2702      	movs	r7, #2
 80014cc:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ce:	2503      	movs	r5, #3
 80014d0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014d2:	240c      	movs	r4, #12
 80014d4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d6:	a901      	add	r1, sp, #4
 80014d8:	4809      	ldr	r0, [pc, #36]	@ (8001500 <HAL_FSMC_MspInit+0x74>)
 80014da:	f002 fa9b 	bl	8003a14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 80014de:	f24e 73b3 	movw	r3, #59315	@ 0xe7b3
 80014e2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014ea:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ec:	a901      	add	r1, sp, #4
 80014ee:	4805      	ldr	r0, [pc, #20]	@ (8001504 <HAL_FSMC_MspInit+0x78>)
 80014f0:	f002 fa90 	bl	8003a14 <HAL_GPIO_Init>
 80014f4:	e7d5      	b.n	80014a2 <HAL_FSMC_MspInit+0x16>
 80014f6:	bf00      	nop
 80014f8:	2000029c 	.word	0x2000029c
 80014fc:	40023800 	.word	0x40023800
 8001500:	40021000 	.word	0x40021000
 8001504:	40020c00 	.word	0x40020c00

08001508 <MX_FSMC_Init>:
{
 8001508:	b500      	push	{lr}
 800150a:	b089      	sub	sp, #36	@ 0x24
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800150c:	2200      	movs	r2, #0
 800150e:	9201      	str	r2, [sp, #4]
 8001510:	9202      	str	r2, [sp, #8]
 8001512:	9203      	str	r2, [sp, #12]
 8001514:	9204      	str	r2, [sp, #16]
 8001516:	9205      	str	r2, [sp, #20]
 8001518:	9206      	str	r2, [sp, #24]
 800151a:	9207      	str	r2, [sp, #28]
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800151c:	4815      	ldr	r0, [pc, #84]	@ (8001574 <MX_FSMC_Init+0x6c>)
 800151e:	f04f 4320 	mov.w	r3, #2684354560	@ 0xa0000000
 8001522:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001524:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8001528:	6043      	str	r3, [r0, #4]
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800152a:	6082      	str	r2, [r0, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800152c:	60c2      	str	r2, [r0, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800152e:	6102      	str	r2, [r0, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001530:	2310      	movs	r3, #16
 8001532:	6143      	str	r3, [r0, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001534:	6182      	str	r2, [r0, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001536:	61c2      	str	r2, [r0, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001538:	6202      	str	r2, [r0, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800153a:	6242      	str	r2, [r0, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800153c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001540:	6281      	str	r1, [r0, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001542:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001544:	6302      	str	r2, [r0, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001546:	6342      	str	r2, [r0, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001548:	6382      	str	r2, [r0, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800154a:	6442      	str	r2, [r0, #68]	@ 0x44
  Timing.AddressSetupTime = 1;
 800154c:	2101      	movs	r1, #1
 800154e:	9101      	str	r1, [sp, #4]
  Timing.AddressHoldTime = 15;
 8001550:	210f      	movs	r1, #15
 8001552:	9102      	str	r1, [sp, #8]
  Timing.DataSetupTime = 5;
 8001554:	2105      	movs	r1, #5
 8001556:	9103      	str	r1, [sp, #12]
  Timing.CLKDivision = 16;
 8001558:	9305      	str	r3, [sp, #20]
  Timing.DataLatency = 17;
 800155a:	2311      	movs	r3, #17
 800155c:	9306      	str	r3, [sp, #24]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800155e:	a901      	add	r1, sp, #4
 8001560:	f004 fabb 	bl	8005ada <HAL_SRAM_Init>
 8001564:	b910      	cbnz	r0, 800156c <MX_FSMC_Init+0x64>
}
 8001566:	b009      	add	sp, #36	@ 0x24
 8001568:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 800156c:	f000 fe5c 	bl	8002228 <Error_Handler>
}
 8001570:	e7f9      	b.n	8001566 <MX_FSMC_Init+0x5e>
 8001572:	bf00      	nop
 8001574:	200002a0 	.word	0x200002a0

08001578 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001578:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800157a:	f7ff ff87 	bl	800148c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800157e:	bd08      	pop	{r3, pc}

08001580 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001584:	b08c      	sub	sp, #48	@ 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	2400      	movs	r4, #0
 8001588:	9407      	str	r4, [sp, #28]
 800158a:	9408      	str	r4, [sp, #32]
 800158c:	9409      	str	r4, [sp, #36]	@ 0x24
 800158e:	940a      	str	r4, [sp, #40]	@ 0x28
 8001590:	940b      	str	r4, [sp, #44]	@ 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001592:	9401      	str	r4, [sp, #4]
 8001594:	4b63      	ldr	r3, [pc, #396]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 8001596:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001598:	f042 0210 	orr.w	r2, r2, #16
 800159c:	631a      	str	r2, [r3, #48]	@ 0x30
 800159e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015a0:	f002 0210 	and.w	r2, r2, #16
 80015a4:	9201      	str	r2, [sp, #4]
 80015a6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a8:	9402      	str	r4, [sp, #8]
 80015aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015ac:	f042 0204 	orr.w	r2, r2, #4
 80015b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80015b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015b4:	f002 0204 	and.w	r2, r2, #4
 80015b8:	9202      	str	r2, [sp, #8]
 80015ba:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015bc:	9403      	str	r4, [sp, #12]
 80015be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80015c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80015c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015c8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80015cc:	9203      	str	r2, [sp, #12]
 80015ce:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	9404      	str	r4, [sp, #16]
 80015d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015d4:	f042 0201 	orr.w	r2, r2, #1
 80015d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80015da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015dc:	f002 0201 	and.w	r2, r2, #1
 80015e0:	9204      	str	r2, [sp, #16]
 80015e2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e4:	9405      	str	r4, [sp, #20]
 80015e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015e8:	f042 0202 	orr.w	r2, r2, #2
 80015ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80015ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015f0:	f002 0202 	and.w	r2, r2, #2
 80015f4:	9205      	str	r2, [sp, #20]
 80015f6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f8:	9406      	str	r4, [sp, #24]
 80015fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015fc:	f042 0208 	orr.w	r2, r2, #8
 8001600:	631a      	str	r2, [r3, #48]	@ 0x30
 8001602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	9306      	str	r3, [sp, #24]
 800160a:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 800160c:	f8df 9120 	ldr.w	r9, [pc, #288]	@ 8001730 <MX_GPIO_Init+0x1b0>
 8001610:	2201      	movs	r2, #1
 8001612:	21c0      	movs	r1, #192	@ 0xc0
 8001614:	4648      	mov	r0, r9
 8001616:	f002 fafa 	bl	8003c0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800161a:	4f43      	ldr	r7, [pc, #268]	@ (8001728 <MX_GPIO_Init+0x1a8>)
 800161c:	4622      	mov	r2, r4
 800161e:	2102      	movs	r1, #2
 8001620:	4638      	mov	r0, r7
 8001622:	f002 faf4 	bl	8003c0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_TOUCH_GPIO_Port, CS_TOUCH_Pin, GPIO_PIN_SET);
 8001626:	2201      	movs	r2, #1
 8001628:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800162c:	4638      	mov	r0, r7
 800162e:	f002 faee 	bl	8003c0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001632:	f8df 8100 	ldr.w	r8, [pc, #256]	@ 8001734 <MX_GPIO_Init+0x1b4>
 8001636:	2201      	movs	r2, #1
 8001638:	2140      	movs	r1, #64	@ 0x40
 800163a:	4640      	mov	r0, r8
 800163c:	f002 fae7 	bl	8003c0e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE5 PE6 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 8001640:	2367      	movs	r3, #103	@ 0x67
 8001642:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001644:	2603      	movs	r6, #3
 8001646:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800164a:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 8001738 <MX_GPIO_Init+0x1b8>
 800164e:	a907      	add	r1, sp, #28
 8001650:	4650      	mov	r0, sl
 8001652:	f002 f9df 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = Key1_Pin|Key0_Pin;
 8001656:	2318      	movs	r3, #24
 8001658:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800165c:	2501      	movs	r5, #1
 800165e:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001660:	a907      	add	r1, sp, #28
 8001662:	4650      	mov	r0, sl
 8001664:	f002 f9d6 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8001668:	f242 039f 	movw	r3, #8351	@ 0x209f
 800166c:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800166e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001672:	a907      	add	r1, sp, #28
 8001674:	4640      	mov	r0, r8
 8001676:	f002 f9cd 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA5 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 800167a:	f649 7332 	movw	r3, #40754	@ 0x9f32
 800167e:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001680:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	a907      	add	r1, sp, #28
 8001686:	4648      	mov	r0, r9
 8001688:	f002 f9c4 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800168c:	23c0      	movs	r3, #192	@ 0xc0
 800168e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001690:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001692:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001694:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001696:	a907      	add	r1, sp, #28
 8001698:	4648      	mov	r0, r9
 800169a:	f002 f9bb 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_TOUCH_Pin;
 800169e:	2320      	movs	r3, #32
 80016a0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016a2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016a6:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a8:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(IRQ_TOUCH_GPIO_Port, &GPIO_InitStruct);
 80016aa:	a907      	add	r1, sp, #28
 80016ac:	4640      	mov	r0, r8
 80016ae:	f002 f9b1 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB11
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80016b2:	f640 73fd 	movw	r3, #4093	@ 0xffd
 80016b6:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b8:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016bc:	a907      	add	r1, sp, #28
 80016be:	4638      	mov	r0, r7
 80016c0:	f002 f9a8 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80016c4:	2302      	movs	r3, #2
 80016c6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ca:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80016ce:	a907      	add	r1, sp, #28
 80016d0:	4638      	mov	r0, r7
 80016d2:	f002 f99f 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_TOUCH_Pin;
 80016d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016da:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016de:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016e0:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(CS_TOUCH_GPIO_Port, &GPIO_InitStruct);
 80016e2:	a907      	add	r1, sp, #28
 80016e4:	4638      	mov	r0, r7
 80016e6:	f002 f995 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD3 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_6;
 80016ea:	f641 0348 	movw	r3, #6216	@ 0x1848
 80016ee:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f0:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f4:	a907      	add	r1, sp, #28
 80016f6:	480d      	ldr	r0, [pc, #52]	@ (800172c <MX_GPIO_Init+0x1ac>)
 80016f8:	f002 f98c 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016fc:	2340      	movs	r3, #64	@ 0x40
 80016fe:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001700:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001702:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001704:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001706:	a907      	add	r1, sp, #28
 8001708:	4640      	mov	r0, r8
 800170a:	f002 f983 	bl	8003a14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800170e:	4622      	mov	r2, r4
 8001710:	4629      	mov	r1, r5
 8001712:	2017      	movs	r0, #23
 8001714:	f001 feee 	bl	80034f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001718:	2017      	movs	r0, #23
 800171a:	f001 fefb 	bl	8003514 <HAL_NVIC_EnableIRQ>

}
 800171e:	b00c      	add	sp, #48	@ 0x30
 8001720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001724:	40023800 	.word	0x40023800
 8001728:	40020400 	.word	0x40020400
 800172c:	40020c00 	.word	0x40020c00
 8001730:	40020000 	.word	0x40020000
 8001734:	40020800 	.word	0x40020800
 8001738:	40021000 	.word	0x40021000

0800173c <lcdWriteData>:
}

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
	LCD_DataWrite(data);
 800173c:	4b01      	ldr	r3, [pc, #4]	@ (8001744 <lcdWriteData+0x8>)
 800173e:	8018      	strh	r0, [r3, #0]
}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	60080000 	.word	0x60080000

08001748 <lcdReadData>:

static unsigned short lcdReadData(void)
{
	return LCD_DataRead();
 8001748:	4b01      	ldr	r3, [pc, #4]	@ (8001750 <lcdReadData+0x8>)
 800174a:	8818      	ldrh	r0, [r3, #0]
}
 800174c:	b280      	uxth	r0, r0
 800174e:	4770      	bx	lr
 8001750:	60080000 	.word	0x60080000

08001754 <lcdSetTextFont>:
	lcdFont.pFont = font;
 8001754:	4b01      	ldr	r3, [pc, #4]	@ (800175c <lcdSetTextFont+0x8>)
 8001756:	6098      	str	r0, [r3, #8]
}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000020 	.word	0x20000020

08001760 <lcdSetTextColor>:
	lcdFont.TextColor = c;
 8001760:	4b01      	ldr	r3, [pc, #4]	@ (8001768 <lcdSetTextColor+0x8>)
 8001762:	6018      	str	r0, [r3, #0]
	lcdFont.BackColor = b;
 8001764:	6059      	str	r1, [r3, #4]
}
 8001766:	4770      	bx	lr
 8001768:	20000020 	.word	0x20000020

0800176c <lcdGetHeight>:
}
 800176c:	20f0      	movs	r0, #240	@ 0xf0
 800176e:	4770      	bx	lr

08001770 <lcdGetTextFont>:
}
 8001770:	4b01      	ldr	r3, [pc, #4]	@ (8001778 <lcdGetTextFont+0x8>)
 8001772:	6898      	ldr	r0, [r3, #8]
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000020 	.word	0x20000020

0800177c <lcdWriteCommand>:
	LCD_CmdWrite(command);
 800177c:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8001780:	8018      	strh	r0, [r3, #0]
}
 8001782:	4770      	bx	lr

08001784 <lcdReset>:
{
 8001784:	b508      	push	{r3, lr}
	lcdWriteCommand(ILI9341_SOFTRESET);
 8001786:	2001      	movs	r0, #1
 8001788:	f7ff fff8 	bl	800177c <lcdWriteCommand>
	HAL_Delay(50);
 800178c:	2032      	movs	r0, #50	@ 0x32
 800178e:	f001 fb97 	bl	8002ec0 <HAL_Delay>
}
 8001792:	bd08      	pop	{r3, pc}

08001794 <lcdInit>:
{
 8001794:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001796:	4c77      	ldr	r4, [pc, #476]	@ (8001974 <lcdInit+0x1e0>)
 8001798:	2200      	movs	r2, #0
 800179a:	2140      	movs	r1, #64	@ 0x40
 800179c:	4620      	mov	r0, r4
 800179e:	f002 fa36 	bl	8003c0e <HAL_GPIO_WritePin>
	HAL_Delay(15);
 80017a2:	200f      	movs	r0, #15
 80017a4:	f001 fb8c 	bl	8002ec0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80017a8:	2201      	movs	r2, #1
 80017aa:	2140      	movs	r1, #64	@ 0x40
 80017ac:	4620      	mov	r0, r4
 80017ae:	f002 fa2e 	bl	8003c0e <HAL_GPIO_WritePin>
	HAL_Delay(15);
 80017b2:	200f      	movs	r0, #15
 80017b4:	f001 fb84 	bl	8002ec0 <HAL_Delay>
  lcdReset();
 80017b8:	f7ff ffe4 	bl	8001784 <lcdReset>
  lcdWriteCommand(ILI9341_DISPLAYOFF);
 80017bc:	2028      	movs	r0, #40	@ 0x28
 80017be:	f7ff ffdd 	bl	800177c <lcdWriteCommand>
  lcdWriteCommand(ILI9341_POWERCONTROL1);
 80017c2:	20c0      	movs	r0, #192	@ 0xc0
 80017c4:	f7ff ffda 	bl	800177c <lcdWriteCommand>
  lcdWriteData(0x23); //(0x26);
 80017c8:	2023      	movs	r0, #35	@ 0x23
 80017ca:	f7ff ffb7 	bl	800173c <lcdWriteData>
  lcdWriteCommand(ILI9341_POWERCONTROL2);
 80017ce:	20c1      	movs	r0, #193	@ 0xc1
 80017d0:	f7ff ffd4 	bl	800177c <lcdWriteCommand>
  lcdWriteData(0x10); //(0x11);
 80017d4:	2010      	movs	r0, #16
 80017d6:	f7ff ffb1 	bl	800173c <lcdWriteData>
  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 80017da:	20c5      	movs	r0, #197	@ 0xc5
 80017dc:	f7ff ffce 	bl	800177c <lcdWriteCommand>
  lcdWriteData(0x3E); //(0x35);
 80017e0:	203e      	movs	r0, #62	@ 0x3e
 80017e2:	f7ff ffab 	bl	800173c <lcdWriteData>
  lcdWriteData(0x28); //(0x3E);
 80017e6:	2028      	movs	r0, #40	@ 0x28
 80017e8:	f7ff ffa8 	bl	800173c <lcdWriteData>
  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 80017ec:	20c7      	movs	r0, #199	@ 0xc7
 80017ee:	f7ff ffc5 	bl	800177c <lcdWriteCommand>
  lcdWriteData(0x86); //(0xBE);
 80017f2:	2086      	movs	r0, #134	@ 0x86
 80017f4:	f7ff ffa2 	bl	800173c <lcdWriteData>
  lcdWriteCommand(ILI9341_PIXELFORMAT);	//16bits/pixel
 80017f8:	203a      	movs	r0, #58	@ 0x3a
 80017fa:	f7ff ffbf 	bl	800177c <lcdWriteCommand>
  lcdWriteData(0x55);
 80017fe:	2055      	movs	r0, #85	@ 0x55
 8001800:	f7ff ff9c 	bl	800173c <lcdWriteData>
  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 8001804:	20b1      	movs	r0, #177	@ 0xb1
 8001806:	f7ff ffb9 	bl	800177c <lcdWriteCommand>
  lcdWriteData(0x00);
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff ff96 	bl	800173c <lcdWriteData>
  lcdWriteData(0x1B); //Frame Rate 70Hz
 8001810:	201b      	movs	r0, #27
 8001812:	f7ff ff93 	bl	800173c <lcdWriteData>
  lcdWriteCommand(ILI9341_GAMMASET);
 8001816:	2026      	movs	r0, #38	@ 0x26
 8001818:	f7ff ffb0 	bl	800177c <lcdWriteCommand>
  lcdWriteData(0x01);
 800181c:	2001      	movs	r0, #1
 800181e:	f7ff ff8d 	bl	800173c <lcdWriteData>
  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 8001822:	20e0      	movs	r0, #224	@ 0xe0
 8001824:	f7ff ffaa 	bl	800177c <lcdWriteCommand>
  lcdWriteData(0x1F);
 8001828:	201f      	movs	r0, #31
 800182a:	f7ff ff87 	bl	800173c <lcdWriteData>
  lcdWriteData(0x1A);
 800182e:	201a      	movs	r0, #26
 8001830:	f7ff ff84 	bl	800173c <lcdWriteData>
  lcdWriteData(0x18);
 8001834:	2018      	movs	r0, #24
 8001836:	f7ff ff81 	bl	800173c <lcdWriteData>
  lcdWriteData(0x0A);
 800183a:	200a      	movs	r0, #10
 800183c:	f7ff ff7e 	bl	800173c <lcdWriteData>
  lcdWriteData(0x0F);
 8001840:	200f      	movs	r0, #15
 8001842:	f7ff ff7b 	bl	800173c <lcdWriteData>
  lcdWriteData(0x06);
 8001846:	2006      	movs	r0, #6
 8001848:	f7ff ff78 	bl	800173c <lcdWriteData>
  lcdWriteData(0x45);
 800184c:	2045      	movs	r0, #69	@ 0x45
 800184e:	f7ff ff75 	bl	800173c <lcdWriteData>
  lcdWriteData(0x87);
 8001852:	2087      	movs	r0, #135	@ 0x87
 8001854:	f7ff ff72 	bl	800173c <lcdWriteData>
  lcdWriteData(0x32);
 8001858:	2032      	movs	r0, #50	@ 0x32
 800185a:	f7ff ff6f 	bl	800173c <lcdWriteData>
  lcdWriteData(0x0A);
 800185e:	200a      	movs	r0, #10
 8001860:	f7ff ff6c 	bl	800173c <lcdWriteData>
  lcdWriteData(0x07);
 8001864:	2007      	movs	r0, #7
 8001866:	f7ff ff69 	bl	800173c <lcdWriteData>
  lcdWriteData(0x02);
 800186a:	2002      	movs	r0, #2
 800186c:	f7ff ff66 	bl	800173c <lcdWriteData>
  lcdWriteData(0x07);
 8001870:	2007      	movs	r0, #7
 8001872:	f7ff ff63 	bl	800173c <lcdWriteData>
  lcdWriteData(0x05);
 8001876:	2005      	movs	r0, #5
 8001878:	f7ff ff60 	bl	800173c <lcdWriteData>
  lcdWriteData(0x00);
 800187c:	2000      	movs	r0, #0
 800187e:	f7ff ff5d 	bl	800173c <lcdWriteData>
  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8001882:	20e1      	movs	r0, #225	@ 0xe1
 8001884:	f7ff ff7a 	bl	800177c <lcdWriteCommand>
  lcdWriteData(0x00);
 8001888:	2000      	movs	r0, #0
 800188a:	f7ff ff57 	bl	800173c <lcdWriteData>
  lcdWriteData(0x25);
 800188e:	2025      	movs	r0, #37	@ 0x25
 8001890:	f7ff ff54 	bl	800173c <lcdWriteData>
  lcdWriteData(0x27);
 8001894:	2027      	movs	r0, #39	@ 0x27
 8001896:	f7ff ff51 	bl	800173c <lcdWriteData>
  lcdWriteData(0x05);
 800189a:	2005      	movs	r0, #5
 800189c:	f7ff ff4e 	bl	800173c <lcdWriteData>
  lcdWriteData(0x10);
 80018a0:	2010      	movs	r0, #16
 80018a2:	f7ff ff4b 	bl	800173c <lcdWriteData>
  lcdWriteData(0x09);
 80018a6:	2009      	movs	r0, #9
 80018a8:	f7ff ff48 	bl	800173c <lcdWriteData>
  lcdWriteData(0x3A);
 80018ac:	203a      	movs	r0, #58	@ 0x3a
 80018ae:	f7ff ff45 	bl	800173c <lcdWriteData>
  lcdWriteData(0x78);
 80018b2:	2078      	movs	r0, #120	@ 0x78
 80018b4:	f7ff ff42 	bl	800173c <lcdWriteData>
  lcdWriteData(0x4D);
 80018b8:	204d      	movs	r0, #77	@ 0x4d
 80018ba:	f7ff ff3f 	bl	800173c <lcdWriteData>
  lcdWriteData(0x05);
 80018be:	2005      	movs	r0, #5
 80018c0:	f7ff ff3c 	bl	800173c <lcdWriteData>
  lcdWriteData(0x18);
 80018c4:	2018      	movs	r0, #24
 80018c6:	f7ff ff39 	bl	800173c <lcdWriteData>
  lcdWriteData(0x0D);
 80018ca:	200d      	movs	r0, #13
 80018cc:	f7ff ff36 	bl	800173c <lcdWriteData>
  lcdWriteData(0x38);
 80018d0:	2038      	movs	r0, #56	@ 0x38
 80018d2:	f7ff ff33 	bl	800173c <lcdWriteData>
  lcdWriteData(0x3A);
 80018d6:	203a      	movs	r0, #58	@ 0x3a
 80018d8:	f7ff ff30 	bl	800173c <lcdWriteData>
  lcdWriteData(0x1F);
 80018dc:	201f      	movs	r0, #31
 80018de:	f7ff ff2d 	bl	800173c <lcdWriteData>
  lcdWriteCommand(ILI9341_COLADDRSET);
 80018e2:	202a      	movs	r0, #42	@ 0x2a
 80018e4:	f7ff ff4a 	bl	800177c <lcdWriteCommand>
  lcdWriteData(0x00);
 80018e8:	2000      	movs	r0, #0
 80018ea:	f7ff ff27 	bl	800173c <lcdWriteData>
  lcdWriteData(0x00);
 80018ee:	2000      	movs	r0, #0
 80018f0:	f7ff ff24 	bl	800173c <lcdWriteData>
  lcdWriteData(0x00);
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff ff21 	bl	800173c <lcdWriteData>
  lcdWriteData(0xEF);
 80018fa:	20ef      	movs	r0, #239	@ 0xef
 80018fc:	f7ff ff1e 	bl	800173c <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8001900:	202b      	movs	r0, #43	@ 0x2b
 8001902:	f7ff ff3b 	bl	800177c <lcdWriteCommand>
  lcdWriteData(0x00);
 8001906:	2000      	movs	r0, #0
 8001908:	f7ff ff18 	bl	800173c <lcdWriteData>
  lcdWriteData(0x00);
 800190c:	2000      	movs	r0, #0
 800190e:	f7ff ff15 	bl	800173c <lcdWriteData>
  lcdWriteData(0x01);
 8001912:	2001      	movs	r0, #1
 8001914:	f7ff ff12 	bl	800173c <lcdWriteData>
  lcdWriteData(0x3F);
 8001918:	203f      	movs	r0, #63	@ 0x3f
 800191a:	f7ff ff0f 	bl	800173c <lcdWriteData>
  lcdWriteCommand(ILI9341_ENTRYMODE);	//Normal Display, LV detect disable
 800191e:	20b7      	movs	r0, #183	@ 0xb7
 8001920:	f7ff ff2c 	bl	800177c <lcdWriteCommand>
  lcdWriteData(0x07);
 8001924:	2007      	movs	r0, #7
 8001926:	f7ff ff09 	bl	800173c <lcdWriteData>
  lcdWriteCommand(ILI9341_DISPLAYFUNC);	//Default
 800192a:	20b6      	movs	r0, #182	@ 0xb6
 800192c:	f7ff ff26 	bl	800177c <lcdWriteCommand>
  lcdWriteData(0x0A);
 8001930:	200a      	movs	r0, #10
 8001932:	f7ff ff03 	bl	800173c <lcdWriteData>
  lcdWriteData(0x82);
 8001936:	2082      	movs	r0, #130	@ 0x82
 8001938:	f7ff ff00 	bl	800173c <lcdWriteData>
  lcdWriteData(0x27);
 800193c:	2027      	movs	r0, #39	@ 0x27
 800193e:	f7ff fefd 	bl	800173c <lcdWriteData>
  lcdWriteData(0x00);
 8001942:	2000      	movs	r0, #0
 8001944:	f7ff fefa 	bl	800173c <lcdWriteData>
  lcdWriteCommand(ILI9341_SLEEPOUT);
 8001948:	2011      	movs	r0, #17
 800194a:	f7ff ff17 	bl	800177c <lcdWriteCommand>
  HAL_Delay(100);
 800194e:	2064      	movs	r0, #100	@ 0x64
 8001950:	f001 fab6 	bl	8002ec0 <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 8001954:	2029      	movs	r0, #41	@ 0x29
 8001956:	f7ff ff11 	bl	800177c <lcdWriteCommand>
  HAL_Delay(100);
 800195a:	2064      	movs	r0, #100	@ 0x64
 800195c:	f001 fab0 	bl	8002ec0 <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8001960:	202c      	movs	r0, #44	@ 0x2c
 8001962:	f7ff ff0b 	bl	800177c <lcdWriteCommand>
  lcdWriteCommand(ILI9341_MEMCONTROL); //BGR format. SetOrientation LandscapeConfig // 0x20 for RGB
 8001966:	2036      	movs	r0, #54	@ 0x36
 8001968:	f7ff ff08 	bl	800177c <lcdWriteCommand>
  lcdWriteData(0x28);
 800196c:	2028      	movs	r0, #40	@ 0x28
 800196e:	f7ff fee5 	bl	800173c <lcdWriteData>
}
 8001972:	bd10      	pop	{r4, pc}
 8001974:	40020800 	.word	0x40020800

08001978 <lcdSetWindow>:
{
 8001978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800197a:	4607      	mov	r7, r0
 800197c:	460d      	mov	r5, r1
 800197e:	4616      	mov	r6, r2
 8001980:	461c      	mov	r4, r3
  lcdWriteCommand(ILI9341_COLADDRSET);
 8001982:	202a      	movs	r0, #42	@ 0x2a
 8001984:	f7ff fefa 	bl	800177c <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 8001988:	0a38      	lsrs	r0, r7, #8
 800198a:	f7ff fed7 	bl	800173c <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 800198e:	b2f8      	uxtb	r0, r7
 8001990:	f7ff fed4 	bl	800173c <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 8001994:	0a30      	lsrs	r0, r6, #8
 8001996:	f7ff fed1 	bl	800173c <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 800199a:	b2f0      	uxtb	r0, r6
 800199c:	f7ff fece 	bl	800173c <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80019a0:	202b      	movs	r0, #43	@ 0x2b
 80019a2:	f7ff feeb 	bl	800177c <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 80019a6:	0a28      	lsrs	r0, r5, #8
 80019a8:	f7ff fec8 	bl	800173c <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 80019ac:	b2e8      	uxtb	r0, r5
 80019ae:	f7ff fec5 	bl	800173c <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 80019b2:	0a20      	lsrs	r0, r4, #8
 80019b4:	f7ff fec2 	bl	800173c <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 80019b8:	b2e0      	uxtb	r0, r4
 80019ba:	f7ff febf 	bl	800173c <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 80019be:	202c      	movs	r0, #44	@ 0x2c
 80019c0:	f7ff fedc 	bl	800177c <lcdWriteCommand>
}
 80019c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080019c8 <lcdFillRGB>:
{
 80019c8:	b538      	push	{r3, r4, r5, lr}
 80019ca:	4605      	mov	r5, r0
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 80019cc:	23ef      	movs	r3, #239	@ 0xef
 80019ce:	f240 123f 	movw	r2, #319	@ 0x13f
 80019d2:	2100      	movs	r1, #0
 80019d4:	4608      	mov	r0, r1
 80019d6:	f7ff ffcf 	bl	8001978 <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 80019da:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
  while(dimensions--)
 80019de:	e003      	b.n	80019e8 <lcdFillRGB+0x20>
		  lcdWriteData(color);
 80019e0:	4628      	mov	r0, r5
 80019e2:	f7ff feab 	bl	800173c <lcdWriteData>
{
 80019e6:	4623      	mov	r3, r4
  while(dimensions--)
 80019e8:	1e5c      	subs	r4, r3, #1
 80019ea:	b17b      	cbz	r3, 8001a0c <lcdFillRGB+0x44>
	  if (dimensions % 240)
 80019ec:	4a08      	ldr	r2, [pc, #32]	@ (8001a10 <lcdFillRGB+0x48>)
 80019ee:	fb82 3204 	smull	r3, r2, r2, r4
 80019f2:	4422      	add	r2, r4
 80019f4:	17e3      	asrs	r3, r4, #31
 80019f6:	ebc3 13e2 	rsb	r3, r3, r2, asr #7
 80019fa:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80019fe:	ebb4 1f03 	cmp.w	r4, r3, lsl #4
 8001a02:	d0ed      	beq.n	80019e0 <lcdFillRGB+0x18>
		  lcdWriteData(color);
 8001a04:	4628      	mov	r0, r5
 8001a06:	f7ff fe99 	bl	800173c <lcdWriteData>
 8001a0a:	e7ec      	b.n	80019e6 <lcdFillRGB+0x1e>
}
 8001a0c:	bd38      	pop	{r3, r4, r5, pc}
 8001a0e:	bf00      	nop
 8001a10:	88888889 	.word	0x88888889

08001a14 <lcdDrawPixel>:
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8001a14:	f5b0 7fa0 	cmp.w	r0, #320	@ 0x140
 8001a18:	d20c      	bcs.n	8001a34 <lcdDrawPixel+0x20>
{
 8001a1a:	b510      	push	{r4, lr}
 8001a1c:	4614      	mov	r4, r2
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8001a1e:	29ef      	cmp	r1, #239	@ 0xef
 8001a20:	d900      	bls.n	8001a24 <lcdDrawPixel+0x10>
}
 8001a22:	bd10      	pop	{r4, pc}
    lcdSetWindow(x, y, x, y);
 8001a24:	460b      	mov	r3, r1
 8001a26:	4602      	mov	r2, r0
 8001a28:	f7ff ffa6 	bl	8001978 <lcdSetWindow>
    lcdWriteData(color);
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f7ff fe85 	bl	800173c <lcdWriteData>
 8001a32:	e7f6      	b.n	8001a22 <lcdDrawPixel+0xe>
 8001a34:	4770      	bx	lr
	...

08001a38 <lcdDrawChar>:
{
 8001a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a3c:	b085      	sub	sp, #20
 8001a3e:	9203      	str	r2, [sp, #12]
 8001a40:	f8bd 9038 	ldrh.w	r9, [sp, #56]	@ 0x38
	if ((x >= lcdProperties.width) || 			// Clip right
 8001a44:	f5b0 7fa0 	cmp.w	r0, #320	@ 0x140
 8001a48:	da62      	bge.n	8001b10 <lcdDrawChar+0xd8>
 8001a4a:	4683      	mov	fp, r0
 8001a4c:	4688      	mov	r8, r1
 8001a4e:	461f      	mov	r7, r3
 8001a50:	29ef      	cmp	r1, #239	@ 0xef
 8001a52:	dc5d      	bgt.n	8001b10 <lcdDrawChar+0xd8>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8001a54:	4b30      	ldr	r3, [pc, #192]	@ (8001b18 <lcdDrawChar+0xe0>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	889a      	ldrh	r2, [r3, #4]
			(y >= lcdProperties.height) || 		// Clip bottom
 8001a5a:	42d0      	cmn	r0, r2
 8001a5c:	d458      	bmi.n	8001b10 <lcdDrawChar+0xd8>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8001a5e:	88db      	ldrh	r3, [r3, #6]
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8001a60:	42d9      	cmn	r1, r3
 8001a62:	d455      	bmi.n	8001b10 <lcdDrawChar+0xd8>
	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8001a64:	f3c3 03c7 	ubfx	r3, r3, #3, #8
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	e046      	b.n	8001afa <lcdDrawChar+0xc2>
					lcdDrawPixel(x + j + xP, y + i, color);
 8001a6c:	eb04 000b 	add.w	r0, r4, fp
 8001a70:	eb06 0108 	add.w	r1, r6, r8
 8001a74:	fa1a f080 	uxtah	r0, sl, r0
 8001a78:	463a      	mov	r2, r7
 8001a7a:	b289      	uxth	r1, r1
 8001a7c:	b280      	uxth	r0, r0
 8001a7e:	f7ff ffc9 	bl	8001a14 <lcdDrawPixel>
				line <<= 1;
 8001a82:	006d      	lsls	r5, r5, #1
 8001a84:	b2ed      	uxtb	r5, r5
			for(uint8_t j = 0; j < 8; j++)
 8001a86:	3401      	adds	r4, #1
 8001a88:	b2e4      	uxtb	r4, r4
 8001a8a:	2c07      	cmp	r4, #7
 8001a8c:	d810      	bhi.n	8001ab0 <lcdDrawChar+0x78>
				if((line & 0x80) == 0x80)
 8001a8e:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8001a92:	d1eb      	bne.n	8001a6c <lcdDrawChar+0x34>
				else if (bg != color)
 8001a94:	45b9      	cmp	r9, r7
 8001a96:	d0f4      	beq.n	8001a82 <lcdDrawChar+0x4a>
					lcdDrawPixel(x + j + xP, y + i, bg);
 8001a98:	eb04 000b 	add.w	r0, r4, fp
 8001a9c:	eb06 0108 	add.w	r1, r6, r8
 8001aa0:	fa1a f080 	uxtah	r0, sl, r0
 8001aa4:	464a      	mov	r2, r9
 8001aa6:	b289      	uxth	r1, r1
 8001aa8:	b280      	uxth	r0, r0
 8001aaa:	f7ff ffb3 	bl	8001a14 <lcdDrawPixel>
 8001aae:	e7e8      	b.n	8001a82 <lcdDrawChar+0x4a>
			xP += 8;
 8001ab0:	f8dd c000 	ldr.w	ip, [sp]
 8001ab4:	9b01      	ldr	r3, [sp, #4]
 8001ab6:	f10a 0208 	add.w	r2, sl, #8
 8001aba:	fa5f fa82 	uxtb.w	sl, r2
		for(uint8_t k = 0; k < fontCoeff; k++)
 8001abe:	f10c 0c01 	add.w	ip, ip, #1
 8001ac2:	fa5f fc8c 	uxtb.w	ip, ip
 8001ac6:	459c      	cmp	ip, r3
 8001ac8:	d214      	bcs.n	8001af4 <lcdDrawChar+0xbc>
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8001aca:	4913      	ldr	r1, [pc, #76]	@ (8001b18 <lcdDrawChar+0xe0>)
 8001acc:	6889      	ldr	r1, [r1, #8]
 8001ace:	6808      	ldr	r0, [r1, #0]
 8001ad0:	9a03      	ldr	r2, [sp, #12]
 8001ad2:	f1a2 0420 	sub.w	r4, r2, #32
 8001ad6:	88c9      	ldrh	r1, [r1, #6]
 8001ad8:	fb01 f404 	mul.w	r4, r1, r4
 8001adc:	9a02      	ldr	r2, [sp, #8]
 8001ade:	fb03 f102 	mul.w	r1, r3, r2
 8001ae2:	fb03 1104 	mla	r1, r3, r4, r1
 8001ae6:	4461      	add	r1, ip
 8001ae8:	5c45      	ldrb	r5, [r0, r1]
			for(uint8_t j = 0; j < 8; j++)
 8001aea:	2400      	movs	r4, #0
 8001aec:	f8cd c000 	str.w	ip, [sp]
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	e7ca      	b.n	8001a8a <lcdDrawChar+0x52>
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8001af4:	9a02      	ldr	r2, [sp, #8]
 8001af6:	3201      	adds	r2, #1
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	4616      	mov	r6, r2
 8001afc:	4906      	ldr	r1, [pc, #24]	@ (8001b18 <lcdDrawChar+0xe0>)
 8001afe:	6889      	ldr	r1, [r1, #8]
 8001b00:	88c9      	ldrh	r1, [r1, #6]
 8001b02:	428a      	cmp	r2, r1
 8001b04:	d204      	bcs.n	8001b10 <lcdDrawChar+0xd8>
		for(uint8_t k = 0; k < fontCoeff; k++)
 8001b06:	f04f 0c00 	mov.w	ip, #0
 8001b0a:	46e2      	mov	sl, ip
 8001b0c:	9202      	str	r2, [sp, #8]
 8001b0e:	e7da      	b.n	8001ac6 <lcdDrawChar+0x8e>
}
 8001b10:	b005      	add	sp, #20
 8001b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b16:	bf00      	nop
 8001b18:	20000020 	.word	0x20000020

08001b1c <lcdPrintf>:
{
 8001b1c:	b40f      	push	{r0, r1, r2, r3}
 8001b1e:	b570      	push	{r4, r5, r6, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	aa08      	add	r2, sp, #32
 8001b24:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(lst, fmt);
 8001b28:	9203      	str	r2, [sp, #12]
	vsprintf(buf, fmt, lst);
 8001b2a:	4c26      	ldr	r4, [pc, #152]	@ (8001bc4 <lcdPrintf+0xa8>)
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f008 f941 	bl	8009db4 <vsiprintf>
	while (*p)
 8001b32:	e010      	b.n	8001b56 <lcdPrintf+0x3a>
			cursorXY.y += lcdFont.pFont->Height;
 8001b34:	4b24      	ldr	r3, [pc, #144]	@ (8001bc8 <lcdPrintf+0xac>)
 8001b36:	885a      	ldrh	r2, [r3, #2]
 8001b38:	4924      	ldr	r1, [pc, #144]	@ (8001bcc <lcdPrintf+0xb0>)
 8001b3a:	6889      	ldr	r1, [r1, #8]
 8001b3c:	88c9      	ldrh	r1, [r1, #6]
 8001b3e:	440a      	add	r2, r1
 8001b40:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8001b42:	2200      	movs	r2, #0
 8001b44:	801a      	strh	r2, [r3, #0]
		p++;
 8001b46:	3401      	adds	r4, #1
		if (cursorXY.y >= lcdProperties.height)
 8001b48:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc8 <lcdPrintf+0xac>)
 8001b4a:	885b      	ldrh	r3, [r3, #2]
 8001b4c:	2bef      	cmp	r3, #239	@ 0xef
 8001b4e:	d902      	bls.n	8001b56 <lcdPrintf+0x3a>
			cursorXY.y = 0;
 8001b50:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc8 <lcdPrintf+0xac>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	805a      	strh	r2, [r3, #2]
	while (*p)
 8001b56:	7822      	ldrb	r2, [r4, #0]
 8001b58:	2a00      	cmp	r2, #0
 8001b5a:	d02d      	beq.n	8001bb8 <lcdPrintf+0x9c>
		if (*p == '\n')
 8001b5c:	2a0a      	cmp	r2, #10
 8001b5e:	d0e9      	beq.n	8001b34 <lcdPrintf+0x18>
		else if (*p == '\r')
 8001b60:	2a0d      	cmp	r2, #13
 8001b62:	d0f0      	beq.n	8001b46 <lcdPrintf+0x2a>
		else if (*p == '\t')
 8001b64:	2a09      	cmp	r2, #9
 8001b66:	d108      	bne.n	8001b7a <lcdPrintf+0x5e>
			cursorXY.x += lcdFont.pFont->Width * 4;
 8001b68:	4a17      	ldr	r2, [pc, #92]	@ (8001bc8 <lcdPrintf+0xac>)
 8001b6a:	8813      	ldrh	r3, [r2, #0]
 8001b6c:	4917      	ldr	r1, [pc, #92]	@ (8001bcc <lcdPrintf+0xb0>)
 8001b6e:	6889      	ldr	r1, [r1, #8]
 8001b70:	8889      	ldrh	r1, [r1, #4]
 8001b72:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001b76:	8013      	strh	r3, [r2, #0]
 8001b78:	e7e5      	b.n	8001b46 <lcdPrintf+0x2a>
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8001b7a:	4e13      	ldr	r6, [pc, #76]	@ (8001bc8 <lcdPrintf+0xac>)
 8001b7c:	4d13      	ldr	r5, [pc, #76]	@ (8001bcc <lcdPrintf+0xb0>)
 8001b7e:	88ab      	ldrh	r3, [r5, #4]
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	882b      	ldrh	r3, [r5, #0]
 8001b84:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 8001b88:	f9b6 0000 	ldrsh.w	r0, [r6]
 8001b8c:	f7ff ff54 	bl	8001a38 <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8001b90:	8833      	ldrh	r3, [r6, #0]
 8001b92:	68a9      	ldr	r1, [r5, #8]
 8001b94:	888a      	ldrh	r2, [r1, #4]
 8001b96:	4413      	add	r3, r2
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	8033      	strh	r3, [r6, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8001b9c:	7b28      	ldrb	r0, [r5, #12]
 8001b9e:	2800      	cmp	r0, #0
 8001ba0:	d0d1      	beq.n	8001b46 <lcdPrintf+0x2a>
 8001ba2:	f5c2 72a0 	rsb	r2, r2, #320	@ 0x140
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	ddcd      	ble.n	8001b46 <lcdPrintf+0x2a>
				cursorXY.y += lcdFont.pFont->Height;
 8001baa:	8872      	ldrh	r2, [r6, #2]
 8001bac:	88c9      	ldrh	r1, [r1, #6]
 8001bae:	440a      	add	r2, r1
 8001bb0:	8072      	strh	r2, [r6, #2]
				cursorXY.x = 0;
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	8032      	strh	r2, [r6, #0]
 8001bb6:	e7c6      	b.n	8001b46 <lcdPrintf+0x2a>
}
 8001bb8:	b004      	add	sp, #16
 8001bba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001bbe:	b004      	add	sp, #16
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	200002f0 	.word	0x200002f0
 8001bc8:	200003f0 	.word	0x200003f0
 8001bcc:	20000020 	.word	0x20000020

08001bd0 <lcdDrawPosition>:
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8001bd0:	f5b0 7fa0 	cmp.w	r0, #320	@ 0x140
 8001bd4:	d217      	bcs.n	8001c06 <lcdDrawPosition+0x36>
{
 8001bd6:	b538      	push	{r3, r4, r5, lr}
 8001bd8:	4615      	mov	r5, r2
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8001bda:	29ef      	cmp	r1, #239	@ 0xef
 8001bdc:	d900      	bls.n	8001be0 <lcdDrawPosition+0x10>
}
 8001bde:	bd38      	pop	{r3, r4, r5, pc}
    lcdSetWindow((x-3), (y-3), (x+3), (y+3));
 8001be0:	1ccb      	adds	r3, r1, #3
 8001be2:	1cc2      	adds	r2, r0, #3
 8001be4:	3903      	subs	r1, #3
 8001be6:	3803      	subs	r0, #3
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	b292      	uxth	r2, r2
 8001bec:	b289      	uxth	r1, r1
 8001bee:	b280      	uxth	r0, r0
 8001bf0:	f7ff fec2 	bl	8001978 <lcdSetWindow>
    for (int i = 49; i > 0; i--)
 8001bf4:	2431      	movs	r4, #49	@ 0x31
 8001bf6:	e003      	b.n	8001c00 <lcdDrawPosition+0x30>
    lcdWriteData(color);
 8001bf8:	4628      	mov	r0, r5
 8001bfa:	f7ff fd9f 	bl	800173c <lcdWriteData>
    for (int i = 49; i > 0; i--)
 8001bfe:	3c01      	subs	r4, #1
 8001c00:	2c00      	cmp	r4, #0
 8001c02:	dcf9      	bgt.n	8001bf8 <lcdDrawPosition+0x28>
 8001c04:	e7eb      	b.n	8001bde <lcdDrawPosition+0xe>
 8001c06:	4770      	bx	lr

08001c08 <lcdDrawPixels>:
{
 8001c08:	b570      	push	{r4, r5, r6, lr}
 8001c0a:	4616      	mov	r6, r2
 8001c0c:	461d      	mov	r5, r3
  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 8001c0e:	23ef      	movs	r3, #239	@ 0xef
 8001c10:	f240 123f 	movw	r2, #319	@ 0x13f
 8001c14:	f7ff feb0 	bl	8001978 <lcdSetWindow>
  uint32_t i = 0;
 8001c18:	2400      	movs	r4, #0
	  lcdWriteData(data[i++]);
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	3401      	adds	r4, #1
 8001c1e:	f836 0011 	ldrh.w	r0, [r6, r1, lsl #1]
 8001c22:	f7ff fd8b 	bl	800173c <lcdWriteData>
  while (i < dataLength);
 8001c26:	42ac      	cmp	r4, r5
 8001c28:	d3f7      	bcc.n	8001c1a <lcdDrawPixels+0x12>
}
 8001c2a:	bd70      	pop	{r4, r5, r6, pc}

08001c2c <lcdDrawImage>:
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8001c2c:	f5b0 7fa0 	cmp.w	r0, #320	@ 0x140
 8001c30:	d222      	bcs.n	8001c78 <lcdDrawImage+0x4c>
{
 8001c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c34:	4606      	mov	r6, r0
 8001c36:	460f      	mov	r7, r1
 8001c38:	4614      	mov	r4, r2
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8001c3a:	29ef      	cmp	r1, #239	@ 0xef
 8001c3c:	d81b      	bhi.n	8001c76 <lcdDrawImage+0x4a>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 8001c3e:	8813      	ldrh	r3, [r2, #0]
 8001c40:	4403      	add	r3, r0
 8001c42:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001c46:	dc16      	bgt.n	8001c76 <lcdDrawImage+0x4a>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 8001c48:	8853      	ldrh	r3, [r2, #2]
 8001c4a:	440b      	add	r3, r1
 8001c4c:	2bf0      	cmp	r3, #240	@ 0xf0
 8001c4e:	dc12      	bgt.n	8001c76 <lcdDrawImage+0x4a>
	for (int i = 0; i < pBitmap->ySize; ++i)
 8001c50:	2500      	movs	r5, #0
 8001c52:	e00d      	b.n	8001c70 <lcdDrawImage+0x44>
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 8001c54:	68a2      	ldr	r2, [r4, #8]
 8001c56:	88a0      	ldrh	r0, [r4, #4]
 8001c58:	79a3      	ldrb	r3, [r4, #6]
 8001c5a:	08db      	lsrs	r3, r3, #3
 8001c5c:	1979      	adds	r1, r7, r5
 8001c5e:	fb90 f3f3 	sdiv	r3, r0, r3
 8001c62:	fb05 2200 	mla	r2, r5, r0, r2
 8001c66:	b289      	uxth	r1, r1
 8001c68:	4630      	mov	r0, r6
 8001c6a:	f7ff ffcd 	bl	8001c08 <lcdDrawPixels>
	for (int i = 0; i < pBitmap->ySize; ++i)
 8001c6e:	3501      	adds	r5, #1
 8001c70:	8863      	ldrh	r3, [r4, #2]
 8001c72:	42ab      	cmp	r3, r5
 8001c74:	dcee      	bgt.n	8001c54 <lcdDrawImage+0x28>
}
 8001c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c78:	4770      	bx	lr
	...

08001c7c <lcdSetCursor>:
{
 8001c7c:	b510      	push	{r4, lr}
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
	cursorXY.x = x;
 8001c82:	4c03      	ldr	r4, [pc, #12]	@ (8001c90 <lcdSetCursor+0x14>)
 8001c84:	8020      	strh	r0, [r4, #0]
	cursorXY.y = y;
 8001c86:	8061      	strh	r1, [r4, #2]
	lcdSetWindow(x, y, x, y);
 8001c88:	f7ff fe76 	bl	8001978 <lcdSetWindow>
}
 8001c8c:	bd10      	pop	{r4, pc}
 8001c8e:	bf00      	nop
 8001c90:	200003f0 	.word	0x200003f0

08001c94 <lcdDisplayOn>:
{
 8001c94:	b508      	push	{r3, lr}
	lcdWriteCommand(ILI9341_DISPLAYON);
 8001c96:	2029      	movs	r0, #41	@ 0x29
 8001c98:	f7ff fd70 	bl	800177c <lcdWriteCommand>
	LCD_BL_ON();
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	2102      	movs	r1, #2
 8001ca0:	4801      	ldr	r0, [pc, #4]	@ (8001ca8 <lcdDisplayOn+0x14>)
 8001ca2:	f001 ffb4 	bl	8003c0e <HAL_GPIO_WritePin>
}
 8001ca6:	bd08      	pop	{r3, pc}
 8001ca8:	40020400 	.word	0x40020400

08001cac <lcdGetControllerID>:
{
 8001cac:	b510      	push	{r4, lr}
	lcdWriteCommand(ILI9341_READID4);
 8001cae:	20d3      	movs	r0, #211	@ 0xd3
 8001cb0:	f7ff fd64 	bl	800177c <lcdWriteCommand>
	id = ((uint32_t) lcdReadData() << 24);
 8001cb4:	f7ff fd48 	bl	8001748 <lcdReadData>
 8001cb8:	0604      	lsls	r4, r0, #24
	id |= ((uint32_t) lcdReadData() << 16);
 8001cba:	f7ff fd45 	bl	8001748 <lcdReadData>
 8001cbe:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	id |= ((uint32_t) lcdReadData() << 8);
 8001cc2:	f7ff fd41 	bl	8001748 <lcdReadData>
 8001cc6:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	id |= lcdReadData();
 8001cca:	f7ff fd3d 	bl	8001748 <lcdReadData>
}
 8001cce:	4320      	orrs	r0, r4
 8001cd0:	bd10      	pop	{r4, pc}
	...

08001cd4 <LCD_PrintVbat>:

void LCD_PrintVbat(float Text)
{
 8001cd4:	b538      	push	{r3, r4, r5, lr}
 8001cd6:	ee10 5a10 	vmov	r5, s0
	lcdSetTextFont(&Font16);
 8001cda:	480f      	ldr	r0, [pc, #60]	@ (8001d18 <LCD_PrintVbat+0x44>)
 8001cdc:	f7ff fd3a 	bl	8001754 <lcdSetTextFont>
	lcdSetCursor(10, lcdGetHeight() - lcdGetTextFont()->Height - 220);
 8001ce0:	f7ff fd44 	bl	800176c <lcdGetHeight>
 8001ce4:	4604      	mov	r4, r0
 8001ce6:	f7ff fd43 	bl	8001770 <lcdGetTextFont>
 8001cea:	88c3      	ldrh	r3, [r0, #6]
 8001cec:	1ae1      	subs	r1, r4, r3
 8001cee:	b289      	uxth	r1, r1
 8001cf0:	39dc      	subs	r1, #220	@ 0xdc
 8001cf2:	b289      	uxth	r1, r1
 8001cf4:	200a      	movs	r0, #10
 8001cf6:	f7ff ffc1 	bl	8001c7c <lcdSetCursor>
	lcdSetTextColor(COLOR_BLACK, COLOR_WHITE);
 8001cfa:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f7ff fd2e 	bl	8001760 <lcdSetTextColor>
	lcdPrintf("Vbat: %.2f B.", Text);
 8001d04:	4628      	mov	r0, r5
 8001d06:	f7fe fc1f 	bl	8000548 <__aeabi_f2d>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4803      	ldr	r0, [pc, #12]	@ (8001d1c <LCD_PrintVbat+0x48>)
 8001d10:	f7ff ff04 	bl	8001b1c <lcdPrintf>
}
 8001d14:	bd38      	pop	{r3, r4, r5, pc}
 8001d16:	bf00      	nop
 8001d18:	20000008 	.word	0x20000008
 8001d1c:	08011cd4 	.word	0x08011cd4

08001d20 <LCD_PrintCPU_t>:

void LCD_PrintCPU_t(float Text)
{
 8001d20:	b538      	push	{r3, r4, r5, lr}
 8001d22:	ee10 5a10 	vmov	r5, s0
	lcdSetTextFont(&Font16);
 8001d26:	480f      	ldr	r0, [pc, #60]	@ (8001d64 <LCD_PrintCPU_t+0x44>)
 8001d28:	f7ff fd14 	bl	8001754 <lcdSetTextFont>
	lcdSetCursor(10, lcdGetHeight() - lcdGetTextFont()->Height - 200);
 8001d2c:	f7ff fd1e 	bl	800176c <lcdGetHeight>
 8001d30:	4604      	mov	r4, r0
 8001d32:	f7ff fd1d 	bl	8001770 <lcdGetTextFont>
 8001d36:	88c3      	ldrh	r3, [r0, #6]
 8001d38:	1ae1      	subs	r1, r4, r3
 8001d3a:	b289      	uxth	r1, r1
 8001d3c:	39c8      	subs	r1, #200	@ 0xc8
 8001d3e:	b289      	uxth	r1, r1
 8001d40:	200a      	movs	r0, #10
 8001d42:	f7ff ff9b 	bl	8001c7c <lcdSetCursor>
	lcdSetTextColor(COLOR_BLACK, COLOR_WHITE);
 8001d46:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f7ff fd08 	bl	8001760 <lcdSetTextColor>
	lcdPrintf("CPU Temp.: %.1f c.", Text);
 8001d50:	4628      	mov	r0, r5
 8001d52:	f7fe fbf9 	bl	8000548 <__aeabi_f2d>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4803      	ldr	r0, [pc, #12]	@ (8001d68 <LCD_PrintCPU_t+0x48>)
 8001d5c:	f7ff fede 	bl	8001b1c <lcdPrintf>
}
 8001d60:	bd38      	pop	{r3, r4, r5, pc}
 8001d62:	bf00      	nop
 8001d64:	20000008 	.word	0x20000008
 8001d68:	08011ce4 	.word	0x08011ce4

08001d6c <LCD_PrintTime>:

void LCD_PrintTime(RTC_TimeTypeDef Time)
{
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	b510      	push	{r4, lr}
 8001d70:	ac02      	add	r4, sp, #8
 8001d72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	lcdSetTextFont(&Font24);
 8001d76:	4811      	ldr	r0, [pc, #68]	@ (8001dbc <LCD_PrintTime+0x50>)
 8001d78:	f7ff fcec 	bl	8001754 <lcdSetTextFont>
	lcdSetCursor(10, lcdGetHeight() - lcdGetTextFont()->Height - 60);
 8001d7c:	f7ff fcf6 	bl	800176c <lcdGetHeight>
 8001d80:	4604      	mov	r4, r0
 8001d82:	f7ff fcf5 	bl	8001770 <lcdGetTextFont>
 8001d86:	88c3      	ldrh	r3, [r0, #6]
 8001d88:	1ae1      	subs	r1, r4, r3
 8001d8a:	b289      	uxth	r1, r1
 8001d8c:	393c      	subs	r1, #60	@ 0x3c
 8001d8e:	b289      	uxth	r1, r1
 8001d90:	200a      	movs	r0, #10
 8001d92:	f7ff ff73 	bl	8001c7c <lcdSetCursor>
	lcdSetTextColor(COLOR_BLACK, COLOR_WHITE);
 8001d96:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f7ff fce0 	bl	8001760 <lcdSetTextColor>
	lcdPrintf("Time: %02d:%02d:%02d", Time.Hours, Time.Minutes, Time.Seconds);
 8001da0:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001da4:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001da8:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8001dac:	4804      	ldr	r0, [pc, #16]	@ (8001dc0 <LCD_PrintTime+0x54>)
 8001dae:	f7ff feb5 	bl	8001b1c <lcdPrintf>
}
 8001db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001db6:	b004      	add	sp, #16
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000018 	.word	0x20000018
 8001dc0:	08011cf8 	.word	0x08011cf8

08001dc4 <LCD_PrintDate>:

void LCD_PrintDate(RTC_DateTypeDef Date)
{
 8001dc4:	b510      	push	{r4, lr}
 8001dc6:	b094      	sub	sp, #80	@ 0x50
 8001dc8:	9001      	str	r0, [sp, #4]
	char i[7][10] = {"MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"};
 8001dca:	2246      	movs	r2, #70	@ 0x46
 8001dcc:	491f      	ldr	r1, [pc, #124]	@ (8001e4c <LCD_PrintDate+0x88>)
 8001dce:	a802      	add	r0, sp, #8
 8001dd0:	f008 f8fd 	bl	8009fce <memcpy>
	lcdSetTextFont(&Font24);
 8001dd4:	481e      	ldr	r0, [pc, #120]	@ (8001e50 <LCD_PrintDate+0x8c>)
 8001dd6:	f7ff fcbd 	bl	8001754 <lcdSetTextFont>
	lcdSetCursor(10, lcdGetHeight() - lcdGetTextFont()->Height - 5);
 8001dda:	f7ff fcc7 	bl	800176c <lcdGetHeight>
 8001dde:	4604      	mov	r4, r0
 8001de0:	f7ff fcc6 	bl	8001770 <lcdGetTextFont>
 8001de4:	88c3      	ldrh	r3, [r0, #6]
 8001de6:	1ae1      	subs	r1, r4, r3
 8001de8:	b289      	uxth	r1, r1
 8001dea:	3905      	subs	r1, #5
 8001dec:	b289      	uxth	r1, r1
 8001dee:	200a      	movs	r0, #10
 8001df0:	f7ff ff44 	bl	8001c7c <lcdSetCursor>
	lcdSetTextColor(COLOR_BLACK, COLOR_WHITE);
 8001df4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f7ff fcb1 	bl	8001760 <lcdSetTextColor>
	lcdPrintf("Date: %02d.%02d.20%02d", Date.Date, Date.Month, Date.Year);
 8001dfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e02:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001e06:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8001e0a:	4812      	ldr	r0, [pc, #72]	@ (8001e54 <LCD_PrintDate+0x90>)
 8001e0c:	f7ff fe86 	bl	8001b1c <lcdPrintf>
	lcdSetTextFont(&Font20);
 8001e10:	4811      	ldr	r0, [pc, #68]	@ (8001e58 <LCD_PrintDate+0x94>)
 8001e12:	f7ff fc9f 	bl	8001754 <lcdSetTextFont>
	lcdSetCursor(10, lcdGetHeight() - lcdGetTextFont()->Height - 35);
 8001e16:	f7ff fca9 	bl	800176c <lcdGetHeight>
 8001e1a:	4604      	mov	r4, r0
 8001e1c:	f7ff fca8 	bl	8001770 <lcdGetTextFont>
 8001e20:	88c3      	ldrh	r3, [r0, #6]
 8001e22:	1ae1      	subs	r1, r4, r3
 8001e24:	b289      	uxth	r1, r1
 8001e26:	3923      	subs	r1, #35	@ 0x23
 8001e28:	b289      	uxth	r1, r1
 8001e2a:	200a      	movs	r0, #10
 8001e2c:	f7ff ff26 	bl	8001c7c <lcdSetCursor>
	lcdPrintf("Day: %s", i[Date.WeekDay -1]);
 8001e30:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001e34:	3901      	subs	r1, #1
 8001e36:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001e3a:	ab02      	add	r3, sp, #8
 8001e3c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8001e40:	4806      	ldr	r0, [pc, #24]	@ (8001e5c <LCD_PrintDate+0x98>)
 8001e42:	f7ff fe6b 	bl	8001b1c <lcdPrintf>
}
 8001e46:	b014      	add	sp, #80	@ 0x50
 8001e48:	bd10      	pop	{r4, pc}
 8001e4a:	bf00      	nop
 8001e4c:	0800ca60 	.word	0x0800ca60
 8001e50:	20000018 	.word	0x20000018
 8001e54:	08011d10 	.word	0x08011d10
 8001e58:	20000010 	.word	0x20000010
 8001e5c:	08011d28 	.word	0x08011d28

08001e60 <LCD_PrintSat>:

void LCD_PrintSat(char sat1, char sat2)
{
 8001e60:	b570      	push	{r4, r5, r6, lr}
 8001e62:	4605      	mov	r5, r0
 8001e64:	460e      	mov	r6, r1
	lcdSetTextFont(&Font16);
 8001e66:	480d      	ldr	r0, [pc, #52]	@ (8001e9c <LCD_PrintSat+0x3c>)
 8001e68:	f7ff fc74 	bl	8001754 <lcdSetTextFont>
	lcdSetCursor(10, lcdGetHeight() - lcdGetTextFont()->Height - 180);
 8001e6c:	f7ff fc7e 	bl	800176c <lcdGetHeight>
 8001e70:	4604      	mov	r4, r0
 8001e72:	f7ff fc7d 	bl	8001770 <lcdGetTextFont>
 8001e76:	88c3      	ldrh	r3, [r0, #6]
 8001e78:	1ae4      	subs	r4, r4, r3
 8001e7a:	b2a4      	uxth	r4, r4
 8001e7c:	3cb4      	subs	r4, #180	@ 0xb4
 8001e7e:	b2a1      	uxth	r1, r4
 8001e80:	200a      	movs	r0, #10
 8001e82:	f7ff fefb 	bl	8001c7c <lcdSetCursor>
	lcdSetTextColor(COLOR_BLACK, COLOR_WHITE);
 8001e86:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f7ff fc68 	bl	8001760 <lcdSetTextColor>
	lcdPrintf("Satellites in view: %c%c", sat1, sat2);
 8001e90:	4632      	mov	r2, r6
 8001e92:	4629      	mov	r1, r5
 8001e94:	4802      	ldr	r0, [pc, #8]	@ (8001ea0 <LCD_PrintSat+0x40>)
 8001e96:	f7ff fe41 	bl	8001b1c <lcdPrintf>
}
 8001e9a:	bd70      	pop	{r4, r5, r6, pc}
 8001e9c:	20000008 	.word	0x20000008
 8001ea0:	08011d30 	.word	0x08011d30

08001ea4 <LCD_GPS_lost>:

void LCD_GPS_lost()
{
 8001ea4:	b510      	push	{r4, lr}
	lcdSetTextFont(&Font12);
 8001ea6:	480b      	ldr	r0, [pc, #44]	@ (8001ed4 <LCD_GPS_lost+0x30>)
 8001ea8:	f7ff fc54 	bl	8001754 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 0);
 8001eac:	f7ff fc5e 	bl	800176c <lcdGetHeight>
 8001eb0:	4604      	mov	r4, r0
 8001eb2:	f7ff fc5d 	bl	8001770 <lcdGetTextFont>
 8001eb6:	88c3      	ldrh	r3, [r0, #6]
 8001eb8:	1ae1      	subs	r1, r4, r3
 8001eba:	b289      	uxth	r1, r1
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f7ff fedd 	bl	8001c7c <lcdSetCursor>
	lcdSetTextColor(COLOR_RED, COLOR_BLACK);
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001ec8:	f7ff fc4a 	bl	8001760 <lcdSetTextColor>
	lcdPrintf("GPS Lost");
 8001ecc:	4802      	ldr	r0, [pc, #8]	@ (8001ed8 <LCD_GPS_lost+0x34>)
 8001ece:	f7ff fe25 	bl	8001b1c <lcdPrintf>
}
 8001ed2:	bd10      	pop	{r4, pc}
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	08011d4c 	.word	0x08011d4c

08001edc <Print_Vbat_Temp>:
  }
}

/* USER CODE BEGIN 4 */
void Print_Vbat_Temp(float Vref)
{
 8001edc:	b570      	push	{r4, r5, r6, lr}
 8001ede:	ed2d 8b02 	vpush	{d8}
 8001ee2:	eeb0 8a40 	vmov.f32	s16, s0
	uint16_t adcValue;
	uint16_t adc2Value;
	HAL_ADC_Start(&hadc1);
 8001ee6:	4c25      	ldr	r4, [pc, #148]	@ (8001f7c <Print_Vbat_Temp+0xa0>)
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f001 f8c3 	bl	8003074 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001eee:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f001 f980 	bl	80031f8 <HAL_ADC_PollForConversion>
	adcValue = HAL_ADC_GetValue(&hadc1);
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f001 f9d9 	bl	80032b0 <HAL_ADC_GetValue>
 8001efe:	b286      	uxth	r6, r0
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001f00:	f04f 31ff 	mov.w	r1, #4294967295
 8001f04:	4620      	mov	r0, r4
 8001f06:	f001 f977 	bl	80031f8 <HAL_ADC_PollForConversion>
	adc2Value = HAL_ADC_GetValue(&hadc1);
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	f001 f9d0 	bl	80032b0 <HAL_ADC_GetValue>
 8001f10:	b285      	uxth	r5, r0
	HAL_ADC_Stop(&hadc1);
 8001f12:	4620      	mov	r0, r4
 8001f14:	f001 f950 	bl	80031b8 <HAL_ADC_Stop>
	LCD_PrintVbat((float)adcValue / 4095 * Vref);  //Vref=3.1 -> 6.2 because Vbat/2 for ADC, if source is Vbat
 8001f18:	ee07 6a90 	vmov	s15, r6
 8001f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f20:	eddf 8a17 	vldr	s17, [pc, #92]	@ 8001f80 <Print_Vbat_Temp+0xa4>
 8001f24:	ee87 0aa8 	vdiv.f32	s0, s15, s17
 8001f28:	ee20 0a08 	vmul.f32	s0, s0, s16
 8001f2c:	f7ff fed2 	bl	8001cd4 <LCD_PrintVbat>
	LCD_PrintCPU_t(((float)adc2Value / 4095 * Vref * 1000 - 760.0) / 2.5 + 25);	//Vref=3.1 3100
 8001f30:	ee07 5a90 	vmov	s15, r5
 8001f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f38:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8001f3c:	ee67 7a08 	vmul.f32	s15, s14, s16
 8001f40:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001f84 <Print_Vbat_Temp+0xa8>
 8001f44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f48:	ee17 0a90 	vmov	r0, s15
 8001f4c:	f7fe fafc 	bl	8000548 <__aeabi_f2d>
 8001f50:	2200      	movs	r2, #0
 8001f52:	4b0d      	ldr	r3, [pc, #52]	@ (8001f88 <Print_Vbat_Temp+0xac>)
 8001f54:	f7fe f998 	bl	8000288 <__aeabi_dsub>
 8001f58:	2200      	movs	r2, #0
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f8c <Print_Vbat_Temp+0xb0>)
 8001f5c:	f7fe fc76 	bl	800084c <__aeabi_ddiv>
 8001f60:	2200      	movs	r2, #0
 8001f62:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <Print_Vbat_Temp+0xb4>)
 8001f64:	f7fe f992 	bl	800028c <__adddf3>
 8001f68:	f7fe fe3e 	bl	8000be8 <__aeabi_d2f>
 8001f6c:	ee00 0a10 	vmov	s0, r0
 8001f70:	f7ff fed6 	bl	8001d20 <LCD_PrintCPU_t>
}
 8001f74:	ecbd 8b02 	vpop	{d8}
 8001f78:	bd70      	pop	{r4, r5, r6, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000254 	.word	0x20000254
 8001f80:	457ff000 	.word	0x457ff000
 8001f84:	447a0000 	.word	0x447a0000
 8001f88:	4087c000 	.word	0x4087c000
 8001f8c:	40040000 	.word	0x40040000
 8001f90:	40390000 	.word	0x40390000

08001f94 <GetDayOfWeek>:
	sDate.WeekDay = GetDayOfWeek(sDate.Date, sDate.Month, (2000 + sDate.Year));
	HAL_RTC_SetDate(&hrtc, &sDate, FORMAT_BIN);
}

uint8_t GetDayOfWeek(uint8_t date, uint8_t month, uint16_t year)
{
 8001f94:	b510      	push	{r4, lr}
    if (month < 3) {
 8001f96:	2902      	cmp	r1, #2
 8001f98:	d803      	bhi.n	8001fa2 <GetDayOfWeek+0xe>
        month += 12;
 8001f9a:	310c      	adds	r1, #12
 8001f9c:	b2c9      	uxtb	r1, r1
        year--;
 8001f9e:	3a01      	subs	r2, #1
 8001fa0:	b292      	uxth	r2, r2
    }
    uint8_t k = year % 100;
 8001fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8002010 <GetDayOfWeek+0x7c>)
 8001fa4:	fba3 3c02 	umull	r3, ip, r3, r2
 8001fa8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001fac:	2364      	movs	r3, #100	@ 0x64
 8001fae:	fb03 221c 	mls	r2, r3, ip, r2
 8001fb2:	b2d3      	uxtb	r3, r2
    uint8_t j = year / 100;
 8001fb4:	fa5f fe8c 	uxtb.w	lr, ip
    uint8_t h = (date + ((13 * (month + 1)) / 5) + k + (k / 4) + (j / 4) - (2 * j)) % 7;	//Zeller's algorithm
 8001fb8:	3101      	adds	r1, #1
 8001fba:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8001fbe:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8001fc2:	4a14      	ldr	r2, [pc, #80]	@ (8002014 <GetDayOfWeek+0x80>)
 8001fc4:	fb82 4201 	smull	r4, r2, r2, r1
 8001fc8:	17c9      	asrs	r1, r1, #31
 8001fca:	ebc1 0162 	rsb	r1, r1, r2, asr #1
 8001fce:	1842      	adds	r2, r0, r1
 8001fd0:	441a      	add	r2, r3
 8001fd2:	eb02 0293 	add.w	r2, r2, r3, lsr #2
 8001fd6:	f3cc 0c85 	ubfx	ip, ip, #2, #6
 8001fda:	4462      	add	r2, ip
 8001fdc:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
 8001fe0:	480d      	ldr	r0, [pc, #52]	@ (8002018 <GetDayOfWeek+0x84>)
 8001fe2:	fb80 3102 	smull	r3, r1, r0, r2
 8001fe6:	4411      	add	r1, r2
 8001fe8:	17d3      	asrs	r3, r2, #31
 8001fea:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8001fee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8001ff2:	1ad3      	subs	r3, r2, r3
    uint8_t rtcWeekDay = ((h + 5) % 7) + 1;	//conversion to RTC format
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	3305      	adds	r3, #5
 8001ff8:	fb80 2003 	smull	r2, r0, r0, r3
 8001ffc:	4418      	add	r0, r3
 8001ffe:	1080      	asrs	r0, r0, #2
 8002000:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8002004:	1a18      	subs	r0, r3, r0
 8002006:	b2c0      	uxtb	r0, r0
 8002008:	3001      	adds	r0, #1

    return rtcWeekDay;
}
 800200a:	b2c0      	uxtb	r0, r0
 800200c:	bd10      	pop	{r4, pc}
 800200e:	bf00      	nop
 8002010:	51eb851f 	.word	0x51eb851f
 8002014:	66666667 	.word	0x66666667
 8002018:	92492493 	.word	0x92492493

0800201c <SetTime>:
{
 800201c:	b500      	push	{lr}
 800201e:	b087      	sub	sp, #28
	sTime.Hours = GPS_GetData()->hour;
 8002020:	f7ff f8e6 	bl	80011f0 <GPS_GetData>
 8002024:	6943      	ldr	r3, [r0, #20]
 8002026:	f88d 3004 	strb.w	r3, [sp, #4]
	sTime.Minutes = GPS_GetData()->minutes;
 800202a:	f7ff f8e1 	bl	80011f0 <GPS_GetData>
 800202e:	6983      	ldr	r3, [r0, #24]
 8002030:	f88d 3005 	strb.w	r3, [sp, #5]
	sTime.Seconds = GPS_GetData()->seconds;
 8002034:	f7ff f8dc 	bl	80011f0 <GPS_GetData>
 8002038:	7f03      	ldrb	r3, [r0, #28]
 800203a:	f88d 3006 	strb.w	r3, [sp, #6]
	if (sTime.Hours > 23)
 800203e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002042:	2a17      	cmp	r2, #23
 8002044:	d805      	bhi.n	8002052 <SetTime+0x36>
	if (sTime.Minutes > 59)
 8002046:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800204a:	2a3b      	cmp	r2, #59	@ 0x3b
 800204c:	d801      	bhi.n	8002052 <SetTime+0x36>
	if (sTime.Seconds > 59)
 800204e:	2b3b      	cmp	r3, #59	@ 0x3b
 8002050:	d902      	bls.n	8002058 <SetTime+0x3c>
}
 8002052:	b007      	add	sp, #28
 8002054:	f85d fb04 	ldr.w	pc, [sp], #4
	HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BIN);
 8002058:	2200      	movs	r2, #0
 800205a:	a901      	add	r1, sp, #4
 800205c:	4813      	ldr	r0, [pc, #76]	@ (80020ac <SetTime+0x90>)
 800205e:	f002 fa81 	bl	8004564 <HAL_RTC_SetTime>
	sDate.Date = GPS_GetData()->date;
 8002062:	f7ff f8c5 	bl	80011f0 <GPS_GetData>
 8002066:	6a03      	ldr	r3, [r0, #32]
 8002068:	f88d 3002 	strb.w	r3, [sp, #2]
	sDate.Month = GPS_GetData()->month;
 800206c:	f7ff f8c0 	bl	80011f0 <GPS_GetData>
 8002070:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002072:	f88d 3001 	strb.w	r3, [sp, #1]
	sDate.Year = GPS_GetData()->year;
 8002076:	f7ff f8bb 	bl	80011f0 <GPS_GetData>
 800207a:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 800207e:	f88d 2003 	strb.w	r2, [sp, #3]
	if (sDate.Date > 31)
 8002082:	f89d 0002 	ldrb.w	r0, [sp, #2]
 8002086:	281f      	cmp	r0, #31
 8002088:	d8e3      	bhi.n	8002052 <SetTime+0x36>
	if (sDate.Month > 12)
 800208a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800208e:	290c      	cmp	r1, #12
 8002090:	d8df      	bhi.n	8002052 <SetTime+0x36>
	sDate.WeekDay = GetDayOfWeek(sDate.Date, sDate.Month, (2000 + sDate.Year));
 8002092:	f502 62fa 	add.w	r2, r2, #2000	@ 0x7d0
 8002096:	f7ff ff7d 	bl	8001f94 <GetDayOfWeek>
 800209a:	f88d 0000 	strb.w	r0, [sp]
	HAL_RTC_SetDate(&hrtc, &sDate, FORMAT_BIN);
 800209e:	2200      	movs	r2, #0
 80020a0:	4669      	mov	r1, sp
 80020a2:	4802      	ldr	r0, [pc, #8]	@ (80020ac <SetTime+0x90>)
 80020a4:	f002 fabe 	bl	8004624 <HAL_RTC_SetDate>
 80020a8:	e7d3      	b.n	8002052 <SetTime+0x36>
 80020aa:	bf00      	nop
 80020ac:	200024ec 	.word	0x200024ec

080020b0 <Get_Time_For_LCD>:

void Get_Time_For_LCD(void)
{
 80020b0:	b530      	push	{r4, r5, lr}
 80020b2:	b089      	sub	sp, #36	@ 0x24
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 80020b4:	ac03      	add	r4, sp, #12
 80020b6:	4d0b      	ldr	r5, [pc, #44]	@ (80020e4 <Get_Time_For_LCD+0x34>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	4621      	mov	r1, r4
 80020bc:	4628      	mov	r0, r5
 80020be:	f002 fb08 	bl	80046d2 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 80020c2:	2200      	movs	r2, #0
 80020c4:	a902      	add	r1, sp, #8
 80020c6:	4628      	mov	r0, r5
 80020c8:	f002 fb29 	bl	800471e <HAL_RTC_GetDate>
	LCD_PrintTime(sTime);
 80020cc:	9b07      	ldr	r3, [sp, #28]
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020d4:	f7ff fe4a 	bl	8001d6c <LCD_PrintTime>
	LCD_PrintDate(sDate);
 80020d8:	9802      	ldr	r0, [sp, #8]
 80020da:	f7ff fe73 	bl	8001dc4 <LCD_PrintDate>
}
 80020de:	b009      	add	sp, #36	@ 0x24
 80020e0:	bd30      	pop	{r4, r5, pc}
 80020e2:	bf00      	nop
 80020e4:	200024ec 	.word	0x200024ec

080020e8 <GPS_PrintSatellites>:

void GPS_PrintSatellites(char *sat_str)
{
 80020e8:	b510      	push	{r4, lr}
	char *p;
	int count = 0;
 80020ea:	2400      	movs	r4, #0
	while((p = strchr(sat_str, ',')) != NULL) {
 80020ec:	212c      	movs	r1, #44	@ 0x2c
 80020ee:	f007 fe73 	bl	8009dd8 <strchr>
 80020f2:	4603      	mov	r3, r0
 80020f4:	b140      	cbz	r0, 8002108 <GPS_PrintSatellites+0x20>

	if(count == 2) {
 80020f6:	2c02      	cmp	r4, #2
 80020f8:	d002      	beq.n	8002100 <GPS_PrintSatellites+0x18>
		LCD_PrintSat(*(p+1), *(p+2));
		return;
	}
	sat_str = p + 1;
 80020fa:	1c58      	adds	r0, r3, #1
	count++;
 80020fc:	3401      	adds	r4, #1
 80020fe:	e7f5      	b.n	80020ec <GPS_PrintSatellites+0x4>
		LCD_PrintSat(*(p+1), *(p+2));
 8002100:	7899      	ldrb	r1, [r3, #2]
 8002102:	7858      	ldrb	r0, [r3, #1]
 8002104:	f7ff feac 	bl	8001e60 <LCD_PrintSat>
	}

}
 8002108:	bd10      	pop	{r4, pc}
	...

0800210c <GPSfoundPrint>:

void GPSfoundPrint()
{
 800210c:	b510      	push	{r4, lr}
  lcdSetTextFont(&Font24);
 800210e:	4810      	ldr	r0, [pc, #64]	@ (8002150 <GPSfoundPrint+0x44>)
 8002110:	f7ff fb20 	bl	8001754 <lcdSetTextFont>
  lcdSetCursor(80, lcdGetHeight() - lcdGetTextFont()->Height - 150);
 8002114:	f7ff fb2a 	bl	800176c <lcdGetHeight>
 8002118:	4604      	mov	r4, r0
 800211a:	f7ff fb29 	bl	8001770 <lcdGetTextFont>
 800211e:	88c3      	ldrh	r3, [r0, #6]
 8002120:	1ae1      	subs	r1, r4, r3
 8002122:	b289      	uxth	r1, r1
 8002124:	3996      	subs	r1, #150	@ 0x96
 8002126:	b289      	uxth	r1, r1
 8002128:	2050      	movs	r0, #80	@ 0x50
 800212a:	f7ff fda7 	bl	8001c7c <lcdSetCursor>
  lcdSetTextColor(COLOR_RED, COLOR_WHITE);
 800212e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002132:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8002136:	f7ff fb13 	bl	8001760 <lcdSetTextColor>
  lcdPrintf("%s", "GPS Found");
 800213a:	4906      	ldr	r1, [pc, #24]	@ (8002154 <GPSfoundPrint+0x48>)
 800213c:	4806      	ldr	r0, [pc, #24]	@ (8002158 <GPSfoundPrint+0x4c>)
 800213e:	f7ff fced 	bl	8001b1c <lcdPrintf>
  lcdDrawImage(110, 100, &bmGoToMap);
 8002142:	4a06      	ldr	r2, [pc, #24]	@ (800215c <GPSfoundPrint+0x50>)
 8002144:	2164      	movs	r1, #100	@ 0x64
 8002146:	206e      	movs	r0, #110	@ 0x6e
 8002148:	f7ff fd70 	bl	8001c2c <lcdDrawImage>
}
 800214c:	bd10      	pop	{r4, pc}
 800214e:	bf00      	nop
 8002150:	20000018 	.word	0x20000018
 8002154:	08011d58 	.word	0x08011d58
 8002158:	08011d64 	.word	0x08011d64
 800215c:	0800caac 	.word	0x0800caac

08002160 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002160:	b508      	push	{r3, lr}
    if (huart->Instance == USART2) {
 8002162:	6802      	ldr	r2, [r0, #0]
 8002164:	4b1b      	ldr	r3, [pc, #108]	@ (80021d4 <HAL_UART_RxCpltCallback+0x74>)
 8002166:	429a      	cmp	r2, r3
 8002168:	d000      	beq.n	800216c <HAL_UART_RxCpltCallback+0xc>
                return;
            }
        }
        HAL_UART_Receive_IT(&huart2, &rxByte, 1);
    }
}
 800216a:	bd08      	pop	{r3, pc}
        if (rxByte == '$') {
 800216c:	4b1a      	ldr	r3, [pc, #104]	@ (80021d8 <HAL_UART_RxCpltCallback+0x78>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b24      	cmp	r3, #36	@ 0x24
 8002172:	d011      	beq.n	8002198 <HAL_UART_RxCpltCallback+0x38>
        if (nmeaIndex < NMEA_BUFFER_SIZE) {
 8002174:	4a19      	ldr	r2, [pc, #100]	@ (80021dc <HAL_UART_RxCpltCallback+0x7c>)
 8002176:	8812      	ldrh	r2, [r2, #0]
 8002178:	2a7f      	cmp	r2, #127	@ 0x7f
 800217a:	d807      	bhi.n	800218c <HAL_UART_RxCpltCallback+0x2c>
            nmeaBuffer[nmeaIndex++] = rxByte;
 800217c:	1c51      	adds	r1, r2, #1
 800217e:	b289      	uxth	r1, r1
 8002180:	4816      	ldr	r0, [pc, #88]	@ (80021dc <HAL_UART_RxCpltCallback+0x7c>)
 8002182:	8001      	strh	r1, [r0, #0]
 8002184:	4816      	ldr	r0, [pc, #88]	@ (80021e0 <HAL_UART_RxCpltCallback+0x80>)
 8002186:	5483      	strb	r3, [r0, r2]
            if (rxByte == '\n' && nmeaIndex > 1 && nmeaBuffer[nmeaIndex-2] == '\r') {
 8002188:	2b0a      	cmp	r3, #10
 800218a:	d009      	beq.n	80021a0 <HAL_UART_RxCpltCallback+0x40>
        HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 800218c:	2201      	movs	r2, #1
 800218e:	4912      	ldr	r1, [pc, #72]	@ (80021d8 <HAL_UART_RxCpltCallback+0x78>)
 8002190:	4814      	ldr	r0, [pc, #80]	@ (80021e4 <HAL_UART_RxCpltCallback+0x84>)
 8002192:	f004 f966 	bl	8006462 <HAL_UART_Receive_IT>
 8002196:	e7e8      	b.n	800216a <HAL_UART_RxCpltCallback+0xa>
            nmeaIndex = 0;
 8002198:	4a10      	ldr	r2, [pc, #64]	@ (80021dc <HAL_UART_RxCpltCallback+0x7c>)
 800219a:	2100      	movs	r1, #0
 800219c:	8011      	strh	r1, [r2, #0]
 800219e:	e7e9      	b.n	8002174 <HAL_UART_RxCpltCallback+0x14>
            if (rxByte == '\n' && nmeaIndex > 1 && nmeaBuffer[nmeaIndex-2] == '\r') {
 80021a0:	2901      	cmp	r1, #1
 80021a2:	d9f3      	bls.n	800218c <HAL_UART_RxCpltCallback+0x2c>
 80021a4:	3902      	subs	r1, #2
 80021a6:	5c43      	ldrb	r3, [r0, r1]
 80021a8:	2b0d      	cmp	r3, #13
 80021aa:	d1ef      	bne.n	800218c <HAL_UART_RxCpltCallback+0x2c>
                messageReady = 1;
 80021ac:	2301      	movs	r3, #1
 80021ae:	4a0e      	ldr	r2, [pc, #56]	@ (80021e8 <HAL_UART_RxCpltCallback+0x88>)
 80021b0:	7013      	strb	r3, [r2, #0]
                GPS_UART_flag = 1;
 80021b2:	4a0e      	ldr	r2, [pc, #56]	@ (80021ec <HAL_UART_RxCpltCallback+0x8c>)
 80021b4:	7013      	strb	r3, [r2, #0]
  		        nmeaIndex = 0;
 80021b6:	4b09      	ldr	r3, [pc, #36]	@ (80021dc <HAL_UART_RxCpltCallback+0x7c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	801a      	strh	r2, [r3, #0]
            	  if (HAL_GPIO_ReadPin(Key1_GPIO_Port, Key1_Pin) == 0) {		//Test "GPRMC" packet parsing if key1 is pressed
 80021bc:	2108      	movs	r1, #8
 80021be:	480c      	ldr	r0, [pc, #48]	@ (80021f0 <HAL_UART_RxCpltCallback+0x90>)
 80021c0:	f001 fd1e 	bl	8003c00 <HAL_GPIO_ReadPin>
 80021c4:	2800      	cmp	r0, #0
 80021c6:	d1d0      	bne.n	800216a <HAL_UART_RxCpltCallback+0xa>
            		  strcpy(nmeaBuffer, testGPRMCmessage);
 80021c8:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <HAL_UART_RxCpltCallback+0x94>)
 80021ca:	6819      	ldr	r1, [r3, #0]
 80021cc:	4804      	ldr	r0, [pc, #16]	@ (80021e0 <HAL_UART_RxCpltCallback+0x80>)
 80021ce:	f007 fef6 	bl	8009fbe <strcpy>
                return;
 80021d2:	e7ca      	b.n	800216a <HAL_UART_RxCpltCallback+0xa>
 80021d4:	40004400 	.word	0x40004400
 80021d8:	2000047c 	.word	0x2000047c
 80021dc:	2000047e 	.word	0x2000047e
 80021e0:	200003fc 	.word	0x200003fc
 80021e4:	200026dc 	.word	0x200026dc
 80021e8:	200003f9 	.word	0x200003f9
 80021ec:	200003fa 	.word	0x200003fa
 80021f0:	40021000 	.word	0x40021000
 80021f4:	20000030 	.word	0x20000030

080021f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	 if (GPIO_Pin == IRQ_TOUCH_Pin) {
 80021f8:	2820      	cmp	r0, #32
 80021fa:	d000      	beq.n	80021fe <HAL_GPIO_EXTI_Callback+0x6>
 80021fc:	4770      	bx	lr
{
 80021fe:	b508      	push	{r3, lr}
	  if(XPT2046_TouchPressed() && XPT2046_TouchGetCoordinates(&x, &y)) {
 8002200:	f7ff f80e 	bl	8001220 <XPT2046_TouchPressed>
 8002204:	b900      	cbnz	r0, 8002208 <HAL_GPIO_EXTI_Callback+0x10>
	   TP_flag = 1;   // Tap flag
	  }
	}
}
 8002206:	bd08      	pop	{r3, pc}
	  if(XPT2046_TouchPressed() && XPT2046_TouchGetCoordinates(&x, &y)) {
 8002208:	4904      	ldr	r1, [pc, #16]	@ (800221c <HAL_GPIO_EXTI_Callback+0x24>)
 800220a:	4805      	ldr	r0, [pc, #20]	@ (8002220 <HAL_GPIO_EXTI_Callback+0x28>)
 800220c:	f7ff f814 	bl	8001238 <XPT2046_TouchGetCoordinates>
 8002210:	2800      	cmp	r0, #0
 8002212:	d0f8      	beq.n	8002206 <HAL_GPIO_EXTI_Callback+0xe>
	   TP_flag = 1;   // Tap flag
 8002214:	4b03      	ldr	r3, [pc, #12]	@ (8002224 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002216:	2201      	movs	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]
}
 800221a:	e7f4      	b.n	8002206 <HAL_GPIO_EXTI_Callback+0xe>
 800221c:	200003f4 	.word	0x200003f4
 8002220:	200003f6 	.word	0x200003f6
 8002224:	200003f8 	.word	0x200003f8

08002228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002228:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800222a:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800222c:	2200      	movs	r2, #0
 800222e:	2140      	movs	r1, #64	@ 0x40
 8002230:	4801      	ldr	r0, [pc, #4]	@ (8002238 <Error_Handler+0x10>)
 8002232:	f001 fcec 	bl	8003c0e <HAL_GPIO_WritePin>
  while (1)
 8002236:	e7fe      	b.n	8002236 <Error_Handler+0xe>
 8002238:	40020000 	.word	0x40020000

0800223c <SystemClock_Config>:
{
 800223c:	b500      	push	{lr}
 800223e:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002240:	2230      	movs	r2, #48	@ 0x30
 8002242:	2100      	movs	r1, #0
 8002244:	a808      	add	r0, sp, #32
 8002246:	f007 fdbf 	bl	8009dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800224a:	2300      	movs	r3, #0
 800224c:	9303      	str	r3, [sp, #12]
 800224e:	9304      	str	r3, [sp, #16]
 8002250:	9305      	str	r3, [sp, #20]
 8002252:	9306      	str	r3, [sp, #24]
 8002254:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	9301      	str	r3, [sp, #4]
 8002258:	4a21      	ldr	r2, [pc, #132]	@ (80022e0 <SystemClock_Config+0xa4>)
 800225a:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800225c:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8002260:	6411      	str	r1, [r2, #64]	@ 0x40
 8002262:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002264:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8002268:	9201      	str	r2, [sp, #4]
 800226a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800226c:	9302      	str	r3, [sp, #8]
 800226e:	4b1d      	ldr	r3, [pc, #116]	@ (80022e4 <SystemClock_Config+0xa8>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800227e:	9302      	str	r3, [sp, #8]
 8002280:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002282:	2305      	movs	r3, #5
 8002284:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002286:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800228a:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800228c:	2301      	movs	r3, #1
 800228e:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002290:	2302      	movs	r3, #2
 8002292:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002294:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002298:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800229a:	2204      	movs	r2, #4
 800229c:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800229e:	22a8      	movs	r2, #168	@ 0xa8
 80022a0:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022a2:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80022a4:	2307      	movs	r3, #7
 80022a6:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022a8:	a808      	add	r0, sp, #32
 80022aa:	f001 fcc5 	bl	8003c38 <HAL_RCC_OscConfig>
 80022ae:	b998      	cbnz	r0, 80022d8 <SystemClock_Config+0x9c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022b0:	230f      	movs	r3, #15
 80022b2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022b4:	2302      	movs	r3, #2
 80022b6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022b8:	2300      	movs	r3, #0
 80022ba:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80022c0:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022c6:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022c8:	2105      	movs	r1, #5
 80022ca:	a803      	add	r0, sp, #12
 80022cc:	f001 ff1e 	bl	800410c <HAL_RCC_ClockConfig>
 80022d0:	b920      	cbnz	r0, 80022dc <SystemClock_Config+0xa0>
}
 80022d2:	b015      	add	sp, #84	@ 0x54
 80022d4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80022d8:	f7ff ffa6 	bl	8002228 <Error_Handler>
    Error_Handler();
 80022dc:	f7ff ffa4 	bl	8002228 <Error_Handler>
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40007000 	.word	0x40007000

080022e8 <main>:
{
 80022e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022ec:	ed2d 8b02 	vpush	{d8}
  HAL_Init();
 80022f0:	f000 fdba 	bl	8002e68 <HAL_Init>
  SystemClock_Config();
 80022f4:	f7ff ffa2 	bl	800223c <SystemClock_Config>
  MX_GPIO_Init();
 80022f8:	f7ff f942 	bl	8001580 <MX_GPIO_Init>
  MX_DMA_Init();
 80022fc:	f7ff f8ac 	bl	8001458 <MX_DMA_Init>
  MX_ADC1_Init();
 8002300:	f7ff f830 	bl	8001364 <MX_ADC1_Init>
  MX_FSMC_Init();
 8002304:	f7ff f900 	bl	8001508 <MX_FSMC_Init>
  MX_RTC_Init();
 8002308:	f000 fa62 	bl	80027d0 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800230c:	f000 fa9c 	bl	8002848 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8002310:	f000 fb6e 	bl	80029f0 <MX_SPI2_Init>
  MX_TIM2_Init();
 8002314:	f000 fc6c 	bl	8002bf0 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002318:	f000 fca0 	bl	8002c5c <MX_TIM4_Init>
  MX_FATFS_Init();
 800231c:	f004 fcc6 	bl	8006cac <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8002320:	f000 fcfa 	bl	8002d18 <MX_USART2_UART_Init>
  lcdDisplayOn();
 8002324:	f7ff fcb6 	bl	8001c94 <lcdDisplayOn>
  lcdInit();
 8002328:	f7ff fa34 	bl	8001794 <lcdInit>
  if (lcdGetControllerID() != 0x9341)  //Check LCD driver and his Model
 800232c:	f7ff fcbe 	bl	8001cac <lcdGetControllerID>
 8002330:	f249 3341 	movw	r3, #37697	@ 0x9341
 8002334:	4298      	cmp	r0, r3
 8002336:	d001      	beq.n	800233c <main+0x54>
	  Error_Handler();
 8002338:	f7ff ff76 	bl	8002228 <Error_Handler>
  lcdFillRGB(COLOR_WHITE);
 800233c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002340:	f7ff fb42 	bl	80019c8 <lcdFillRGB>
  HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8002344:	2201      	movs	r2, #1
 8002346:	49a0      	ldr	r1, [pc, #640]	@ (80025c8 <main+0x2e0>)
 8002348:	48a0      	ldr	r0, [pc, #640]	@ (80025cc <main+0x2e4>)
 800234a:	f004 f88a 	bl	8006462 <HAL_UART_Receive_IT>
  HAL_Delay(1000);						//Delay for GPS_UART receive
 800234e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002352:	f000 fdb5 	bl	8002ec0 <HAL_Delay>
  if (!GPS_UART_flag){					//GPS module print status
 8002356:	4b9e      	ldr	r3, [pc, #632]	@ (80025d0 <main+0x2e8>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	b123      	cbz	r3, 8002366 <main+0x7e>
{
 800235c:	2400      	movs	r4, #0
 800235e:	4626      	mov	r6, r4
 8002360:	4627      	mov	r7, r4
 8002362:	4625      	mov	r5, r4
 8002364:	e0ce      	b.n	8002504 <main+0x21c>
  	lcdSetTextFont(&Font16);
 8002366:	489b      	ldr	r0, [pc, #620]	@ (80025d4 <main+0x2ec>)
 8002368:	f7ff f9f4 	bl	8001754 <lcdSetTextFont>
	lcdSetCursor(10, lcdGetHeight() - lcdGetTextFont()->Height - 180);
 800236c:	f7ff f9fe 	bl	800176c <lcdGetHeight>
 8002370:	4604      	mov	r4, r0
 8002372:	f7ff f9fd 	bl	8001770 <lcdGetTextFont>
 8002376:	88c3      	ldrh	r3, [r0, #6]
 8002378:	1ae1      	subs	r1, r4, r3
 800237a:	b289      	uxth	r1, r1
 800237c:	39b4      	subs	r1, #180	@ 0xb4
 800237e:	b289      	uxth	r1, r1
 8002380:	200a      	movs	r0, #10
 8002382:	f7ff fc7b 	bl	8001c7c <lcdSetCursor>
	lcdSetTextColor(COLOR_RED, COLOR_WHITE);
 8002386:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800238a:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800238e:	f7ff f9e7 	bl	8001760 <lcdSetTextColor>
	lcdPrintf("GPS module not found!");
 8002392:	4891      	ldr	r0, [pc, #580]	@ (80025d8 <main+0x2f0>)
 8002394:	f7ff fbc2 	bl	8001b1c <lcdPrintf>
 8002398:	e7e0      	b.n	800235c <main+0x74>
	  Print_Vbat_Temp(Vref);
 800239a:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 80025dc <main+0x2f4>
 800239e:	f7ff fd9d 	bl	8001edc <Print_Vbat_Temp>
	  Get_Time_For_LCD();
 80023a2:	f7ff fe85 	bl	80020b0 <Get_Time_For_LCD>
  	  for_adc_time = HAL_GetTick();
 80023a6:	f000 fd85 	bl	8002eb4 <HAL_GetTick>
 80023aa:	4605      	mov	r5, r0
 80023ac:	e0b8      	b.n	8002520 <main+0x238>
	  LCD_PrintSat(' ', '0');
 80023ae:	2130      	movs	r1, #48	@ 0x30
 80023b0:	2020      	movs	r0, #32
 80023b2:	f7ff fd55 	bl	8001e60 <LCD_PrintSat>
	  for_sat_time = HAL_GetTick();
 80023b6:	f000 fd7d 	bl	8002eb4 <HAL_GetTick>
 80023ba:	4607      	mov	r7, r0
 80023bc:	e0bb      	b.n	8002536 <main+0x24e>
          	  else if ((strncmp(nmeaBuffer, "$GPGSV", 6) == 0 || strncmp(nmeaBuffer, "$GNGSV", 6) == 0) && (strlen(nmeaBuffer) > 15)) {	//Check GPGSV packet
 80023be:	2206      	movs	r2, #6
 80023c0:	4987      	ldr	r1, [pc, #540]	@ (80025e0 <main+0x2f8>)
 80023c2:	4888      	ldr	r0, [pc, #544]	@ (80025e4 <main+0x2fc>)
 80023c4:	f007 fd15 	bl	8009df2 <strncmp>
 80023c8:	b128      	cbz	r0, 80023d6 <main+0xee>
 80023ca:	2206      	movs	r2, #6
 80023cc:	4986      	ldr	r1, [pc, #536]	@ (80025e8 <main+0x300>)
 80023ce:	4885      	ldr	r0, [pc, #532]	@ (80025e4 <main+0x2fc>)
 80023d0:	f007 fd0f 	bl	8009df2 <strncmp>
 80023d4:	b920      	cbnz	r0, 80023e0 <main+0xf8>
 80023d6:	4883      	ldr	r0, [pc, #524]	@ (80025e4 <main+0x2fc>)
 80023d8:	f7fd ff4a 	bl	8000270 <strlen>
 80023dc:	280f      	cmp	r0, #15
 80023de:	d805      	bhi.n	80023ec <main+0x104>
          	HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 80023e0:	2201      	movs	r2, #1
 80023e2:	4979      	ldr	r1, [pc, #484]	@ (80025c8 <main+0x2e0>)
 80023e4:	4879      	ldr	r0, [pc, #484]	@ (80025cc <main+0x2e4>)
 80023e6:	f004 f83c 	bl	8006462 <HAL_UART_Receive_IT>
 80023ea:	e08b      	b.n	8002504 <main+0x21c>
          	  GPS_PrintSatellites(nmeaBuffer);
 80023ec:	487d      	ldr	r0, [pc, #500]	@ (80025e4 <main+0x2fc>)
 80023ee:	f7ff fe7b 	bl	80020e8 <GPS_PrintSatellites>
          	  for_sat_time = HAL_GetTick();
 80023f2:	f000 fd5f 	bl	8002eb4 <HAL_GetTick>
 80023f6:	4607      	mov	r7, r0
 80023f8:	e7f2      	b.n	80023e0 <main+0xf8>
		  if ((HAL_GetTick() - for_adc_time) > 1000) {
 80023fa:	f000 fd5b 	bl	8002eb4 <HAL_GetTick>
 80023fe:	1b43      	subs	r3, r0, r5
 8002400:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002404:	d852      	bhi.n	80024ac <main+0x1c4>
		  if (messageReady) {					//NMEA Packet received
 8002406:	4b79      	ldr	r3, [pc, #484]	@ (80025ec <main+0x304>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	b323      	cbz	r3, 8002456 <main+0x16e>
		      messageReady = 0;
 800240c:	4b77      	ldr	r3, [pc, #476]	@ (80025ec <main+0x304>)
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
		      if (strncmp(nmeaBuffer, "$GPRMC", 6) == 0 || strncmp(nmeaBuffer, "$GNRMC", 6) == 0){	//GPRMC Packet received
 8002412:	2206      	movs	r2, #6
 8002414:	4976      	ldr	r1, [pc, #472]	@ (80025f0 <main+0x308>)
 8002416:	4873      	ldr	r0, [pc, #460]	@ (80025e4 <main+0x2fc>)
 8002418:	f007 fceb 	bl	8009df2 <strncmp>
 800241c:	b128      	cbz	r0, 800242a <main+0x142>
 800241e:	2206      	movs	r2, #6
 8002420:	4974      	ldr	r1, [pc, #464]	@ (80025f4 <main+0x30c>)
 8002422:	4870      	ldr	r0, [pc, #448]	@ (80025e4 <main+0x2fc>)
 8002424:	f007 fce5 	bl	8009df2 <strncmp>
 8002428:	b980      	cbnz	r0, 800244c <main+0x164>
		    	  ProgStatus--;
 800242a:	f104 38ff 	add.w	r8, r4, #4294967295
		    	  if (strlen(nmeaBuffer) >= 60 && GPS_ProcessChar(nmeaBuffer) == 'A') {
 800242e:	486d      	ldr	r0, [pc, #436]	@ (80025e4 <main+0x2fc>)
 8002430:	f7fd ff1e 	bl	8000270 <strlen>
 8002434:	283b      	cmp	r0, #59	@ 0x3b
 8002436:	d904      	bls.n	8002442 <main+0x15a>
 8002438:	486a      	ldr	r0, [pc, #424]	@ (80025e4 <main+0x2fc>)
 800243a:	f7fe fdfd 	bl	8001038 <GPS_ProcessChar>
 800243e:	2841      	cmp	r0, #65	@ 0x41
 8002440:	d004      	beq.n	800244c <main+0x164>
		    	  else lcdFillRGB(COLOR_WHITE);
 8002442:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002446:	f7ff fabf 	bl	80019c8 <lcdFillRGB>
		    	  ProgStatus--;
 800244a:	4644      	mov	r4, r8
		      HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 800244c:	2201      	movs	r2, #1
 800244e:	495e      	ldr	r1, [pc, #376]	@ (80025c8 <main+0x2e0>)
 8002450:	485e      	ldr	r0, [pc, #376]	@ (80025cc <main+0x2e4>)
 8002452:	f004 f806 	bl	8006462 <HAL_UART_Receive_IT>
		  if (TP_flag) {
 8002456:	4b68      	ldr	r3, [pc, #416]	@ (80025f8 <main+0x310>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d052      	beq.n	8002504 <main+0x21c>
			  TP_flag = 0;
 800245e:	4b66      	ldr	r3, [pc, #408]	@ (80025f8 <main+0x310>)
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
		  	  if ((x >= 110) && (x <= 201) && (y >= 100) && (y <= 135))	{	// Check 'GoToMap' button press
 8002464:	4b65      	ldr	r3, [pc, #404]	@ (80025fc <main+0x314>)
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	3b6e      	subs	r3, #110	@ 0x6e
 800246a:	b29b      	uxth	r3, r3
 800246c:	2b5b      	cmp	r3, #91	@ 0x5b
 800246e:	d849      	bhi.n	8002504 <main+0x21c>
 8002470:	4b63      	ldr	r3, [pc, #396]	@ (8002600 <main+0x318>)
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	2b63      	cmp	r3, #99	@ 0x63
 8002476:	d945      	bls.n	8002504 <main+0x21c>
 8002478:	2b87      	cmp	r3, #135	@ 0x87
 800247a:	d843      	bhi.n	8002504 <main+0x21c>
		  			  ProgStatus++;
 800247c:	3401      	adds	r4, #1
		  			  PrintBigMapFirst();
 800247e:	f000 f8ed 	bl	800265c <PrintBigMapFirst>
		  			  PrintCoordinatesPoint(GPS_GetData()->latitude, GPS_GetData()->longitude);
 8002482:	f7fe feb5 	bl	80011f0 <GPS_GetData>
 8002486:	ed90 8a00 	vldr	s16, [r0]
 800248a:	f7fe feb1 	bl	80011f0 <GPS_GetData>
 800248e:	edd0 0a01 	vldr	s1, [r0, #4]
 8002492:	eeb0 0a48 	vmov.f32	s0, s16
 8002496:	f000 f91f 	bl	80026d8 <PrintCoordinatesPoint>
		  			  for_gps_time = HAL_GetTick();
 800249a:	f000 fd0b 	bl	8002eb4 <HAL_GetTick>
 800249e:	4606      	mov	r6, r0
		  			  HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 80024a0:	2201      	movs	r2, #1
 80024a2:	4949      	ldr	r1, [pc, #292]	@ (80025c8 <main+0x2e0>)
 80024a4:	4849      	ldr	r0, [pc, #292]	@ (80025cc <main+0x2e4>)
 80024a6:	f003 ffdc 	bl	8006462 <HAL_UART_Receive_IT>
 80024aa:	e02b      	b.n	8002504 <main+0x21c>
		  Print_Vbat_Temp(Vref);
 80024ac:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 80025dc <main+0x2f4>
 80024b0:	f7ff fd14 	bl	8001edc <Print_Vbat_Temp>
		  Get_Time_For_LCD();
 80024b4:	f7ff fdfc 	bl	80020b0 <Get_Time_For_LCD>
		  for_adc_time = HAL_GetTick();
 80024b8:	f000 fcfc 	bl	8002eb4 <HAL_GetTick>
 80024bc:	4605      	mov	r5, r0
 80024be:	e7a2      	b.n	8002406 <main+0x11e>
		  if (messageReady) {					//NMEA Packet received
 80024c0:	4b4a      	ldr	r3, [pc, #296]	@ (80025ec <main+0x304>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b1c3      	cbz	r3, 80024f8 <main+0x210>
		  		  messageReady = 0;
 80024c6:	4b49      	ldr	r3, [pc, #292]	@ (80025ec <main+0x304>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
		  		  if ((strncmp(nmeaBuffer, "$GPRMC", 6) == 0 || strncmp(nmeaBuffer, "$GNRMC", 6) == 0) && strlen(nmeaBuffer) > 60) {	//Check GPRMC packet
 80024cc:	2206      	movs	r2, #6
 80024ce:	4948      	ldr	r1, [pc, #288]	@ (80025f0 <main+0x308>)
 80024d0:	4844      	ldr	r0, [pc, #272]	@ (80025e4 <main+0x2fc>)
 80024d2:	f007 fc8e 	bl	8009df2 <strncmp>
 80024d6:	b128      	cbz	r0, 80024e4 <main+0x1fc>
 80024d8:	2206      	movs	r2, #6
 80024da:	4946      	ldr	r1, [pc, #280]	@ (80025f4 <main+0x30c>)
 80024dc:	4841      	ldr	r0, [pc, #260]	@ (80025e4 <main+0x2fc>)
 80024de:	f007 fc88 	bl	8009df2 <strncmp>
 80024e2:	b920      	cbnz	r0, 80024ee <main+0x206>
 80024e4:	483f      	ldr	r0, [pc, #252]	@ (80025e4 <main+0x2fc>)
 80024e6:	f7fd fec3 	bl	8000270 <strlen>
 80024ea:	283c      	cmp	r0, #60	@ 0x3c
 80024ec:	d84f      	bhi.n	800258e <main+0x2a6>
		  		HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 80024ee:	2201      	movs	r2, #1
 80024f0:	4935      	ldr	r1, [pc, #212]	@ (80025c8 <main+0x2e0>)
 80024f2:	4836      	ldr	r0, [pc, #216]	@ (80025cc <main+0x2e4>)
 80024f4:	f003 ffb5 	bl	8006462 <HAL_UART_Receive_IT>
		  if (HAL_GetTick() - for_gps_time > 2000) {
 80024f8:	f000 fcdc 	bl	8002eb4 <HAL_GetTick>
 80024fc:	1b83      	subs	r3, r0, r6
 80024fe:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002502:	d85b      	bhi.n	80025bc <main+0x2d4>
	  switch(ProgStatus){
 8002504:	2c01      	cmp	r4, #1
 8002506:	f43f af78 	beq.w	80023fa <main+0x112>
 800250a:	2c02      	cmp	r4, #2
 800250c:	d0d8      	beq.n	80024c0 <main+0x1d8>
 800250e:	2c00      	cmp	r4, #0
 8002510:	d1f8      	bne.n	8002504 <main+0x21c>
	  if ((HAL_GetTick() - for_adc_time) > 500) {
 8002512:	f000 fccf 	bl	8002eb4 <HAL_GetTick>
 8002516:	1b40      	subs	r0, r0, r5
 8002518:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 800251c:	f63f af3d 	bhi.w	800239a <main+0xb2>
	  if ((HAL_GetTick() - for_sat_time) > 2000 && (GPS_UART_flag)) {
 8002520:	f000 fcc8 	bl	8002eb4 <HAL_GetTick>
 8002524:	1bc0      	subs	r0, r0, r7
 8002526:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 800252a:	d904      	bls.n	8002536 <main+0x24e>
 800252c:	4b28      	ldr	r3, [pc, #160]	@ (80025d0 <main+0x2e8>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	f47f af3c 	bne.w	80023ae <main+0xc6>
	  if (messageReady) {					//NMEA Packet received
 8002536:	4b2d      	ldr	r3, [pc, #180]	@ (80025ec <main+0x304>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0e2      	beq.n	8002504 <main+0x21c>
          	  messageReady = 0;
 800253e:	4b2b      	ldr	r3, [pc, #172]	@ (80025ec <main+0x304>)
 8002540:	2200      	movs	r2, #0
 8002542:	701a      	strb	r2, [r3, #0]
          	  if ((strncmp(nmeaBuffer, "$GPRMC", 6) == 0 || strncmp(nmeaBuffer, "$GNRMC", 6) == 0) && strlen(nmeaBuffer) > 60) {	//Check GPRMC packet
 8002544:	2206      	movs	r2, #6
 8002546:	492a      	ldr	r1, [pc, #168]	@ (80025f0 <main+0x308>)
 8002548:	4826      	ldr	r0, [pc, #152]	@ (80025e4 <main+0x2fc>)
 800254a:	f007 fc52 	bl	8009df2 <strncmp>
 800254e:	b138      	cbz	r0, 8002560 <main+0x278>
 8002550:	2206      	movs	r2, #6
 8002552:	4928      	ldr	r1, [pc, #160]	@ (80025f4 <main+0x30c>)
 8002554:	4823      	ldr	r0, [pc, #140]	@ (80025e4 <main+0x2fc>)
 8002556:	f007 fc4c 	bl	8009df2 <strncmp>
 800255a:	2800      	cmp	r0, #0
 800255c:	f47f af2f 	bne.w	80023be <main+0xd6>
 8002560:	4820      	ldr	r0, [pc, #128]	@ (80025e4 <main+0x2fc>)
 8002562:	f7fd fe85 	bl	8000270 <strlen>
 8002566:	283c      	cmp	r0, #60	@ 0x3c
 8002568:	f67f af29 	bls.w	80023be <main+0xd6>
	          	  if(GPS_ProcessChar(nmeaBuffer) == 'A') {
 800256c:	481d      	ldr	r0, [pc, #116]	@ (80025e4 <main+0x2fc>)
 800256e:	f7fe fd63 	bl	8001038 <GPS_ProcessChar>
 8002572:	2841      	cmp	r0, #65	@ 0x41
 8002574:	f47f af34 	bne.w	80023e0 <main+0xf8>
	          		  ProgStatus++;
 8002578:	3401      	adds	r4, #1
	          		  SetTime();
 800257a:	f7ff fd4f 	bl	800201c <SetTime>
	          		  GPSfoundPrint();
 800257e:	f7ff fdc5 	bl	800210c <GPSfoundPrint>
	          		  HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8002582:	2201      	movs	r2, #1
 8002584:	4910      	ldr	r1, [pc, #64]	@ (80025c8 <main+0x2e0>)
 8002586:	4811      	ldr	r0, [pc, #68]	@ (80025cc <main+0x2e4>)
 8002588:	f003 ff6b 	bl	8006462 <HAL_UART_Receive_IT>
	          		  break;
 800258c:	e7ba      	b.n	8002504 <main+0x21c>
		  			  if(GPS_ProcessChar(nmeaBuffer) == 'A') {
 800258e:	4815      	ldr	r0, [pc, #84]	@ (80025e4 <main+0x2fc>)
 8002590:	f7fe fd52 	bl	8001038 <GPS_ProcessChar>
 8002594:	2841      	cmp	r0, #65	@ 0x41
 8002596:	d1aa      	bne.n	80024ee <main+0x206>
		  				  PrintBigMap();
 8002598:	f000 f834 	bl	8002604 <PrintBigMap>
		  				  PrintCoordinatesPoint(GPS_GetData()->latitude, GPS_GetData()->longitude);
 800259c:	f7fe fe28 	bl	80011f0 <GPS_GetData>
 80025a0:	ed90 8a00 	vldr	s16, [r0]
 80025a4:	f7fe fe24 	bl	80011f0 <GPS_GetData>
 80025a8:	edd0 0a01 	vldr	s1, [r0, #4]
 80025ac:	eeb0 0a48 	vmov.f32	s0, s16
 80025b0:	f000 f892 	bl	80026d8 <PrintCoordinatesPoint>
		  				  for_gps_time = HAL_GetTick();
 80025b4:	f000 fc7e 	bl	8002eb4 <HAL_GetTick>
 80025b8:	4606      	mov	r6, r0
 80025ba:	e798      	b.n	80024ee <main+0x206>
			  LCD_GPS_lost();
 80025bc:	f7ff fc72 	bl	8001ea4 <LCD_GPS_lost>
			  for_gps_time = HAL_GetTick();
 80025c0:	f000 fc78 	bl	8002eb4 <HAL_GetTick>
 80025c4:	4606      	mov	r6, r0
 80025c6:	e79d      	b.n	8002504 <main+0x21c>
 80025c8:	2000047c 	.word	0x2000047c
 80025cc:	200026dc 	.word	0x200026dc
 80025d0:	200003fa 	.word	0x200003fa
 80025d4:	20000008 	.word	0x20000008
 80025d8:	08011d68 	.word	0x08011d68
 80025dc:	403eb852 	.word	0x403eb852
 80025e0:	08011d90 	.word	0x08011d90
 80025e4:	200003fc 	.word	0x200003fc
 80025e8:	08011d98 	.word	0x08011d98
 80025ec:	200003f9 	.word	0x200003f9
 80025f0:	08011d80 	.word	0x08011d80
 80025f4:	08011d88 	.word	0x08011d88
 80025f8:	200003f8 	.word	0x200003f8
 80025fc:	200003f6 	.word	0x200003f6
 8002600:	200003f4 	.word	0x200003f4

08002604 <PrintBigMap>:
	    firstSector = ((firstCluster - 2) * fs.csize) + fs.database;
	    PrintBigMap();
}

void  PrintBigMap(void)
{
 8002604:	b508      	push	{r3, lr}
	    // Set LCD
	    lcdSetWindow(0, 0, 319, 239);
 8002606:	23ef      	movs	r3, #239	@ 0xef
 8002608:	f240 123f 	movw	r2, #319	@ 0x13f
 800260c:	2100      	movs	r1, #0
 800260e:	4608      	mov	r0, r1
 8002610:	f7ff f9b2 	bl	8001978 <lcdSetWindow>

	    // Reed and send sectors
	    if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t*)LCD_BASE1, firstSector, IMAGE_SECTORS) != HAL_OK) {
 8002614:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002618:	4a0b      	ldr	r2, [pc, #44]	@ (8002648 <PrintBigMap+0x44>)
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	490b      	ldr	r1, [pc, #44]	@ (800264c <PrintBigMap+0x48>)
 800261e:	480c      	ldr	r0, [pc, #48]	@ (8002650 <PrintBigMap+0x4c>)
 8002620:	f002 fc12 	bl	8004e48 <HAL_SD_ReadBlocks_DMA>
 8002624:	b968      	cbnz	r0, 8002642 <PrintBigMap+0x3e>
            Error_Handler();
        }

	        // Wait complete of transfer
	        while(HAL_SD_GetState(&hsd) != HAL_SD_STATE_READY) {}
 8002626:	480a      	ldr	r0, [pc, #40]	@ (8002650 <PrintBigMap+0x4c>)
 8002628:	f002 fcaa 	bl	8004f80 <HAL_SD_GetState>
 800262c:	2801      	cmp	r0, #1
 800262e:	d1fa      	bne.n	8002626 <PrintBigMap+0x22>

	    // Clearing
	    f_close(&file);
 8002630:	4808      	ldr	r0, [pc, #32]	@ (8002654 <PrintBigMap+0x50>)
 8002632:	f005 fdbc 	bl	80081ae <f_close>
	    f_mount(NULL, "", 0);
 8002636:	2200      	movs	r2, #0
 8002638:	4907      	ldr	r1, [pc, #28]	@ (8002658 <PrintBigMap+0x54>)
 800263a:	4610      	mov	r0, r2
 800263c:	f005 fc28 	bl	8007e90 <f_mount>
}
 8002640:	bd08      	pop	{r3, pc}
            Error_Handler();
 8002642:	f7ff fdf1 	bl	8002228 <Error_Handler>
 8002646:	e7ee      	b.n	8002626 <PrintBigMap+0x22>
 8002648:	20000480 	.word	0x20000480
 800264c:	60080000 	.word	0x60080000
 8002650:	2000256c 	.word	0x2000256c
 8002654:	20000488 	.word	0x20000488
 8002658:	08011d48 	.word	0x08011d48

0800265c <PrintBigMapFirst>:
{
 800265c:	b500      	push	{lr}
 800265e:	b089      	sub	sp, #36	@ 0x24
		HAL_SD_GetCardInfo(&hsd, &cardInfo);
 8002660:	4669      	mov	r1, sp
 8002662:	4816      	ldr	r0, [pc, #88]	@ (80026bc <PrintBigMapFirst+0x60>)
 8002664:	f002 fe7f 	bl	8005366 <HAL_SD_GetCardInfo>
		if (cardInfo.BlockSize != 512)
 8002668:	9b05      	ldr	r3, [sp, #20]
 800266a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800266e:	d11c      	bne.n	80026aa <PrintBigMapFirst+0x4e>
	    fr = f_mount(&fs, "", 1);
 8002670:	2201      	movs	r2, #1
 8002672:	4913      	ldr	r1, [pc, #76]	@ (80026c0 <PrintBigMapFirst+0x64>)
 8002674:	4813      	ldr	r0, [pc, #76]	@ (80026c4 <PrintBigMapFirst+0x68>)
 8002676:	f005 fc0b 	bl	8007e90 <f_mount>
	    if(fr != FR_OK)
 800267a:	b9c8      	cbnz	r0, 80026b0 <PrintBigMapFirst+0x54>
	    fr = f_open(&file, "small.hex", FA_READ);
 800267c:	2201      	movs	r2, #1
 800267e:	4912      	ldr	r1, [pc, #72]	@ (80026c8 <PrintBigMapFirst+0x6c>)
 8002680:	4812      	ldr	r0, [pc, #72]	@ (80026cc <PrintBigMapFirst+0x70>)
 8002682:	f005 fc33 	bl	8007eec <f_open>
	    if(fr != FR_OK)
 8002686:	b9b0      	cbnz	r0, 80026b6 <PrintBigMapFirst+0x5a>
	    firstCluster = file.obj.sclust;
 8002688:	4b10      	ldr	r3, [pc, #64]	@ (80026cc <PrintBigMapFirst+0x70>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4a10      	ldr	r2, [pc, #64]	@ (80026d0 <PrintBigMapFirst+0x74>)
 800268e:	6013      	str	r3, [r2, #0]
	    firstSector = ((firstCluster - 2) * fs.csize) + fs.database;
 8002690:	3b02      	subs	r3, #2
 8002692:	4a0c      	ldr	r2, [pc, #48]	@ (80026c4 <PrintBigMapFirst+0x68>)
 8002694:	8951      	ldrh	r1, [r2, #10]
 8002696:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002698:	fb01 2303 	mla	r3, r1, r3, r2
 800269c:	4a0d      	ldr	r2, [pc, #52]	@ (80026d4 <PrintBigMapFirst+0x78>)
 800269e:	6013      	str	r3, [r2, #0]
	    PrintBigMap();
 80026a0:	f7ff ffb0 	bl	8002604 <PrintBigMap>
}
 80026a4:	b009      	add	sp, #36	@ 0x24
 80026a6:	f85d fb04 	ldr.w	pc, [sp], #4
			Error_Handler();
 80026aa:	f7ff fdbd 	bl	8002228 <Error_Handler>
 80026ae:	e7df      	b.n	8002670 <PrintBigMapFirst+0x14>
	        Error_Handler();
 80026b0:	f7ff fdba 	bl	8002228 <Error_Handler>
 80026b4:	e7e2      	b.n	800267c <PrintBigMapFirst+0x20>
	        Error_Handler();
 80026b6:	f7ff fdb7 	bl	8002228 <Error_Handler>
 80026ba:	e7e5      	b.n	8002688 <PrintBigMapFirst+0x2c>
 80026bc:	2000256c 	.word	0x2000256c
 80026c0:	08011d48 	.word	0x08011d48
 80026c4:	200014b8 	.word	0x200014b8
 80026c8:	08011de4 	.word	0x08011de4
 80026cc:	20000488 	.word	0x20000488
 80026d0:	20000484 	.word	0x20000484
 80026d4:	20000480 	.word	0x20000480

080026d8 <PrintCoordinatesPoint>:

void PrintCoordinatesPoint(float lat, float lon)
{
 80026d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026da:	ee10 0a10 	vmov	r0, s0
 80026de:	ee10 4a90 	vmov	r4, s1
	uint16_t x, y;

    // Position and map coordinates check
    if (lat < MAP_LAT_MIN || lat > MAP_LAT_MAX ||
 80026e2:	f7fd ff31 	bl	8000548 <__aeabi_f2d>
 80026e6:	4606      	mov	r6, r0
 80026e8:	460f      	mov	r7, r1
 80026ea:	a32d      	add	r3, pc, #180	@ (adr r3, 80027a0 <PrintCoordinatesPoint+0xc8>)
 80026ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f0:	f7fe f9f4 	bl	8000adc <__aeabi_dcmplt>
 80026f4:	b9d0      	cbnz	r0, 800272c <PrintCoordinatesPoint+0x54>
 80026f6:	a330      	add	r3, pc, #192	@ (adr r3, 80027b8 <PrintCoordinatesPoint+0xe0>)
 80026f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fc:	4630      	mov	r0, r6
 80026fe:	4639      	mov	r1, r7
 8002700:	f7fe fa0a 	bl	8000b18 <__aeabi_dcmpgt>
 8002704:	b990      	cbnz	r0, 800272c <PrintCoordinatesPoint+0x54>
        lon < MAP_LON_MIN || lon > MAP_LON_MAX) {
 8002706:	4620      	mov	r0, r4
 8002708:	f7fd ff1e 	bl	8000548 <__aeabi_f2d>
 800270c:	4604      	mov	r4, r0
 800270e:	460d      	mov	r5, r1
    if (lat < MAP_LAT_MIN || lat > MAP_LAT_MAX ||
 8002710:	a32b      	add	r3, pc, #172	@ (adr r3, 80027c0 <PrintCoordinatesPoint+0xe8>)
 8002712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002716:	f7fe f9e1 	bl	8000adc <__aeabi_dcmplt>
 800271a:	b938      	cbnz	r0, 800272c <PrintCoordinatesPoint+0x54>
        lon < MAP_LON_MIN || lon > MAP_LON_MAX) {
 800271c:	a32a      	add	r3, pc, #168	@ (adr r3, 80027c8 <PrintCoordinatesPoint+0xf0>)
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	4620      	mov	r0, r4
 8002724:	4629      	mov	r1, r5
 8002726:	f7fe f9f7 	bl	8000b18 <__aeabi_dcmpgt>
 800272a:	b100      	cbz	r0, 800272e <PrintCoordinatesPoint+0x56>

    //lcdFillRGB(COLOR_WHITE);
    lcdDrawPosition(x, y, COLOR_RED); // Pixel print if Touch pressed


}
 800272c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = (uint16_t)((lon - MAP_LON_MIN) * LCD_WIDTH / (MAP_LON_MAX - MAP_LON_MIN));
 800272e:	a324      	add	r3, pc, #144	@ (adr r3, 80027c0 <PrintCoordinatesPoint+0xe8>)
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	4620      	mov	r0, r4
 8002736:	4629      	mov	r1, r5
 8002738:	f7fd fda6 	bl	8000288 <__aeabi_dsub>
 800273c:	2200      	movs	r2, #0
 800273e:	4b1c      	ldr	r3, [pc, #112]	@ (80027b0 <PrintCoordinatesPoint+0xd8>)
 8002740:	f7fd ff5a 	bl	80005f8 <__aeabi_dmul>
 8002744:	a314      	add	r3, pc, #80	@ (adr r3, 8002798 <PrintCoordinatesPoint+0xc0>)
 8002746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274a:	f7fe f87f 	bl	800084c <__aeabi_ddiv>
 800274e:	f7fe fa2b 	bl	8000ba8 <__aeabi_d2uiz>
 8002752:	b284      	uxth	r4, r0
    y = (uint16_t)(LCD_HEIGHT - ((lat - MAP_LAT_MIN) * LCD_HEIGHT / (MAP_LAT_MAX - MAP_LAT_MIN)));
 8002754:	a312      	add	r3, pc, #72	@ (adr r3, 80027a0 <PrintCoordinatesPoint+0xc8>)
 8002756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275a:	4630      	mov	r0, r6
 800275c:	4639      	mov	r1, r7
 800275e:	f7fd fd93 	bl	8000288 <__aeabi_dsub>
 8002762:	2200      	movs	r2, #0
 8002764:	4b13      	ldr	r3, [pc, #76]	@ (80027b4 <PrintCoordinatesPoint+0xdc>)
 8002766:	f7fd ff47 	bl	80005f8 <__aeabi_dmul>
 800276a:	a30f      	add	r3, pc, #60	@ (adr r3, 80027a8 <PrintCoordinatesPoint+0xd0>)
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	f7fe f86c 	bl	800084c <__aeabi_ddiv>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	2000      	movs	r0, #0
 800277a:	490e      	ldr	r1, [pc, #56]	@ (80027b4 <PrintCoordinatesPoint+0xdc>)
 800277c:	f7fd fd84 	bl	8000288 <__aeabi_dsub>
 8002780:	f7fe fa12 	bl	8000ba8 <__aeabi_d2uiz>
    lcdDrawPosition(x, y, COLOR_RED); // Pixel print if Touch pressed
 8002784:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002788:	b281      	uxth	r1, r0
 800278a:	4620      	mov	r0, r4
 800278c:	f7ff fa20 	bl	8001bd0 <lcdDrawPosition>
 8002790:	e7cc      	b.n	800272c <PrintCoordinatesPoint+0x54>
 8002792:	bf00      	nop
 8002794:	f3af 8000 	nop.w
 8002798:	6dc5d600 	.word	0x6dc5d600
 800279c:	3fc78034 	.word	0x3fc78034
 80027a0:	ef9db22d 	.word	0xef9db22d
 80027a4:	4049aea7 	.word	0x4049aea7
 80027a8:	f7ceda00 	.word	0xf7ceda00
 80027ac:	3fb5e353 	.word	0x3fb5e353
 80027b0:	40740000 	.word	0x40740000
 80027b4:	406e0000 	.word	0x406e0000
 80027b8:	9999999a 	.word	0x9999999a
 80027bc:	4049b999 	.word	0x4049b999
 80027c0:	5c28f5c3 	.word	0x5c28f5c3
 80027c4:	4043828f 	.word	0x4043828f
 80027c8:	9096bb99 	.word	0x9096bb99
 80027cc:	40439a0f 	.word	0x40439a0f

080027d0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80027d0:	b508      	push	{r3, lr}

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80027d2:	4809      	ldr	r0, [pc, #36]	@ (80027f8 <MX_RTC_Init+0x28>)
 80027d4:	4b09      	ldr	r3, [pc, #36]	@ (80027fc <MX_RTC_Init+0x2c>)
 80027d6:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80027d8:	2300      	movs	r3, #0
 80027da:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80027dc:	227f      	movs	r2, #127	@ 0x7f
 80027de:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80027e0:	22ff      	movs	r2, #255	@ 0xff
 80027e2:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80027e4:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80027e6:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80027e8:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80027ea:	f001 fe61 	bl	80044b0 <HAL_RTC_Init>
 80027ee:	b900      	cbnz	r0, 80027f2 <MX_RTC_Init+0x22>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80027f0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80027f2:	f7ff fd19 	bl	8002228 <Error_Handler>
}
 80027f6:	e7fb      	b.n	80027f0 <MX_RTC_Init+0x20>
 80027f8:	200024ec 	.word	0x200024ec
 80027fc:	40002800 	.word	0x40002800

08002800 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002800:	b500      	push	{lr}
 8002802:	b085      	sub	sp, #20

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002804:	2300      	movs	r3, #0
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	9302      	str	r3, [sp, #8]
 800280c:	9303      	str	r3, [sp, #12]
  if(rtcHandle->Instance==RTC)
 800280e:	6802      	ldr	r2, [r0, #0]
 8002810:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <HAL_RTC_MspInit+0x40>)
 8002812:	429a      	cmp	r2, r3
 8002814:	d002      	beq.n	800281c <HAL_RTC_MspInit+0x1c>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002816:	b005      	add	sp, #20
 8002818:	f85d fb04 	ldr.w	pc, [sp], #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800281c:	2302      	movs	r3, #2
 800281e:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002820:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002824:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002826:	4668      	mov	r0, sp
 8002828:	f001 fd46 	bl	80042b8 <HAL_RCCEx_PeriphCLKConfig>
 800282c:	b920      	cbnz	r0, 8002838 <HAL_RTC_MspInit+0x38>
    __HAL_RCC_RTC_ENABLE();
 800282e:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <HAL_RTC_MspInit+0x44>)
 8002830:	2201      	movs	r2, #1
 8002832:	f8c3 2e3c 	str.w	r2, [r3, #3644]	@ 0xe3c
}
 8002836:	e7ee      	b.n	8002816 <HAL_RTC_MspInit+0x16>
      Error_Handler();
 8002838:	f7ff fcf6 	bl	8002228 <Error_Handler>
 800283c:	e7f7      	b.n	800282e <HAL_RTC_MspInit+0x2e>
 800283e:	bf00      	nop
 8002840:	40002800 	.word	0x40002800
 8002844:	42470000 	.word	0x42470000

08002848 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8002848:	b530      	push	{r4, r5, lr}
 800284a:	b085      	sub	sp, #20
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */
  //HAL_SD_InitCard(&hsd);
  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800284c:	481a      	ldr	r0, [pc, #104]	@ (80028b8 <MX_SDIO_SD_Init+0x70>)
 800284e:	4b1b      	ldr	r3, [pc, #108]	@ (80028bc <MX_SDIO_SD_Init+0x74>)
 8002850:	6003      	str	r3, [r0, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002852:	2300      	movs	r3, #0
 8002854:	6043      	str	r3, [r0, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_ENABLE;
 8002856:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800285a:	6082      	str	r2, [r0, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800285c:	60c3      	str	r3, [r0, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800285e:	6103      	str	r3, [r0, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002860:	6143      	str	r3, [r0, #20]
  hsd.Init.ClockDiv = 0;
 8002862:	6183      	str	r3, [r0, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  if(HAL_SD_Init(&hsd) != HAL_OK)							//For initialization need SDIO_BUS_WIDE_1B
 8002864:	f002 fd64 	bl	8005330 <HAL_SD_Init>
 8002868:	b9f8      	cbnz	r0, 80028aa <MX_SDIO_SD_Init+0x62>
	  Error_Handler();
  /* Reconfigure SDIO peripheral interface */
  if(SDMMC_CmdSwitch(hsd.Instance, (uint32_t)0x80FFFF01))	/* SDMMC_SDR48_SWITCH_PATTERN */
 800286a:	4915      	ldr	r1, [pc, #84]	@ (80028c0 <MX_SDIO_SD_Init+0x78>)
 800286c:	4b12      	ldr	r3, [pc, #72]	@ (80028b8 <MX_SDIO_SD_Init+0x70>)
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	f004 f8ba 	bl	80069e8 <SDMMC_CmdSwitch>
 8002874:	b9e0      	cbnz	r0, 80028b0 <MX_SDIO_SD_Init+0x68>
  	  Error_Handler();
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_ENABLE;
 8002876:	4c10      	ldr	r4, [pc, #64]	@ (80028b8 <MX_SDIO_SD_Init+0x70>)
 8002878:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800287c:	60a3      	str	r3, [r4, #8]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_FALLING;
 800287e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002882:	6063      	str	r3, [r4, #4]
  (void)SDIO_Init(hsd.Instance, hsd.Init);
 8002884:	4623      	mov	r3, r4
 8002886:	f853 5b10 	ldr.w	r5, [r3], #16
 800288a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800288e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002892:	1d23      	adds	r3, r4, #4
 8002894:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002896:	4628      	mov	r0, r5
 8002898:	f003 fe8c 	bl	80065b4 <SDIO_Init>
  HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B);	//Then change it to SDIO_BUS_WIDE_4B
 800289c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028a0:	4620      	mov	r0, r4
 80028a2:	f002 fd73 	bl	800538c <HAL_SD_ConfigWideBusOperation>

  /* USER CODE END SDIO_Init 2 */

}
 80028a6:	b005      	add	sp, #20
 80028a8:	bd30      	pop	{r4, r5, pc}
	  Error_Handler();
 80028aa:	f7ff fcbd 	bl	8002228 <Error_Handler>
 80028ae:	e7dc      	b.n	800286a <MX_SDIO_SD_Init+0x22>
  	  Error_Handler();
 80028b0:	f7ff fcba 	bl	8002228 <Error_Handler>
 80028b4:	e7df      	b.n	8002876 <MX_SDIO_SD_Init+0x2e>
 80028b6:	bf00      	nop
 80028b8:	2000256c 	.word	0x2000256c
 80028bc:	40012c00 	.word	0x40012c00
 80028c0:	80ffff01 	.word	0x80ffff01

080028c4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80028c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028c8:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ca:	2300      	movs	r3, #0
 80028cc:	9303      	str	r3, [sp, #12]
 80028ce:	9304      	str	r3, [sp, #16]
 80028d0:	9305      	str	r3, [sp, #20]
 80028d2:	9306      	str	r3, [sp, #24]
 80028d4:	9307      	str	r3, [sp, #28]
  if(sdHandle->Instance==SDIO)
 80028d6:	6802      	ldr	r2, [r0, #0]
 80028d8:	4b40      	ldr	r3, [pc, #256]	@ (80029dc <HAL_SD_MspInit+0x118>)
 80028da:	429a      	cmp	r2, r3
 80028dc:	d002      	beq.n	80028e4 <HAL_SD_MspInit+0x20>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80028de:	b009      	add	sp, #36	@ 0x24
 80028e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028e4:	4604      	mov	r4, r0
    __HAL_RCC_SDIO_CLK_ENABLE();
 80028e6:	2500      	movs	r5, #0
 80028e8:	9500      	str	r5, [sp, #0]
 80028ea:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 80028ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028f4:	645a      	str	r2, [r3, #68]	@ 0x44
 80028f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028f8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80028fc:	9200      	str	r2, [sp, #0]
 80028fe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002900:	9501      	str	r5, [sp, #4]
 8002902:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002904:	f042 0204 	orr.w	r2, r2, #4
 8002908:	631a      	str	r2, [r3, #48]	@ 0x30
 800290a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800290c:	f002 0204 	and.w	r2, r2, #4
 8002910:	9201      	str	r2, [sp, #4]
 8002912:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002914:	9502      	str	r5, [sp, #8]
 8002916:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002918:	f042 0208 	orr.w	r2, r2, #8
 800291c:	631a      	str	r2, [r3, #48]	@ 0x30
 800291e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	9302      	str	r3, [sp, #8]
 8002926:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002928:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800292c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292e:	f04f 0802 	mov.w	r8, #2
 8002932:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002936:	f04f 0b01 	mov.w	fp, #1
 800293a:	f8cd b014 	str.w	fp, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293e:	2603      	movs	r6, #3
 8002940:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002942:	270c      	movs	r7, #12
 8002944:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002946:	f8df 90a4 	ldr.w	r9, [pc, #164]	@ 80029ec <HAL_SD_MspInit+0x128>
 800294a:	eb0d 0107 	add.w	r1, sp, r7
 800294e:	4648      	mov	r0, r9
 8002950:	f001 f860 	bl	8003a14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002954:	f44f 5a80 	mov.w	sl, #4096	@ 0x1000
 8002958:	f8cd a00c 	str.w	sl, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295c:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002960:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002962:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002964:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002966:	eb0d 0107 	add.w	r1, sp, r7
 800296a:	4648      	mov	r0, r9
 800296c:	f001 f852 	bl	8003a14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002970:	f04f 0904 	mov.w	r9, #4
 8002974:	f8cd 900c 	str.w	r9, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002978:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800297c:	f8cd b014 	str.w	fp, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002980:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002982:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002984:	eb0d 0107 	add.w	r1, sp, r7
 8002988:	4815      	ldr	r0, [pc, #84]	@ (80029e0 <HAL_SD_MspInit+0x11c>)
 800298a:	f001 f843 	bl	8003a14 <HAL_GPIO_Init>
    hdma_sdio.Instance = DMA2_Stream3;
 800298e:	4815      	ldr	r0, [pc, #84]	@ (80029e4 <HAL_SD_MspInit+0x120>)
 8002990:	4b15      	ldr	r3, [pc, #84]	@ (80029e8 <HAL_SD_MspInit+0x124>)
 8002992:	6003      	str	r3, [r0, #0]
    hdma_sdio.Init.Channel = DMA_CHANNEL_4;
 8002994:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002998:	6043      	str	r3, [r0, #4]
    hdma_sdio.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800299a:	6085      	str	r5, [r0, #8]
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
 800299c:	60c5      	str	r5, [r0, #12]
    hdma_sdio.Init.MemInc = DMA_MINC_DISABLE;
 800299e:	6105      	str	r5, [r0, #16]
    hdma_sdio.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029a0:	f8c0 a014 	str.w	sl, [r0, #20]
    hdma_sdio.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80029a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029a8:	6183      	str	r3, [r0, #24]
    hdma_sdio.Init.Mode = DMA_PFCTRL;
 80029aa:	2320      	movs	r3, #32
 80029ac:	61c3      	str	r3, [r0, #28]
    hdma_sdio.Init.Priority = DMA_PRIORITY_HIGH;
 80029ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029b2:	6203      	str	r3, [r0, #32]
    hdma_sdio.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80029b4:	f8c0 9024 	str.w	r9, [r0, #36]	@ 0x24
    hdma_sdio.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80029b8:	6286      	str	r6, [r0, #40]	@ 0x28
    hdma_sdio.Init.MemBurst = DMA_MBURST_INC4;
 80029ba:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80029be:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hdma_sdio.Init.PeriphBurst = DMA_PBURST_INC4;
 80029c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80029c4:	6303      	str	r3, [r0, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 80029c6:	f000 fe3d 	bl	8003644 <HAL_DMA_Init>
 80029ca:	b920      	cbnz	r0, 80029d6 <HAL_SD_MspInit+0x112>
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio);
 80029cc:	4b05      	ldr	r3, [pc, #20]	@ (80029e4 <HAL_SD_MspInit+0x120>)
 80029ce:	6423      	str	r3, [r4, #64]	@ 0x40
 80029d0:	639c      	str	r4, [r3, #56]	@ 0x38
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio);
 80029d2:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 80029d4:	e783      	b.n	80028de <HAL_SD_MspInit+0x1a>
      Error_Handler();
 80029d6:	f7ff fc27 	bl	8002228 <Error_Handler>
 80029da:	e7f7      	b.n	80029cc <HAL_SD_MspInit+0x108>
 80029dc:	40012c00 	.word	0x40012c00
 80029e0:	40020c00 	.word	0x40020c00
 80029e4:	2000250c 	.word	0x2000250c
 80029e8:	40026458 	.word	0x40026458
 80029ec:	40020800 	.word	0x40020800

080029f0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80029f0:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80029f2:	480e      	ldr	r0, [pc, #56]	@ (8002a2c <MX_SPI2_Init+0x3c>)
 80029f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a30 <MX_SPI2_Init+0x40>)
 80029f6:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80029f8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80029fc:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80029fe:	2300      	movs	r3, #0
 8002a00:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a02:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a04:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a06:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002a08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a0c:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002a0e:	2220      	movs	r2, #32
 8002a10:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a12:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a14:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a16:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002a18:	230a      	movs	r3, #10
 8002a1a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002a1c:	f002 fe00 	bl	8005620 <HAL_SPI_Init>
 8002a20:	b900      	cbnz	r0, 8002a24 <MX_SPI2_Init+0x34>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002a22:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002a24:	f7ff fc00 	bl	8002228 <Error_Handler>
}
 8002a28:	e7fb      	b.n	8002a22 <MX_SPI2_Init+0x32>
 8002a2a:	bf00      	nop
 8002a2c:	200025f0 	.word	0x200025f0
 8002a30:	40003800 	.word	0x40003800

08002a34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a34:	b500      	push	{lr}
 8002a36:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9303      	str	r3, [sp, #12]
 8002a3c:	9304      	str	r3, [sp, #16]
 8002a3e:	9305      	str	r3, [sp, #20]
 8002a40:	9306      	str	r3, [sp, #24]
 8002a42:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8002a44:	6802      	ldr	r2, [r0, #0]
 8002a46:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <HAL_SPI_MspInit+0x68>)
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d002      	beq.n	8002a52 <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002a4c:	b009      	add	sp, #36	@ 0x24
 8002a4e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a52:	2100      	movs	r1, #0
 8002a54:	9101      	str	r1, [sp, #4]
 8002a56:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8002a5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a60:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a64:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002a68:	9201      	str	r2, [sp, #4]
 8002a6a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6c:	9102      	str	r1, [sp, #8]
 8002a6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a70:	f042 0202 	orr.w	r2, r2, #2
 8002a74:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	9302      	str	r3, [sp, #8]
 8002a7e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002a80:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002a84:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a8e:	2305      	movs	r3, #5
 8002a90:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a92:	a903      	add	r1, sp, #12
 8002a94:	4802      	ldr	r0, [pc, #8]	@ (8002aa0 <HAL_SPI_MspInit+0x6c>)
 8002a96:	f000 ffbd 	bl	8003a14 <HAL_GPIO_Init>
}
 8002a9a:	e7d7      	b.n	8002a4c <HAL_SPI_MspInit+0x18>
 8002a9c:	40003800 	.word	0x40003800
 8002aa0:	40020400 	.word	0x40020400

08002aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002aa4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	9100      	str	r1, [sp, #0]
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad8 <HAL_MspInit+0x34>)
 8002aac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002aae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ab2:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ab4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ab6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002aba:	9200      	str	r2, [sp, #0]
 8002abc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002abe:	9101      	str	r1, [sp, #4]
 8002ac0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ac2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002ac6:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ace:	9301      	str	r3, [sp, #4]
 8002ad0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ad2:	b002      	add	sp, #8
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800

08002adc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002adc:	e7fe      	b.n	8002adc <NMI_Handler>

08002ade <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ade:	e7fe      	b.n	8002ade <HardFault_Handler>

08002ae0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ae0:	e7fe      	b.n	8002ae0 <MemManage_Handler>

08002ae2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ae2:	e7fe      	b.n	8002ae2 <BusFault_Handler>

08002ae4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ae4:	e7fe      	b.n	8002ae4 <UsageFault_Handler>

08002ae6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ae6:	4770      	bx	lr

08002ae8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ae8:	4770      	bx	lr

08002aea <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aea:	4770      	bx	lr

08002aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aee:	f000 f9d5 	bl	8002e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002af2:	bd08      	pop	{r3, pc}

08002af4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002af4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_TOUCH_Pin);
 8002af6:	2020      	movs	r0, #32
 8002af8:	f001 f890 	bl	8003c1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002afc:	bd08      	pop	{r3, pc}
	...

08002b00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b02:	4802      	ldr	r0, [pc, #8]	@ (8002b0c <USART2_IRQHandler+0xc>)
 8002b04:	f003 fb50 	bl	80061a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b08:	bd08      	pop	{r3, pc}
 8002b0a:	bf00      	nop
 8002b0c:	200026dc 	.word	0x200026dc

08002b10 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002b10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio);
 8002b12:	4802      	ldr	r0, [pc, #8]	@ (8002b1c <DMA2_Stream3_IRQHandler+0xc>)
 8002b14:	f000 fe8e 	bl	8003834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002b18:	bd08      	pop	{r3, pc}
 8002b1a:	bf00      	nop
 8002b1c:	2000250c 	.word	0x2000250c

08002b20 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002b20:	2001      	movs	r0, #1
 8002b22:	4770      	bx	lr

08002b24 <_kill>:

int _kill(int pid, int sig)
{
 8002b24:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b26:	f007 fa1d 	bl	8009f64 <__errno>
 8002b2a:	2316      	movs	r3, #22
 8002b2c:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b32:	bd08      	pop	{r3, pc}

08002b34 <_exit>:

void _exit (int status)
{
 8002b34:	b508      	push	{r3, lr}
  _kill(status, -1);
 8002b36:	f04f 31ff 	mov.w	r1, #4294967295
 8002b3a:	f7ff fff3 	bl	8002b24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b3e:	e7fe      	b.n	8002b3e <_exit+0xa>

08002b40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b40:	b570      	push	{r4, r5, r6, lr}
 8002b42:	460c      	mov	r4, r1
 8002b44:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b46:	2500      	movs	r5, #0
 8002b48:	e006      	b.n	8002b58 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8002b4a:	f3af 8000 	nop.w
 8002b4e:	4621      	mov	r1, r4
 8002b50:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b54:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8002b56:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b58:	42b5      	cmp	r5, r6
 8002b5a:	dbf6      	blt.n	8002b4a <_read+0xa>
  }

  return len;
}
 8002b5c:	4630      	mov	r0, r6
 8002b5e:	bd70      	pop	{r4, r5, r6, pc}

08002b60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b60:	b570      	push	{r4, r5, r6, lr}
 8002b62:	460c      	mov	r4, r1
 8002b64:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b66:	2500      	movs	r5, #0
 8002b68:	e004      	b.n	8002b74 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8002b6a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002b6e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b72:	3501      	adds	r5, #1
 8002b74:	42b5      	cmp	r5, r6
 8002b76:	dbf8      	blt.n	8002b6a <_write+0xa>
  }
  return len;
}
 8002b78:	4630      	mov	r0, r6
 8002b7a:	bd70      	pop	{r4, r5, r6, pc}

08002b7c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b80:	4770      	bx	lr

08002b82 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002b82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b86:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002b88:	2000      	movs	r0, #0
 8002b8a:	4770      	bx	lr

08002b8c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	4770      	bx	lr

08002b90 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002b90:	2000      	movs	r0, #0
 8002b92:	4770      	bx	lr

08002b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b94:	b510      	push	{r4, lr}
 8002b96:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b98:	4a0c      	ldr	r2, [pc, #48]	@ (8002bcc <_sbrk+0x38>)
 8002b9a:	490d      	ldr	r1, [pc, #52]	@ (8002bd0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b9c:	480d      	ldr	r0, [pc, #52]	@ (8002bd4 <_sbrk+0x40>)
 8002b9e:	6800      	ldr	r0, [r0, #0]
 8002ba0:	b140      	cbz	r0, 8002bb4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ba2:	480c      	ldr	r0, [pc, #48]	@ (8002bd4 <_sbrk+0x40>)
 8002ba4:	6800      	ldr	r0, [r0, #0]
 8002ba6:	4403      	add	r3, r0
 8002ba8:	1a52      	subs	r2, r2, r1
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d806      	bhi.n	8002bbc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002bae:	4a09      	ldr	r2, [pc, #36]	@ (8002bd4 <_sbrk+0x40>)
 8002bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002bb2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002bb4:	4807      	ldr	r0, [pc, #28]	@ (8002bd4 <_sbrk+0x40>)
 8002bb6:	4c08      	ldr	r4, [pc, #32]	@ (8002bd8 <_sbrk+0x44>)
 8002bb8:	6004      	str	r4, [r0, #0]
 8002bba:	e7f2      	b.n	8002ba2 <_sbrk+0xe>
    errno = ENOMEM;
 8002bbc:	f007 f9d2 	bl	8009f64 <__errno>
 8002bc0:	230c      	movs	r3, #12
 8002bc2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc8:	e7f3      	b.n	8002bb2 <_sbrk+0x1e>
 8002bca:	bf00      	nop
 8002bcc:	20020000 	.word	0x20020000
 8002bd0:	00000400 	.word	0x00000400
 8002bd4:	20002648 	.word	0x20002648
 8002bd8:	200028b0 	.word	0x200028b0

08002bdc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bdc:	4a03      	ldr	r2, [pc, #12]	@ (8002bec <SystemInit+0x10>)
 8002bde:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002be2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002be6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bea:	4770      	bx	lr
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002bf0:	b500      	push	{lr}
 8002bf2:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	9302      	str	r3, [sp, #8]
 8002bf8:	9303      	str	r3, [sp, #12]
 8002bfa:	9304      	str	r3, [sp, #16]
 8002bfc:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c02:	4815      	ldr	r0, [pc, #84]	@ (8002c58 <MX_TIM2_Init+0x68>)
 8002c04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c08:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8002c0a:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c0c:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 8002c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c12:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c14:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c16:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c18:	f003 f826 	bl	8005c68 <HAL_TIM_Base_Init>
 8002c1c:	b990      	cbnz	r0, 8002c44 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c22:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c24:	a902      	add	r1, sp, #8
 8002c26:	480c      	ldr	r0, [pc, #48]	@ (8002c58 <MX_TIM2_Init+0x68>)
 8002c28:	f003 f857 	bl	8005cda <HAL_TIM_ConfigClockSource>
 8002c2c:	b968      	cbnz	r0, 8002c4a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c32:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c34:	4669      	mov	r1, sp
 8002c36:	4808      	ldr	r0, [pc, #32]	@ (8002c58 <MX_TIM2_Init+0x68>)
 8002c38:	f003 f8ce 	bl	8005dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c3c:	b940      	cbnz	r0, 8002c50 <MX_TIM2_Init+0x60>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c3e:	b007      	add	sp, #28
 8002c40:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002c44:	f7ff faf0 	bl	8002228 <Error_Handler>
 8002c48:	e7e9      	b.n	8002c1e <MX_TIM2_Init+0x2e>
    Error_Handler();
 8002c4a:	f7ff faed 	bl	8002228 <Error_Handler>
 8002c4e:	e7ee      	b.n	8002c2e <MX_TIM2_Init+0x3e>
    Error_Handler();
 8002c50:	f7ff faea 	bl	8002228 <Error_Handler>
}
 8002c54:	e7f3      	b.n	8002c3e <MX_TIM2_Init+0x4e>
 8002c56:	bf00      	nop
 8002c58:	20002694 	.word	0x20002694

08002c5c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002c5c:	b500      	push	{lr}
 8002c5e:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c60:	2300      	movs	r3, #0
 8002c62:	9302      	str	r3, [sp, #8]
 8002c64:	9303      	str	r3, [sp, #12]
 8002c66:	9304      	str	r3, [sp, #16]
 8002c68:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c6e:	4814      	ldr	r0, [pc, #80]	@ (8002cc0 <MX_TIM4_Init+0x64>)
 8002c70:	4a14      	ldr	r2, [pc, #80]	@ (8002cc4 <MX_TIM4_Init+0x68>)
 8002c72:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 8002c74:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c76:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 65535;
 8002c78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c7c:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c7e:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c80:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c82:	f002 fff1 	bl	8005c68 <HAL_TIM_Base_Init>
 8002c86:	b990      	cbnz	r0, 8002cae <MX_TIM4_Init+0x52>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c8c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c8e:	a902      	add	r1, sp, #8
 8002c90:	480b      	ldr	r0, [pc, #44]	@ (8002cc0 <MX_TIM4_Init+0x64>)
 8002c92:	f003 f822 	bl	8005cda <HAL_TIM_ConfigClockSource>
 8002c96:	b968      	cbnz	r0, 8002cb4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c9c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c9e:	4669      	mov	r1, sp
 8002ca0:	4807      	ldr	r0, [pc, #28]	@ (8002cc0 <MX_TIM4_Init+0x64>)
 8002ca2:	f003 f899 	bl	8005dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8002ca6:	b940      	cbnz	r0, 8002cba <MX_TIM4_Init+0x5e>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ca8:	b007      	add	sp, #28
 8002caa:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002cae:	f7ff fabb 	bl	8002228 <Error_Handler>
 8002cb2:	e7e9      	b.n	8002c88 <MX_TIM4_Init+0x2c>
    Error_Handler();
 8002cb4:	f7ff fab8 	bl	8002228 <Error_Handler>
 8002cb8:	e7ee      	b.n	8002c98 <MX_TIM4_Init+0x3c>
    Error_Handler();
 8002cba:	f7ff fab5 	bl	8002228 <Error_Handler>
}
 8002cbe:	e7f3      	b.n	8002ca8 <MX_TIM4_Init+0x4c>
 8002cc0:	2000264c 	.word	0x2000264c
 8002cc4:	40000800 	.word	0x40000800

08002cc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cc8:	b082      	sub	sp, #8

  if(tim_baseHandle->Instance==TIM2)
 8002cca:	6803      	ldr	r3, [r0, #0]
 8002ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cd0:	d004      	beq.n	8002cdc <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM4)
 8002cd2:	4a0f      	ldr	r2, [pc, #60]	@ (8002d10 <HAL_TIM_Base_MspInit+0x48>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00e      	beq.n	8002cf6 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002cd8:	b002      	add	sp, #8
 8002cda:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cdc:	2300      	movs	r3, #0
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d14 <HAL_TIM_Base_MspInit+0x4c>)
 8002ce2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ce4:	f042 0201 	orr.w	r2, r2, #1
 8002ce8:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	9b00      	ldr	r3, [sp, #0]
 8002cf4:	e7f0      	b.n	8002cd8 <HAL_TIM_Base_MspInit+0x10>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	9301      	str	r3, [sp, #4]
 8002cfa:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <HAL_TIM_Base_MspInit+0x4c>)
 8002cfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cfe:	f042 0204 	orr.w	r2, r2, #4
 8002d02:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	9301      	str	r3, [sp, #4]
 8002d0c:	9b01      	ldr	r3, [sp, #4]
}
 8002d0e:	e7e3      	b.n	8002cd8 <HAL_TIM_Base_MspInit+0x10>
 8002d10:	40000800 	.word	0x40000800
 8002d14:	40023800 	.word	0x40023800

08002d18 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d18:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d1a:	480a      	ldr	r0, [pc, #40]	@ (8002d44 <MX_USART2_UART_Init+0x2c>)
 8002d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d48 <MX_USART2_UART_Init+0x30>)
 8002d1e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002d20:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002d24:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d26:	2300      	movs	r3, #0
 8002d28:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d2a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d2c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d2e:	220c      	movs	r2, #12
 8002d30:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d32:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d34:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d36:	f003 f97b 	bl	8006030 <HAL_UART_Init>
 8002d3a:	b900      	cbnz	r0, 8002d3e <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d3c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002d3e:	f7ff fa73 	bl	8002228 <Error_Handler>
}
 8002d42:	e7fb      	b.n	8002d3c <MX_USART2_UART_Init+0x24>
 8002d44:	200026dc 	.word	0x200026dc
 8002d48:	40004400 	.word	0x40004400

08002d4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d4c:	b510      	push	{r4, lr}
 8002d4e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d50:	2300      	movs	r3, #0
 8002d52:	9303      	str	r3, [sp, #12]
 8002d54:	9304      	str	r3, [sp, #16]
 8002d56:	9305      	str	r3, [sp, #20]
 8002d58:	9306      	str	r3, [sp, #24]
 8002d5a:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 8002d5c:	6802      	ldr	r2, [r0, #0]
 8002d5e:	4b18      	ldr	r3, [pc, #96]	@ (8002dc0 <HAL_UART_MspInit+0x74>)
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d64:	b008      	add	sp, #32
 8002d66:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d68:	2400      	movs	r4, #0
 8002d6a:	9401      	str	r4, [sp, #4]
 8002d6c:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8002d70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d72:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002d76:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d7a:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8002d7e:	9201      	str	r2, [sp, #4]
 8002d80:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d82:	9402      	str	r4, [sp, #8]
 8002d84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	9302      	str	r3, [sp, #8]
 8002d94:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d96:	230c      	movs	r3, #12
 8002d98:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002da2:	2307      	movs	r3, #7
 8002da4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da6:	a903      	add	r1, sp, #12
 8002da8:	4806      	ldr	r0, [pc, #24]	@ (8002dc4 <HAL_UART_MspInit+0x78>)
 8002daa:	f000 fe33 	bl	8003a14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002dae:	4622      	mov	r2, r4
 8002db0:	2105      	movs	r1, #5
 8002db2:	2026      	movs	r0, #38	@ 0x26
 8002db4:	f000 fb9e 	bl	80034f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002db8:	2026      	movs	r0, #38	@ 0x26
 8002dba:	f000 fbab 	bl	8003514 <HAL_NVIC_EnableIRQ>
}
 8002dbe:	e7d1      	b.n	8002d64 <HAL_UART_MspInit+0x18>
 8002dc0:	40004400 	.word	0x40004400
 8002dc4:	40020000 	.word	0x40020000

08002dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002dc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002dcc:	f7ff ff06 	bl	8002bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dd0:	480c      	ldr	r0, [pc, #48]	@ (8002e04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002dd2:	490d      	ldr	r1, [pc, #52]	@ (8002e08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8002e0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dd8:	e002      	b.n	8002de0 <LoopCopyDataInit>

08002dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dde:	3304      	adds	r3, #4

08002de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002de4:	d3f9      	bcc.n	8002dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002de6:	4a0a      	ldr	r2, [pc, #40]	@ (8002e10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002de8:	4c0a      	ldr	r4, [pc, #40]	@ (8002e14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dec:	e001      	b.n	8002df2 <LoopFillZerobss>

08002dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002df0:	3204      	adds	r2, #4

08002df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002df4:	d3fb      	bcc.n	8002dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002df6:	f007 f8bb 	bl	8009f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dfa:	f7ff fa75 	bl	80022e8 <main>
  bx  lr    
 8002dfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e08:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002e0c:	0801234c 	.word	0x0801234c
  ldr r2, =_sbss
 8002e10:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002e14:	200028b0 	.word	0x200028b0

08002e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e18:	e7fe      	b.n	8002e18 <ADC_IRQHandler>
	...

08002e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e1c:	b510      	push	{r4, lr}
 8002e1e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e20:	4b0e      	ldr	r3, [pc, #56]	@ (8002e5c <HAL_InitTick+0x40>)
 8002e22:	781a      	ldrb	r2, [r3, #0]
 8002e24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e28:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e2c:	4a0c      	ldr	r2, [pc, #48]	@ (8002e60 <HAL_InitTick+0x44>)
 8002e2e:	6810      	ldr	r0, [r2, #0]
 8002e30:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e34:	f000 fb72 	bl	800351c <HAL_SYSTICK_Config>
 8002e38:	b968      	cbnz	r0, 8002e56 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e3a:	2c0f      	cmp	r4, #15
 8002e3c:	d901      	bls.n	8002e42 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8002e3e:	2001      	movs	r0, #1
 8002e40:	e00a      	b.n	8002e58 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e42:	2200      	movs	r2, #0
 8002e44:	4621      	mov	r1, r4
 8002e46:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4a:	f000 fb53 	bl	80034f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e4e:	4b05      	ldr	r3, [pc, #20]	@ (8002e64 <HAL_InitTick+0x48>)
 8002e50:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e52:	2000      	movs	r0, #0
 8002e54:	e000      	b.n	8002e58 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002e56:	2001      	movs	r0, #1
}
 8002e58:	bd10      	pop	{r4, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000038 	.word	0x20000038
 8002e60:	20000034 	.word	0x20000034
 8002e64:	2000003c 	.word	0x2000003c

08002e68 <HAL_Init>:
{
 8002e68:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e98 <HAL_Init+0x30>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e72:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e7a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e82:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e84:	2003      	movs	r0, #3
 8002e86:	f000 fb23 	bl	80034d0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e8a:	200f      	movs	r0, #15
 8002e8c:	f7ff ffc6 	bl	8002e1c <HAL_InitTick>
  HAL_MspInit();
 8002e90:	f7ff fe08 	bl	8002aa4 <HAL_MspInit>
}
 8002e94:	2000      	movs	r0, #0
 8002e96:	bd08      	pop	{r3, pc}
 8002e98:	40023c00 	.word	0x40023c00

08002e9c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002e9c:	4a03      	ldr	r2, [pc, #12]	@ (8002eac <HAL_IncTick+0x10>)
 8002e9e:	6811      	ldr	r1, [r2, #0]
 8002ea0:	4b03      	ldr	r3, [pc, #12]	@ (8002eb0 <HAL_IncTick+0x14>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	440b      	add	r3, r1
 8002ea6:	6013      	str	r3, [r2, #0]
}
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20002724 	.word	0x20002724
 8002eb0:	20000038 	.word	0x20000038

08002eb4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002eb4:	4b01      	ldr	r3, [pc, #4]	@ (8002ebc <HAL_GetTick+0x8>)
 8002eb6:	6818      	ldr	r0, [r3, #0]
}
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20002724 	.word	0x20002724

08002ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ec0:	b538      	push	{r3, r4, r5, lr}
 8002ec2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002ec4:	f7ff fff6 	bl	8002eb4 <HAL_GetTick>
 8002ec8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eca:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002ece:	d002      	beq.n	8002ed6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ed0:	4b04      	ldr	r3, [pc, #16]	@ (8002ee4 <HAL_Delay+0x24>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ed6:	f7ff ffed 	bl	8002eb4 <HAL_GetTick>
 8002eda:	1b40      	subs	r0, r0, r5
 8002edc:	42a0      	cmp	r0, r4
 8002ede:	d3fa      	bcc.n	8002ed6 <HAL_Delay+0x16>
  {
  }
}
 8002ee0:	bd38      	pop	{r3, r4, r5, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000038 	.word	0x20000038

08002ee8 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ee8:	4b4a      	ldr	r3, [pc, #296]	@ (8003014 <ADC_Init+0x12c>)
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002ef0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	6841      	ldr	r1, [r0, #4]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002efa:	6802      	ldr	r2, [r0, #0]
 8002efc:	6853      	ldr	r3, [r2, #4]
 8002efe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f02:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f04:	6802      	ldr	r2, [r0, #0]
 8002f06:	6853      	ldr	r3, [r2, #4]
 8002f08:	6901      	ldr	r1, [r0, #16]
 8002f0a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f0e:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f10:	6802      	ldr	r2, [r0, #0]
 8002f12:	6853      	ldr	r3, [r2, #4]
 8002f14:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8002f18:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f1a:	6802      	ldr	r2, [r0, #0]
 8002f1c:	6853      	ldr	r3, [r2, #4]
 8002f1e:	6881      	ldr	r1, [r0, #8]
 8002f20:	430b      	orrs	r3, r1
 8002f22:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f24:	6802      	ldr	r2, [r0, #0]
 8002f26:	6893      	ldr	r3, [r2, #8]
 8002f28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f2c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f2e:	6802      	ldr	r2, [r0, #0]
 8002f30:	6893      	ldr	r3, [r2, #8]
 8002f32:	68c1      	ldr	r1, [r0, #12]
 8002f34:	430b      	orrs	r3, r1
 8002f36:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f38:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8002f3a:	4b37      	ldr	r3, [pc, #220]	@ (8003018 <ADC_Init+0x130>)
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d057      	beq.n	8002ff0 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f40:	6802      	ldr	r2, [r0, #0]
 8002f42:	6893      	ldr	r3, [r2, #8]
 8002f44:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8002f48:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f4a:	6802      	ldr	r2, [r0, #0]
 8002f4c:	6893      	ldr	r3, [r2, #8]
 8002f4e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8002f50:	430b      	orrs	r3, r1
 8002f52:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f54:	6802      	ldr	r2, [r0, #0]
 8002f56:	6893      	ldr	r3, [r2, #8]
 8002f58:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8002f5c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f5e:	6802      	ldr	r2, [r0, #0]
 8002f60:	6893      	ldr	r3, [r2, #8]
 8002f62:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8002f64:	430b      	orrs	r3, r1
 8002f66:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f68:	6802      	ldr	r2, [r0, #0]
 8002f6a:	6893      	ldr	r3, [r2, #8]
 8002f6c:	f023 0302 	bic.w	r3, r3, #2
 8002f70:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f72:	6802      	ldr	r2, [r0, #0]
 8002f74:	6893      	ldr	r3, [r2, #8]
 8002f76:	7e01      	ldrb	r1, [r0, #24]
 8002f78:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8002f7c:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f7e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d03f      	beq.n	8003006 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f86:	6802      	ldr	r2, [r0, #0]
 8002f88:	6853      	ldr	r3, [r2, #4]
 8002f8a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f8e:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f90:	6802      	ldr	r2, [r0, #0]
 8002f92:	6853      	ldr	r3, [r2, #4]
 8002f94:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002f98:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f9a:	6801      	ldr	r1, [r0, #0]
 8002f9c:	684b      	ldr	r3, [r1, #4]
 8002f9e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8002fa0:	3a01      	subs	r2, #1
 8002fa2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8002fa6:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fa8:	6802      	ldr	r2, [r0, #0]
 8002faa:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002fac:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002fb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fb2:	6801      	ldr	r1, [r0, #0]
 8002fb4:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8002fb6:	69c2      	ldr	r2, [r0, #28]
 8002fb8:	3a01      	subs	r2, #1
 8002fba:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8002fbe:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fc0:	6802      	ldr	r2, [r0, #0]
 8002fc2:	6893      	ldr	r3, [r2, #8]
 8002fc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002fc8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fca:	6802      	ldr	r2, [r0, #0]
 8002fcc:	6893      	ldr	r3, [r2, #8]
 8002fce:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 8002fd2:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8002fd6:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fd8:	6802      	ldr	r2, [r0, #0]
 8002fda:	6893      	ldr	r3, [r2, #8]
 8002fdc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002fe0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fe2:	6802      	ldr	r2, [r0, #0]
 8002fe4:	6893      	ldr	r3, [r2, #8]
 8002fe6:	6941      	ldr	r1, [r0, #20]
 8002fe8:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002fec:	6093      	str	r3, [r2, #8]
}
 8002fee:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ff0:	6802      	ldr	r2, [r0, #0]
 8002ff2:	6893      	ldr	r3, [r2, #8]
 8002ff4:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8002ff8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ffa:	6802      	ldr	r2, [r0, #0]
 8002ffc:	6893      	ldr	r3, [r2, #8]
 8002ffe:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8003002:	6093      	str	r3, [r2, #8]
 8003004:	e7b0      	b.n	8002f68 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003006:	6802      	ldr	r2, [r0, #0]
 8003008:	6853      	ldr	r3, [r2, #4]
 800300a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800300e:	6053      	str	r3, [r2, #4]
 8003010:	e7ca      	b.n	8002fa8 <ADC_Init+0xc0>
 8003012:	bf00      	nop
 8003014:	40012300 	.word	0x40012300
 8003018:	0f000001 	.word	0x0f000001

0800301c <HAL_ADC_Init>:
  if (hadc == NULL)
 800301c:	b338      	cbz	r0, 800306e <HAL_ADC_Init+0x52>
{
 800301e:	b510      	push	{r4, lr}
 8003020:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003022:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003024:	b143      	cbz	r3, 8003038 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003026:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003028:	f013 0f10 	tst.w	r3, #16
 800302c:	d00b      	beq.n	8003046 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 800302e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8003030:	2300      	movs	r3, #0
 8003032:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003036:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8003038:	f7fe f9da 	bl	80013f0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800303c:	2300      	movs	r3, #0
 800303e:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8003040:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8003044:	e7ef      	b.n	8003026 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8003046:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003048:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800304c:	f023 0302 	bic.w	r3, r3, #2
 8003050:	f043 0302 	orr.w	r3, r3, #2
 8003054:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 8003056:	4620      	mov	r0, r4
 8003058:	f7ff ff46 	bl	8002ee8 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 800305c:	2000      	movs	r0, #0
 800305e:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003060:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003062:	f023 0303 	bic.w	r3, r3, #3
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	6423      	str	r3, [r4, #64]	@ 0x40
 800306c:	e7e0      	b.n	8003030 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 800306e:	2001      	movs	r0, #1
}
 8003070:	4770      	bx	lr
	...

08003074 <HAL_ADC_Start>:
{
 8003074:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800307a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800307e:	2b01      	cmp	r3, #1
 8003080:	f000 8089 	beq.w	8003196 <HAL_ADC_Start+0x122>
 8003084:	2301      	movs	r3, #1
 8003086:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800308a:	6803      	ldr	r3, [r0, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	f012 0f01 	tst.w	r2, #1
 8003092:	d113      	bne.n	80030bc <HAL_ADC_Start+0x48>
    __HAL_ADC_ENABLE(hadc);
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800309c:	4b41      	ldr	r3, [pc, #260]	@ (80031a4 <HAL_ADC_Start+0x130>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a41      	ldr	r2, [pc, #260]	@ (80031a8 <HAL_ADC_Start+0x134>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	0c9b      	lsrs	r3, r3, #18
 80030a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80030ac:	9301      	str	r3, [sp, #4]
    while (counter != 0U)
 80030ae:	e002      	b.n	80030b6 <HAL_ADC_Start+0x42>
      counter--;
 80030b0:	9b01      	ldr	r3, [sp, #4]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	9301      	str	r3, [sp, #4]
    while (counter != 0U)
 80030b6:	9b01      	ldr	r3, [sp, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1f9      	bne.n	80030b0 <HAL_ADC_Start+0x3c>
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030bc:	6802      	ldr	r2, [r0, #0]
 80030be:	6893      	ldr	r3, [r2, #8]
 80030c0:	f013 0f01 	tst.w	r3, #1
 80030c4:	d05c      	beq.n	8003180 <HAL_ADC_Start+0x10c>
    ADC_STATE_CLR_SET(hadc->State,
 80030c6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80030c8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80030cc:	f023 0301 	bic.w	r3, r3, #1
 80030d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d4:	6403      	str	r3, [r0, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030d6:	6853      	ldr	r3, [r2, #4]
 80030d8:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80030dc:	d005      	beq.n	80030ea <HAL_ADC_Start+0x76>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030de:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80030e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80030e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030e8:	6403      	str	r3, [r0, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030ea:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80030ec:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80030f0:	d01b      	beq.n	800312a <HAL_ADC_Start+0xb6>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030f2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80030f4:	f023 0306 	bic.w	r3, r3, #6
 80030f8:	6443      	str	r3, [r0, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 80030fa:	2300      	movs	r3, #0
 80030fc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003100:	f06f 0322 	mvn.w	r3, #34	@ 0x22
 8003104:	6013      	str	r3, [r2, #0]
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003106:	4b29      	ldr	r3, [pc, #164]	@ (80031ac <HAL_ADC_Start+0x138>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f013 0f1f 	tst.w	r3, #31
 800310e:	d127      	bne.n	8003160 <HAL_ADC_Start+0xec>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003110:	6803      	ldr	r3, [r0, #0]
 8003112:	4a27      	ldr	r2, [pc, #156]	@ (80031b0 <HAL_ADC_Start+0x13c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d011      	beq.n	800313c <HAL_ADC_Start+0xc8>
 8003118:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 800311c:	4293      	cmp	r3, r2
 800311e:	d007      	beq.n	8003130 <HAL_ADC_Start+0xbc>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003120:	4a24      	ldr	r2, [pc, #144]	@ (80031b4 <HAL_ADC_Start+0x140>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d014      	beq.n	8003150 <HAL_ADC_Start+0xdc>
  return HAL_OK;
 8003126:	2000      	movs	r0, #0
 8003128:	e033      	b.n	8003192 <HAL_ADC_Start+0x11e>
      ADC_CLEAR_ERRORCODE(hadc);
 800312a:	2300      	movs	r3, #0
 800312c:	6443      	str	r3, [r0, #68]	@ 0x44
 800312e:	e7e4      	b.n	80030fa <HAL_ADC_Start+0x86>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003130:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8003134:	6852      	ldr	r2, [r2, #4]
 8003136:	f012 0f1f 	tst.w	r2, #31
 800313a:	d1f1      	bne.n	8003120 <HAL_ADC_Start+0xac>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8003142:	d12a      	bne.n	800319a <HAL_ADC_Start+0x126>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800314a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800314c:	2000      	movs	r0, #0
 800314e:	e020      	b.n	8003192 <HAL_ADC_Start+0x11e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003150:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8003154:	6852      	ldr	r2, [r2, #4]
 8003156:	f012 0f10 	tst.w	r2, #16
 800315a:	d0ef      	beq.n	800313c <HAL_ADC_Start+0xc8>
  return HAL_OK;
 800315c:	2000      	movs	r0, #0
 800315e:	e018      	b.n	8003192 <HAL_ADC_Start+0x11e>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003160:	6803      	ldr	r3, [r0, #0]
 8003162:	4a13      	ldr	r2, [pc, #76]	@ (80031b0 <HAL_ADC_Start+0x13c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d001      	beq.n	800316c <HAL_ADC_Start+0xf8>
  return HAL_OK;
 8003168:	2000      	movs	r0, #0
 800316a:	e012      	b.n	8003192 <HAL_ADC_Start+0x11e>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8003172:	d114      	bne.n	800319e <HAL_ADC_Start+0x12a>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800317a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800317c:	2000      	movs	r0, #0
 800317e:	e008      	b.n	8003192 <HAL_ADC_Start+0x11e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003180:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003182:	f043 0310 	orr.w	r3, r3, #16
 8003186:	6403      	str	r3, [r0, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003188:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	6443      	str	r3, [r0, #68]	@ 0x44
  return HAL_OK;
 8003190:	2000      	movs	r0, #0
}
 8003192:	b002      	add	sp, #8
 8003194:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8003196:	2002      	movs	r0, #2
 8003198:	e7fb      	b.n	8003192 <HAL_ADC_Start+0x11e>
  return HAL_OK;
 800319a:	2000      	movs	r0, #0
 800319c:	e7f9      	b.n	8003192 <HAL_ADC_Start+0x11e>
 800319e:	2000      	movs	r0, #0
 80031a0:	e7f7      	b.n	8003192 <HAL_ADC_Start+0x11e>
 80031a2:	bf00      	nop
 80031a4:	20000034 	.word	0x20000034
 80031a8:	431bde83 	.word	0x431bde83
 80031ac:	40012300 	.word	0x40012300
 80031b0:	40012000 	.word	0x40012000
 80031b4:	40012200 	.word	0x40012200

080031b8 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80031b8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d019      	beq.n	80031f4 <HAL_ADC_Stop+0x3c>
 80031c0:	2301      	movs	r3, #1
 80031c2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  __HAL_ADC_DISABLE(hadc);
 80031c6:	6802      	ldr	r2, [r0, #0]
 80031c8:	6893      	ldr	r3, [r2, #8]
 80031ca:	f023 0301 	bic.w	r3, r3, #1
 80031ce:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80031d0:	6803      	ldr	r3, [r0, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f013 0f01 	tst.w	r3, #1
 80031d8:	d107      	bne.n	80031ea <HAL_ADC_Stop+0x32>
    ADC_STATE_CLR_SET(hadc->State,
 80031da:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80031dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	6403      	str	r3, [r0, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 80031ea:	2300      	movs	r3, #0
 80031ec:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  return HAL_OK;
 80031f0:	4618      	mov	r0, r3
 80031f2:	4770      	bx	lr
  __HAL_LOCK(hadc);
 80031f4:	2002      	movs	r0, #2
}
 80031f6:	4770      	bx	lr

080031f8 <HAL_ADC_PollForConversion>:
{
 80031f8:	b570      	push	{r4, r5, r6, lr}
 80031fa:	4604      	mov	r4, r0
 80031fc:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80031fe:	6803      	ldr	r3, [r0, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8003206:	d003      	beq.n	8003210 <HAL_ADC_PollForConversion+0x18>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003208:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800320a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800320e:	d119      	bne.n	8003244 <HAL_ADC_PollForConversion+0x4c>
  tickstart = HAL_GetTick();
 8003210:	f7ff fe50 	bl	8002eb4 <HAL_GetTick>
 8003214:	4606      	mov	r6, r0
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	f012 0f02 	tst.w	r2, #2
 800321e:	d120      	bne.n	8003262 <HAL_ADC_PollForConversion+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8003220:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003224:	d0f7      	beq.n	8003216 <HAL_ADC_PollForConversion+0x1e>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003226:	b9b5      	cbnz	r5, 8003256 <HAL_ADC_PollForConversion+0x5e>
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f013 0f02 	tst.w	r3, #2
 8003230:	d1f1      	bne.n	8003216 <HAL_ADC_PollForConversion+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003232:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003234:	f043 0304 	orr.w	r3, r3, #4
 8003238:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hadc);
 800323a:	2300      	movs	r3, #0
 800323c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_TIMEOUT;
 8003240:	2003      	movs	r0, #3
 8003242:	e032      	b.n	80032aa <HAL_ADC_PollForConversion+0xb2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003244:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003246:	f043 0320 	orr.w	r3, r3, #32
 800324a:	6403      	str	r3, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hadc);
 800324c:	2300      	movs	r3, #0
 800324e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8003252:	2001      	movs	r0, #1
 8003254:	e029      	b.n	80032aa <HAL_ADC_PollForConversion+0xb2>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003256:	f7ff fe2d 	bl	8002eb4 <HAL_GetTick>
 800325a:	1b80      	subs	r0, r0, r6
 800325c:	42a8      	cmp	r0, r5
 800325e:	d9da      	bls.n	8003216 <HAL_ADC_PollForConversion+0x1e>
 8003260:	e7e2      	b.n	8003228 <HAL_ADC_PollForConversion+0x30>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003262:	f06f 0212 	mvn.w	r2, #18
 8003266:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003268:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800326a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800326e:	6423      	str	r3, [r4, #64]	@ 0x40
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003270:	6823      	ldr	r3, [r4, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8003278:	d116      	bne.n	80032a8 <HAL_ADC_PollForConversion+0xb0>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800327a:	7e20      	ldrb	r0, [r4, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800327c:	b9b0      	cbnz	r0, 80032ac <HAL_ADC_PollForConversion+0xb4>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800327e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003280:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8003284:	d003      	beq.n	800328e <HAL_ADC_PollForConversion+0x96>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003286:	689b      	ldr	r3, [r3, #8]
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003288:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800328c:	d10d      	bne.n	80032aa <HAL_ADC_PollForConversion+0xb2>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800328e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003294:	6423      	str	r3, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003296:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003298:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 800329c:	d105      	bne.n	80032aa <HAL_ADC_PollForConversion+0xb2>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800329e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	6423      	str	r3, [r4, #64]	@ 0x40
 80032a6:	e000      	b.n	80032aa <HAL_ADC_PollForConversion+0xb2>
  return HAL_OK;
 80032a8:	2000      	movs	r0, #0
}
 80032aa:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80032ac:	2000      	movs	r0, #0
 80032ae:	e7fc      	b.n	80032aa <HAL_ADC_PollForConversion+0xb2>

080032b0 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80032b0:	6803      	ldr	r3, [r0, #0]
 80032b2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 80032b4:	4770      	bx	lr
	...

080032b8 <HAL_ADC_ConfigChannel>:
{
 80032b8:	b430      	push	{r4, r5}
 80032ba:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80032bc:	2200      	movs	r2, #0
 80032be:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80032c0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80032c4:	2a01      	cmp	r2, #1
 80032c6:	f000 80b6 	beq.w	8003436 <HAL_ADC_ConfigChannel+0x17e>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2201      	movs	r2, #1
 80032ce:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032d2:	680a      	ldr	r2, [r1, #0]
 80032d4:	2a09      	cmp	r2, #9
 80032d6:	d940      	bls.n	800335a <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032d8:	6804      	ldr	r4, [r0, #0]
 80032da:	68e0      	ldr	r0, [r4, #12]
 80032dc:	b292      	uxth	r2, r2
 80032de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80032e2:	3a1e      	subs	r2, #30
 80032e4:	f04f 0c07 	mov.w	ip, #7
 80032e8:	fa0c f202 	lsl.w	r2, ip, r2
 80032ec:	ea20 0202 	bic.w	r2, r0, r2
 80032f0:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032f2:	681c      	ldr	r4, [r3, #0]
 80032f4:	68e0      	ldr	r0, [r4, #12]
 80032f6:	880a      	ldrh	r2, [r1, #0]
 80032f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80032fc:	3a1e      	subs	r2, #30
 80032fe:	688d      	ldr	r5, [r1, #8]
 8003300:	fa05 f202 	lsl.w	r2, r5, r2
 8003304:	4302      	orrs	r2, r0
 8003306:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 8003308:	684a      	ldr	r2, [r1, #4]
 800330a:	2a06      	cmp	r2, #6
 800330c:	d83c      	bhi.n	8003388 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800330e:	681c      	ldr	r4, [r3, #0]
 8003310:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8003312:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003316:	3a05      	subs	r2, #5
 8003318:	f04f 0c1f 	mov.w	ip, #31
 800331c:	fa0c f202 	lsl.w	r2, ip, r2
 8003320:	ea20 0202 	bic.w	r2, r0, r2
 8003324:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003326:	681c      	ldr	r4, [r3, #0]
 8003328:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800332a:	684a      	ldr	r2, [r1, #4]
 800332c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003330:	3a05      	subs	r2, #5
 8003332:	f8b1 c000 	ldrh.w	ip, [r1]
 8003336:	fa0c f202 	lsl.w	r2, ip, r2
 800333a:	4302      	orrs	r2, r0
 800333c:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	4a3e      	ldr	r2, [pc, #248]	@ (800343c <HAL_ADC_ConfigChannel+0x184>)
 8003342:	4290      	cmp	r0, r2
 8003344:	d050      	beq.n	80033e8 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003346:	6818      	ldr	r0, [r3, #0]
 8003348:	4a3c      	ldr	r2, [pc, #240]	@ (800343c <HAL_ADC_ConfigChannel+0x184>)
 800334a:	4290      	cmp	r0, r2
 800334c:	d055      	beq.n	80033fa <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 800334e:	2000      	movs	r0, #0
 8003350:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8003354:	b002      	add	sp, #8
 8003356:	bc30      	pop	{r4, r5}
 8003358:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800335a:	6804      	ldr	r4, [r0, #0]
 800335c:	6920      	ldr	r0, [r4, #16]
 800335e:	b292      	uxth	r2, r2
 8003360:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003364:	f04f 0c07 	mov.w	ip, #7
 8003368:	fa0c f202 	lsl.w	r2, ip, r2
 800336c:	ea20 0202 	bic.w	r2, r0, r2
 8003370:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003372:	681c      	ldr	r4, [r3, #0]
 8003374:	6920      	ldr	r0, [r4, #16]
 8003376:	880a      	ldrh	r2, [r1, #0]
 8003378:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800337c:	688d      	ldr	r5, [r1, #8]
 800337e:	fa05 f202 	lsl.w	r2, r5, r2
 8003382:	4302      	orrs	r2, r0
 8003384:	6122      	str	r2, [r4, #16]
 8003386:	e7bf      	b.n	8003308 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8003388:	2a0c      	cmp	r2, #12
 800338a:	d816      	bhi.n	80033ba <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800338c:	681d      	ldr	r5, [r3, #0]
 800338e:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8003390:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003394:	3a23      	subs	r2, #35	@ 0x23
 8003396:	241f      	movs	r4, #31
 8003398:	fa04 f202 	lsl.w	r2, r4, r2
 800339c:	ea20 0202 	bic.w	r2, r0, r2
 80033a0:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033a2:	681d      	ldr	r5, [r3, #0]
 80033a4:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80033a6:	684a      	ldr	r2, [r1, #4]
 80033a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80033ac:	3a23      	subs	r2, #35	@ 0x23
 80033ae:	880c      	ldrh	r4, [r1, #0]
 80033b0:	fa04 f202 	lsl.w	r2, r4, r2
 80033b4:	4302      	orrs	r2, r0
 80033b6:	632a      	str	r2, [r5, #48]	@ 0x30
 80033b8:	e7c1      	b.n	800333e <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033ba:	681d      	ldr	r5, [r3, #0]
 80033bc:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80033be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80033c2:	3a41      	subs	r2, #65	@ 0x41
 80033c4:	241f      	movs	r4, #31
 80033c6:	fa04 f202 	lsl.w	r2, r4, r2
 80033ca:	ea20 0202 	bic.w	r2, r0, r2
 80033ce:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033d0:	681d      	ldr	r5, [r3, #0]
 80033d2:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80033d4:	684a      	ldr	r2, [r1, #4]
 80033d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80033da:	3a41      	subs	r2, #65	@ 0x41
 80033dc:	880c      	ldrh	r4, [r1, #0]
 80033de:	fa04 f202 	lsl.w	r2, r4, r2
 80033e2:	4302      	orrs	r2, r0
 80033e4:	62ea      	str	r2, [r5, #44]	@ 0x2c
 80033e6:	e7aa      	b.n	800333e <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033e8:	680a      	ldr	r2, [r1, #0]
 80033ea:	2a12      	cmp	r2, #18
 80033ec:	d1ab      	bne.n	8003346 <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033ee:	4814      	ldr	r0, [pc, #80]	@ (8003440 <HAL_ADC_ConfigChannel+0x188>)
 80033f0:	6842      	ldr	r2, [r0, #4]
 80033f2:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80033f6:	6042      	str	r2, [r0, #4]
 80033f8:	e7a5      	b.n	8003346 <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033fa:	680a      	ldr	r2, [r1, #0]
 80033fc:	3a10      	subs	r2, #16
 80033fe:	2a01      	cmp	r2, #1
 8003400:	d8a5      	bhi.n	800334e <HAL_ADC_ConfigChannel+0x96>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003402:	480f      	ldr	r0, [pc, #60]	@ (8003440 <HAL_ADC_ConfigChannel+0x188>)
 8003404:	6842      	ldr	r2, [r0, #4]
 8003406:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800340a:	6042      	str	r2, [r0, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800340c:	680a      	ldr	r2, [r1, #0]
 800340e:	2a10      	cmp	r2, #16
 8003410:	d19d      	bne.n	800334e <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003412:	4a0c      	ldr	r2, [pc, #48]	@ (8003444 <HAL_ADC_ConfigChannel+0x18c>)
 8003414:	6812      	ldr	r2, [r2, #0]
 8003416:	490c      	ldr	r1, [pc, #48]	@ (8003448 <HAL_ADC_ConfigChannel+0x190>)
 8003418:	fba1 1202 	umull	r1, r2, r1, r2
 800341c:	0c92      	lsrs	r2, r2, #18
 800341e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003422:	0052      	lsls	r2, r2, #1
 8003424:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8003426:	e002      	b.n	800342e <HAL_ADC_ConfigChannel+0x176>
        counter--;
 8003428:	9a01      	ldr	r2, [sp, #4]
 800342a:	3a01      	subs	r2, #1
 800342c:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 800342e:	9a01      	ldr	r2, [sp, #4]
 8003430:	2a00      	cmp	r2, #0
 8003432:	d1f9      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x170>
 8003434:	e78b      	b.n	800334e <HAL_ADC_ConfigChannel+0x96>
  __HAL_LOCK(hadc);
 8003436:	2002      	movs	r0, #2
 8003438:	e78c      	b.n	8003354 <HAL_ADC_ConfigChannel+0x9c>
 800343a:	bf00      	nop
 800343c:	40012000 	.word	0x40012000
 8003440:	40012300 	.word	0x40012300
 8003444:	20000034 	.word	0x20000034
 8003448:	431bde83 	.word	0x431bde83

0800344c <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 800344c:	2800      	cmp	r0, #0
 800344e:	db07      	blt.n	8003460 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003450:	f000 021f 	and.w	r2, r0, #31
 8003454:	0940      	lsrs	r0, r0, #5
 8003456:	2301      	movs	r3, #1
 8003458:	4093      	lsls	r3, r2
 800345a:	4a02      	ldr	r2, [pc, #8]	@ (8003464 <__NVIC_EnableIRQ+0x18>)
 800345c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	e000e100 	.word	0xe000e100

08003468 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003468:	2800      	cmp	r0, #0
 800346a:	db08      	blt.n	800347e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346c:	0109      	lsls	r1, r1, #4
 800346e:	b2c9      	uxtb	r1, r1
 8003470:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003474:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8003478:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 800347c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800347e:	f000 000f 	and.w	r0, r0, #15
 8003482:	0109      	lsls	r1, r1, #4
 8003484:	b2c9      	uxtb	r1, r1
 8003486:	4b01      	ldr	r3, [pc, #4]	@ (800348c <__NVIC_SetPriority+0x24>)
 8003488:	5419      	strb	r1, [r3, r0]
  }
}
 800348a:	4770      	bx	lr
 800348c:	e000ed14 	.word	0xe000ed14

08003490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003490:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003492:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003496:	f1c0 0c07 	rsb	ip, r0, #7
 800349a:	f1bc 0f04 	cmp.w	ip, #4
 800349e:	bf28      	it	cs
 80034a0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034a4:	1d03      	adds	r3, r0, #4
 80034a6:	2b06      	cmp	r3, #6
 80034a8:	d90f      	bls.n	80034ca <NVIC_EncodePriority+0x3a>
 80034aa:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ac:	f04f 3eff 	mov.w	lr, #4294967295
 80034b0:	fa0e f00c 	lsl.w	r0, lr, ip
 80034b4:	ea21 0100 	bic.w	r1, r1, r0
 80034b8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034ba:	fa0e fe03 	lsl.w	lr, lr, r3
 80034be:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80034c2:	ea41 0002 	orr.w	r0, r1, r2
 80034c6:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ca:	2300      	movs	r3, #0
 80034cc:	e7ee      	b.n	80034ac <NVIC_EncodePriority+0x1c>
	...

080034d0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034d0:	4a07      	ldr	r2, [pc, #28]	@ (80034f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80034d2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034d4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80034d8:	041b      	lsls	r3, r3, #16
 80034da:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034dc:	0200      	lsls	r0, r0, #8
 80034de:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034e2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80034e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80034ec:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80034ee:	4770      	bx	lr
 80034f0:	e000ed00 	.word	0xe000ed00

080034f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034f4:	b510      	push	{r4, lr}
 80034f6:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034f8:	4b05      	ldr	r3, [pc, #20]	@ (8003510 <HAL_NVIC_SetPriority+0x1c>)
 80034fa:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034fc:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8003500:	f7ff ffc6 	bl	8003490 <NVIC_EncodePriority>
 8003504:	4601      	mov	r1, r0
 8003506:	4620      	mov	r0, r4
 8003508:	f7ff ffae 	bl	8003468 <__NVIC_SetPriority>
}
 800350c:	bd10      	pop	{r4, pc}
 800350e:	bf00      	nop
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003514:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003516:	f7ff ff99 	bl	800344c <__NVIC_EnableIRQ>
}
 800351a:	bd08      	pop	{r3, pc}

0800351c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800351c:	3801      	subs	r0, #1
 800351e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8003522:	d20b      	bcs.n	800353c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003524:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003528:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800352a:	4a05      	ldr	r2, [pc, #20]	@ (8003540 <HAL_SYSTICK_Config+0x24>)
 800352c:	21f0      	movs	r1, #240	@ 0xf0
 800352e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003532:	2000      	movs	r0, #0
 8003534:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003536:	2207      	movs	r2, #7
 8003538:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800353a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800353c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800353e:	4770      	bx	lr
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003544:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003546:	6805      	ldr	r5, [r0, #0]
 8003548:	682c      	ldr	r4, [r5, #0]
 800354a:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 800354e:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003550:	6804      	ldr	r4, [r0, #0]
 8003552:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003554:	6883      	ldr	r3, [r0, #8]
 8003556:	2b40      	cmp	r3, #64	@ 0x40
 8003558:	d005      	beq.n	8003566 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800355a:	6803      	ldr	r3, [r0, #0]
 800355c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800355e:	6803      	ldr	r3, [r0, #0]
 8003560:	60da      	str	r2, [r3, #12]
  }
}
 8003562:	bc30      	pop	{r4, r5}
 8003564:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8003566:	6803      	ldr	r3, [r0, #0]
 8003568:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800356a:	6803      	ldr	r3, [r0, #0]
 800356c:	60d9      	str	r1, [r3, #12]
 800356e:	e7f8      	b.n	8003562 <DMA_SetConfig+0x1e>

08003570 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003570:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003572:	6803      	ldr	r3, [r0, #0]
 8003574:	b2d9      	uxtb	r1, r3
 8003576:	3910      	subs	r1, #16
 8003578:	4a0c      	ldr	r2, [pc, #48]	@ (80035ac <DMA_CalcBaseAndBitshift+0x3c>)
 800357a:	fba2 4201 	umull	r4, r2, r2, r1
 800357e:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003580:	4c0b      	ldr	r4, [pc, #44]	@ (80035b0 <DMA_CalcBaseAndBitshift+0x40>)
 8003582:	5ca2      	ldrb	r2, [r4, r2]
 8003584:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003586:	295f      	cmp	r1, #95	@ 0x5f
 8003588:	d909      	bls.n	800359e <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800358a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800358e:	f023 0303 	bic.w	r3, r3, #3
 8003592:	3304      	adds	r3, #4
 8003594:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8003596:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8003598:	f85d 4b04 	ldr.w	r4, [sp], #4
 800359c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800359e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035a2:	f023 0303 	bic.w	r3, r3, #3
 80035a6:	6583      	str	r3, [r0, #88]	@ 0x58
 80035a8:	e7f5      	b.n	8003596 <DMA_CalcBaseAndBitshift+0x26>
 80035aa:	bf00      	nop
 80035ac:	aaaaaaab 	.word	0xaaaaaaab
 80035b0:	08011e08 	.word	0x08011e08

080035b4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035b4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035b6:	6982      	ldr	r2, [r0, #24]
 80035b8:	b992      	cbnz	r2, 80035e0 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d00a      	beq.n	80035d4 <DMA_CheckFifoParam+0x20>
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d002      	beq.n	80035c8 <DMA_CheckFifoParam+0x14>
 80035c2:	b10b      	cbz	r3, 80035c8 <DMA_CheckFifoParam+0x14>
 80035c4:	2000      	movs	r0, #0
 80035c6:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035c8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80035ca:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80035ce:	d128      	bne.n	8003622 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 80035d0:	2000      	movs	r0, #0
 80035d2:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035d4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80035d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035da:	d024      	beq.n	8003626 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80035dc:	2000      	movs	r0, #0
 80035de:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035e0:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80035e4:	d009      	beq.n	80035fa <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d925      	bls.n	8003636 <DMA_CheckFifoParam+0x82>
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d125      	bne.n	800363a <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035ee:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80035f0:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80035f4:	d123      	bne.n	800363e <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80035f6:	2000      	movs	r0, #0
 80035f8:	4770      	bx	lr
    switch (tmp)
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d803      	bhi.n	8003606 <DMA_CheckFifoParam+0x52>
 80035fe:	e8df f003 	tbb	[pc, r3]
 8003602:	0414      	.short	0x0414
 8003604:	0a14      	.short	0x0a14
 8003606:	2000      	movs	r0, #0
 8003608:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800360a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800360c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8003610:	d10d      	bne.n	800362e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8003612:	2000      	movs	r0, #0
 8003614:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003616:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003618:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800361c:	d009      	beq.n	8003632 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800361e:	2000      	movs	r0, #0
 8003620:	4770      	bx	lr
        status = HAL_ERROR;
 8003622:	2001      	movs	r0, #1
 8003624:	4770      	bx	lr
        status = HAL_ERROR;
 8003626:	2001      	movs	r0, #1
 8003628:	4770      	bx	lr
      status = HAL_ERROR;
 800362a:	2001      	movs	r0, #1
 800362c:	4770      	bx	lr
        status = HAL_ERROR;
 800362e:	2001      	movs	r0, #1
 8003630:	4770      	bx	lr
        status = HAL_ERROR;
 8003632:	2001      	movs	r0, #1
 8003634:	4770      	bx	lr
      status = HAL_ERROR;
 8003636:	2001      	movs	r0, #1
 8003638:	4770      	bx	lr
    switch (tmp)
 800363a:	2000      	movs	r0, #0
 800363c:	4770      	bx	lr
      {
        status = HAL_ERROR;
 800363e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8003640:	4770      	bx	lr
	...

08003644 <HAL_DMA_Init>:
{
 8003644:	b570      	push	{r4, r5, r6, lr}
 8003646:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003648:	f7ff fc34 	bl	8002eb4 <HAL_GetTick>
  if(hdma == NULL)
 800364c:	2c00      	cmp	r4, #0
 800364e:	d05b      	beq.n	8003708 <HAL_DMA_Init+0xc4>
 8003650:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8003652:	2302      	movs	r3, #2
 8003654:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8003658:	2300      	movs	r3, #0
 800365a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 800365e:	6822      	ldr	r2, [r4, #0]
 8003660:	6813      	ldr	r3, [r2, #0]
 8003662:	f023 0301 	bic.w	r3, r3, #1
 8003666:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	f012 0f01 	tst.w	r2, #1
 8003670:	d00a      	beq.n	8003688 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003672:	f7ff fc1f 	bl	8002eb4 <HAL_GetTick>
 8003676:	1b43      	subs	r3, r0, r5
 8003678:	2b05      	cmp	r3, #5
 800367a:	d9f5      	bls.n	8003668 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800367c:	2320      	movs	r3, #32
 800367e:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003680:	2003      	movs	r0, #3
 8003682:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8003686:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8003688:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800368a:	4920      	ldr	r1, [pc, #128]	@ (800370c <HAL_DMA_Init+0xc8>)
 800368c:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800368e:	6862      	ldr	r2, [r4, #4]
 8003690:	68a0      	ldr	r0, [r4, #8]
 8003692:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003694:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003696:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003698:	6920      	ldr	r0, [r4, #16]
 800369a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800369c:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800369e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a0:	69a0      	ldr	r0, [r4, #24]
 80036a2:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80036a4:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a6:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80036a8:	6a20      	ldr	r0, [r4, #32]
 80036aa:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ac:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036ae:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80036b0:	2904      	cmp	r1, #4
 80036b2:	d01e      	beq.n	80036f2 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80036b4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80036b6:	6826      	ldr	r6, [r4, #0]
 80036b8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036ba:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80036be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80036c0:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d107      	bne.n	80036d6 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80036c6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80036c8:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036ca:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80036cc:	b11b      	cbz	r3, 80036d6 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036ce:	4620      	mov	r0, r4
 80036d0:	f7ff ff70 	bl	80035b4 <DMA_CheckFifoParam>
 80036d4:	b990      	cbnz	r0, 80036fc <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80036d6:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036d8:	4620      	mov	r0, r4
 80036da:	f7ff ff49 	bl	8003570 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036de:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80036e0:	233f      	movs	r3, #63	@ 0x3f
 80036e2:	4093      	lsls	r3, r2
 80036e4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e6:	2000      	movs	r0, #0
 80036e8:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80036ea:	2301      	movs	r3, #1
 80036ec:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80036f0:	e7c9      	b.n	8003686 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036f2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80036f4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80036f6:	4301      	orrs	r1, r0
 80036f8:	430a      	orrs	r2, r1
 80036fa:	e7db      	b.n	80036b4 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036fc:	2340      	movs	r3, #64	@ 0x40
 80036fe:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003700:	2001      	movs	r0, #1
 8003702:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8003706:	e7be      	b.n	8003686 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8003708:	2001      	movs	r0, #1
 800370a:	e7bc      	b.n	8003686 <HAL_DMA_Init+0x42>
 800370c:	f010803f 	.word	0xf010803f

08003710 <HAL_DMA_Start_IT>:
{
 8003710:	b538      	push	{r3, r4, r5, lr}
 8003712:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003714:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8003716:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 800371a:	2801      	cmp	r0, #1
 800371c:	d02b      	beq.n	8003776 <HAL_DMA_Start_IT+0x66>
 800371e:	2001      	movs	r0, #1
 8003720:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003724:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8003728:	b2c0      	uxtb	r0, r0
 800372a:	2801      	cmp	r0, #1
 800372c:	d004      	beq.n	8003738 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800372e:	2300      	movs	r3, #0
 8003730:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8003734:	2002      	movs	r0, #2
}
 8003736:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003738:	2002      	movs	r0, #2
 800373a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800373e:	2000      	movs	r0, #0
 8003740:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003742:	4620      	mov	r0, r4
 8003744:	f7ff fefe 	bl	8003544 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003748:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800374a:	233f      	movs	r3, #63	@ 0x3f
 800374c:	4093      	lsls	r3, r2
 800374e:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003750:	6822      	ldr	r2, [r4, #0]
 8003752:	6813      	ldr	r3, [r2, #0]
 8003754:	f043 0316 	orr.w	r3, r3, #22
 8003758:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800375a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800375c:	b123      	cbz	r3, 8003768 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 800375e:	6822      	ldr	r2, [r4, #0]
 8003760:	6813      	ldr	r3, [r2, #0]
 8003762:	f043 0308 	orr.w	r3, r3, #8
 8003766:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8003768:	6822      	ldr	r2, [r4, #0]
 800376a:	6813      	ldr	r3, [r2, #0]
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003772:	2000      	movs	r0, #0
 8003774:	e7df      	b.n	8003736 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8003776:	2002      	movs	r0, #2
 8003778:	e7dd      	b.n	8003736 <HAL_DMA_Start_IT+0x26>

0800377a <HAL_DMA_Abort>:
{
 800377a:	b570      	push	{r4, r5, r6, lr}
 800377c:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800377e:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8003780:	f7ff fb98 	bl	8002eb4 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003784:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d006      	beq.n	800379c <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800378e:	2380      	movs	r3, #128	@ 0x80
 8003790:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8003792:	2300      	movs	r3, #0
 8003794:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8003798:	2001      	movs	r0, #1
}
 800379a:	bd70      	pop	{r4, r5, r6, pc}
 800379c:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800379e:	6822      	ldr	r2, [r4, #0]
 80037a0:	6813      	ldr	r3, [r2, #0]
 80037a2:	f023 0316 	bic.w	r3, r3, #22
 80037a6:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037a8:	6822      	ldr	r2, [r4, #0]
 80037aa:	6953      	ldr	r3, [r2, #20]
 80037ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037b0:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80037b4:	b1e3      	cbz	r3, 80037f0 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037b6:	6822      	ldr	r2, [r4, #0]
 80037b8:	6813      	ldr	r3, [r2, #0]
 80037ba:	f023 0308 	bic.w	r3, r3, #8
 80037be:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80037c0:	6822      	ldr	r2, [r4, #0]
 80037c2:	6813      	ldr	r3, [r2, #0]
 80037c4:	f023 0301 	bic.w	r3, r3, #1
 80037c8:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f013 0f01 	tst.w	r3, #1
 80037d2:	d011      	beq.n	80037f8 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037d4:	f7ff fb6e 	bl	8002eb4 <HAL_GetTick>
 80037d8:	1b43      	subs	r3, r0, r5
 80037da:	2b05      	cmp	r3, #5
 80037dc:	d9f5      	bls.n	80037ca <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037de:	2320      	movs	r3, #32
 80037e0:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037e2:	2003      	movs	r0, #3
 80037e4:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80037e8:	2300      	movs	r3, #0
 80037ea:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 80037ee:	e7d4      	b.n	800379a <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037f0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1df      	bne.n	80037b6 <HAL_DMA_Abort+0x3c>
 80037f6:	e7e3      	b.n	80037c0 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037f8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80037fa:	233f      	movs	r3, #63	@ 0x3f
 80037fc:	4093      	lsls	r3, r2
 80037fe:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8003800:	2301      	movs	r3, #1
 8003802:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8003806:	2000      	movs	r0, #0
 8003808:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 800380c:	e7c5      	b.n	800379a <HAL_DMA_Abort+0x20>

0800380e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800380e:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d003      	beq.n	8003820 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003818:	2380      	movs	r3, #128	@ 0x80
 800381a:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 800381c:	2001      	movs	r0, #1
 800381e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8003820:	2305      	movs	r3, #5
 8003822:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8003826:	6802      	ldr	r2, [r0, #0]
 8003828:	6813      	ldr	r3, [r2, #0]
 800382a:	f023 0301 	bic.w	r3, r3, #1
 800382e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003830:	2000      	movs	r0, #0
}
 8003832:	4770      	bx	lr

08003834 <HAL_DMA_IRQHandler>:
{
 8003834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003836:	b083      	sub	sp, #12
 8003838:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800383e:	4b72      	ldr	r3, [pc, #456]	@ (8003a08 <HAL_DMA_IRQHandler+0x1d4>)
 8003840:	681d      	ldr	r5, [r3, #0]
 8003842:	4b72      	ldr	r3, [pc, #456]	@ (8003a0c <HAL_DMA_IRQHandler+0x1d8>)
 8003844:	fba3 3505 	umull	r3, r5, r3, r5
 8003848:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800384a:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 800384c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800384e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8003850:	2308      	movs	r3, #8
 8003852:	4093      	lsls	r3, r2
 8003854:	4233      	tst	r3, r6
 8003856:	d010      	beq.n	800387a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003858:	6803      	ldr	r3, [r0, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	f012 0f04 	tst.w	r2, #4
 8003860:	d00b      	beq.n	800387a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	f022 0204 	bic.w	r2, r2, #4
 8003868:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800386a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800386c:	2308      	movs	r3, #8
 800386e:	4093      	lsls	r3, r2
 8003870:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003872:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800387a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800387c:	2301      	movs	r3, #1
 800387e:	4093      	lsls	r3, r2
 8003880:	4233      	tst	r3, r6
 8003882:	d009      	beq.n	8003898 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003884:	6822      	ldr	r2, [r4, #0]
 8003886:	6952      	ldr	r2, [r2, #20]
 8003888:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800388c:	d004      	beq.n	8003898 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800388e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003890:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003892:	f043 0302 	orr.w	r3, r3, #2
 8003896:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003898:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800389a:	2304      	movs	r3, #4
 800389c:	4093      	lsls	r3, r2
 800389e:	4233      	tst	r3, r6
 80038a0:	d009      	beq.n	80038b6 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038a2:	6822      	ldr	r2, [r4, #0]
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	f012 0f02 	tst.w	r2, #2
 80038aa:	d004      	beq.n	80038b6 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038ac:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038ae:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80038b0:	f043 0304 	orr.w	r3, r3, #4
 80038b4:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038b6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80038b8:	2310      	movs	r3, #16
 80038ba:	4093      	lsls	r3, r2
 80038bc:	4233      	tst	r3, r6
 80038be:	d024      	beq.n	800390a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038c0:	6822      	ldr	r2, [r4, #0]
 80038c2:	6812      	ldr	r2, [r2, #0]
 80038c4:	f012 0f08 	tst.w	r2, #8
 80038c8:	d01f      	beq.n	800390a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038ca:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80038d4:	d00d      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80038dc:	d104      	bne.n	80038e8 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80038de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80038e0:	b19b      	cbz	r3, 800390a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80038e2:	4620      	mov	r0, r4
 80038e4:	4798      	blx	r3
 80038e6:	e010      	b.n	800390a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038e8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80038ea:	b173      	cbz	r3, 800390a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80038ec:	4620      	mov	r0, r4
 80038ee:	4798      	blx	r3
 80038f0:	e00b      	b.n	800390a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80038f8:	d103      	bne.n	8003902 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	f022 0208 	bic.w	r2, r2, #8
 8003900:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8003902:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003904:	b10b      	cbz	r3, 800390a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8003906:	4620      	mov	r0, r4
 8003908:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800390a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800390c:	2320      	movs	r3, #32
 800390e:	4093      	lsls	r3, r2
 8003910:	4233      	tst	r3, r6
 8003912:	d055      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003914:	6822      	ldr	r2, [r4, #0]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	f012 0f10 	tst.w	r2, #16
 800391c:	d050      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800391e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003920:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b05      	cmp	r3, #5
 8003928:	d00e      	beq.n	8003948 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8003932:	d033      	beq.n	800399c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800393a:	d12a      	bne.n	8003992 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 800393c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800393e:	2b00      	cmp	r3, #0
 8003940:	d03e      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8003942:	4620      	mov	r0, r4
 8003944:	4798      	blx	r3
 8003946:	e03b      	b.n	80039c0 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003948:	6822      	ldr	r2, [r4, #0]
 800394a:	6813      	ldr	r3, [r2, #0]
 800394c:	f023 0316 	bic.w	r3, r3, #22
 8003950:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003952:	6822      	ldr	r2, [r4, #0]
 8003954:	6953      	ldr	r3, [r2, #20]
 8003956:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800395a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800395c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800395e:	b1a3      	cbz	r3, 800398a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003960:	6822      	ldr	r2, [r4, #0]
 8003962:	6813      	ldr	r3, [r2, #0]
 8003964:	f023 0308 	bic.w	r3, r3, #8
 8003968:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800396a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800396c:	233f      	movs	r3, #63	@ 0x3f
 800396e:	4093      	lsls	r3, r2
 8003970:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8003972:	2301      	movs	r3, #1
 8003974:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8003978:	2300      	movs	r3, #0
 800397a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 800397e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8003980:	2b00      	cmp	r3, #0
 8003982:	d03f      	beq.n	8003a04 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8003984:	4620      	mov	r0, r4
 8003986:	4798      	blx	r3
        return;
 8003988:	e03c      	b.n	8003a04 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800398a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1e7      	bne.n	8003960 <HAL_DMA_IRQHandler+0x12c>
 8003990:	e7eb      	b.n	800396a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8003992:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003994:	b1a3      	cbz	r3, 80039c0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8003996:	4620      	mov	r0, r4
 8003998:	4798      	blx	r3
 800399a:	e011      	b.n	80039c0 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80039a2:	d109      	bne.n	80039b8 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	f022 0210 	bic.w	r2, r2, #16
 80039aa:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80039ac:	2301      	movs	r3, #1
 80039ae:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80039b2:	2300      	movs	r3, #0
 80039b4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 80039b8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80039ba:	b10b      	cbz	r3, 80039c0 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80039bc:	4620      	mov	r0, r4
 80039be:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039c0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80039c2:	b1fb      	cbz	r3, 8003a04 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039c4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80039c6:	f013 0f01 	tst.w	r3, #1
 80039ca:	d017      	beq.n	80039fc <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80039cc:	2305      	movs	r3, #5
 80039ce:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80039d2:	6822      	ldr	r2, [r4, #0]
 80039d4:	6813      	ldr	r3, [r2, #0]
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80039dc:	9b01      	ldr	r3, [sp, #4]
 80039de:	3301      	adds	r3, #1
 80039e0:	9301      	str	r3, [sp, #4]
 80039e2:	42ab      	cmp	r3, r5
 80039e4:	d804      	bhi.n	80039f0 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f013 0f01 	tst.w	r3, #1
 80039ee:	d1f5      	bne.n	80039dc <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80039f6:	2300      	movs	r3, #0
 80039f8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80039fc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80039fe:	b10b      	cbz	r3, 8003a04 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8003a00:	4620      	mov	r0, r4
 8003a02:	4798      	blx	r3
}
 8003a04:	b003      	add	sp, #12
 8003a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a08:	20000034 	.word	0x20000034
 8003a0c:	1b4e81b5 	.word	0x1b4e81b5

08003a10 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8003a10:	6d40      	ldr	r0, [r0, #84]	@ 0x54
}
 8003a12:	4770      	bx	lr

08003a14 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a14:	2300      	movs	r3, #0
 8003a16:	2b0f      	cmp	r3, #15
 8003a18:	f200 80e9 	bhi.w	8003bee <HAL_GPIO_Init+0x1da>
{
 8003a1c:	b570      	push	{r4, r5, r6, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	e065      	b.n	8003aee <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a22:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a24:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003a28:	2403      	movs	r4, #3
 8003a2a:	fa04 f40e 	lsl.w	r4, r4, lr
 8003a2e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a32:	68cc      	ldr	r4, [r1, #12]
 8003a34:	fa04 f40e 	lsl.w	r4, r4, lr
 8003a38:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003a3a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a3c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a3e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a42:	684a      	ldr	r2, [r1, #4]
 8003a44:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8003a4c:	6042      	str	r2, [r0, #4]
 8003a4e:	e05c      	b.n	8003b0a <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a50:	08dc      	lsrs	r4, r3, #3
 8003a52:	3408      	adds	r4, #8
 8003a54:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a58:	f003 0507 	and.w	r5, r3, #7
 8003a5c:	00ad      	lsls	r5, r5, #2
 8003a5e:	f04f 0e0f 	mov.w	lr, #15
 8003a62:	fa0e fe05 	lsl.w	lr, lr, r5
 8003a66:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a6a:	690a      	ldr	r2, [r1, #16]
 8003a6c:	40aa      	lsls	r2, r5
 8003a6e:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8003a72:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8003a76:	e05c      	b.n	8003b32 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a78:	2207      	movs	r2, #7
 8003a7a:	e000      	b.n	8003a7e <HAL_GPIO_Init+0x6a>
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	fa02 f20e 	lsl.w	r2, r2, lr
 8003a82:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a84:	3402      	adds	r4, #2
 8003a86:	4d5a      	ldr	r5, [pc, #360]	@ (8003bf0 <HAL_GPIO_Init+0x1dc>)
 8003a88:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a8c:	4a59      	ldr	r2, [pc, #356]	@ (8003bf4 <HAL_GPIO_Init+0x1e0>)
 8003a8e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8003a90:	ea6f 020c 	mvn.w	r2, ip
 8003a94:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a98:	684e      	ldr	r6, [r1, #4]
 8003a9a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8003a9e:	d001      	beq.n	8003aa4 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8003aa0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8003aa4:	4c53      	ldr	r4, [pc, #332]	@ (8003bf4 <HAL_GPIO_Init+0x1e0>)
 8003aa6:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8003aa8:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8003aaa:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003aae:	684e      	ldr	r6, [r1, #4]
 8003ab0:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8003ab4:	d001      	beq.n	8003aba <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8003ab6:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8003aba:	4c4e      	ldr	r4, [pc, #312]	@ (8003bf4 <HAL_GPIO_Init+0x1e0>)
 8003abc:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8003abe:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8003ac0:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ac4:	684e      	ldr	r6, [r1, #4]
 8003ac6:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8003aca:	d001      	beq.n	8003ad0 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8003acc:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8003ad0:	4c48      	ldr	r4, [pc, #288]	@ (8003bf4 <HAL_GPIO_Init+0x1e0>)
 8003ad2:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ad4:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8003ad6:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ad8:	684d      	ldr	r5, [r1, #4]
 8003ada:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8003ade:	d001      	beq.n	8003ae4 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8003ae0:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8003ae4:	4c43      	ldr	r4, [pc, #268]	@ (8003bf4 <HAL_GPIO_Init+0x1e0>)
 8003ae6:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ae8:	3301      	adds	r3, #1
 8003aea:	2b0f      	cmp	r3, #15
 8003aec:	d87d      	bhi.n	8003bea <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8003aee:	2201      	movs	r2, #1
 8003af0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003af2:	680c      	ldr	r4, [r1, #0]
 8003af4:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8003af8:	ea32 0404 	bics.w	r4, r2, r4
 8003afc:	d1f4      	bne.n	8003ae8 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003afe:	684c      	ldr	r4, [r1, #4]
 8003b00:	f004 0403 	and.w	r4, r4, #3
 8003b04:	3c01      	subs	r4, #1
 8003b06:	2c01      	cmp	r4, #1
 8003b08:	d98b      	bls.n	8003a22 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b0a:	684a      	ldr	r2, [r1, #4]
 8003b0c:	f002 0203 	and.w	r2, r2, #3
 8003b10:	2a03      	cmp	r2, #3
 8003b12:	d009      	beq.n	8003b28 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8003b14:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b16:	005d      	lsls	r5, r3, #1
 8003b18:	2203      	movs	r2, #3
 8003b1a:	40aa      	lsls	r2, r5
 8003b1c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b20:	688a      	ldr	r2, [r1, #8]
 8003b22:	40aa      	lsls	r2, r5
 8003b24:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8003b26:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b28:	684a      	ldr	r2, [r1, #4]
 8003b2a:	f002 0203 	and.w	r2, r2, #3
 8003b2e:	2a02      	cmp	r2, #2
 8003b30:	d08e      	beq.n	8003a50 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8003b32:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b34:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003b38:	2203      	movs	r2, #3
 8003b3a:	fa02 f20e 	lsl.w	r2, r2, lr
 8003b3e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b42:	684a      	ldr	r2, [r1, #4]
 8003b44:	f002 0203 	and.w	r2, r2, #3
 8003b48:	fa02 f20e 	lsl.w	r2, r2, lr
 8003b4c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8003b4e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b50:	684a      	ldr	r2, [r1, #4]
 8003b52:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8003b56:	d0c7      	beq.n	8003ae8 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b58:	2200      	movs	r2, #0
 8003b5a:	9201      	str	r2, [sp, #4]
 8003b5c:	4a26      	ldr	r2, [pc, #152]	@ (8003bf8 <HAL_GPIO_Init+0x1e4>)
 8003b5e:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8003b60:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8003b64:	6454      	str	r4, [r2, #68]	@ 0x44
 8003b66:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003b68:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8003b6c:	9201      	str	r2, [sp, #4]
 8003b6e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003b70:	089c      	lsrs	r4, r3, #2
 8003b72:	1ca5      	adds	r5, r4, #2
 8003b74:	4a1e      	ldr	r2, [pc, #120]	@ (8003bf0 <HAL_GPIO_Init+0x1dc>)
 8003b76:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b7a:	f003 0e03 	and.w	lr, r3, #3
 8003b7e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003b82:	220f      	movs	r2, #15
 8003b84:	fa02 f20e 	lsl.w	r2, r2, lr
 8003b88:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bfc <HAL_GPIO_Init+0x1e8>)
 8003b8e:	4290      	cmp	r0, r2
 8003b90:	f43f af74 	beq.w	8003a7c <HAL_GPIO_Init+0x68>
 8003b94:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003b98:	4290      	cmp	r0, r2
 8003b9a:	d01a      	beq.n	8003bd2 <HAL_GPIO_Init+0x1be>
 8003b9c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003ba0:	4290      	cmp	r0, r2
 8003ba2:	d018      	beq.n	8003bd6 <HAL_GPIO_Init+0x1c2>
 8003ba4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003ba8:	4290      	cmp	r0, r2
 8003baa:	d016      	beq.n	8003bda <HAL_GPIO_Init+0x1c6>
 8003bac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003bb0:	4290      	cmp	r0, r2
 8003bb2:	d014      	beq.n	8003bde <HAL_GPIO_Init+0x1ca>
 8003bb4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003bb8:	4290      	cmp	r0, r2
 8003bba:	d012      	beq.n	8003be2 <HAL_GPIO_Init+0x1ce>
 8003bbc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003bc0:	4290      	cmp	r0, r2
 8003bc2:	d010      	beq.n	8003be6 <HAL_GPIO_Init+0x1d2>
 8003bc4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003bc8:	4290      	cmp	r0, r2
 8003bca:	f43f af55 	beq.w	8003a78 <HAL_GPIO_Init+0x64>
 8003bce:	2208      	movs	r2, #8
 8003bd0:	e755      	b.n	8003a7e <HAL_GPIO_Init+0x6a>
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	e753      	b.n	8003a7e <HAL_GPIO_Init+0x6a>
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	e751      	b.n	8003a7e <HAL_GPIO_Init+0x6a>
 8003bda:	2203      	movs	r2, #3
 8003bdc:	e74f      	b.n	8003a7e <HAL_GPIO_Init+0x6a>
 8003bde:	2204      	movs	r2, #4
 8003be0:	e74d      	b.n	8003a7e <HAL_GPIO_Init+0x6a>
 8003be2:	2205      	movs	r2, #5
 8003be4:	e74b      	b.n	8003a7e <HAL_GPIO_Init+0x6a>
 8003be6:	2206      	movs	r2, #6
 8003be8:	e749      	b.n	8003a7e <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8003bea:	b002      	add	sp, #8
 8003bec:	bd70      	pop	{r4, r5, r6, pc}
 8003bee:	4770      	bx	lr
 8003bf0:	40013800 	.word	0x40013800
 8003bf4:	40013c00 	.word	0x40013c00
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40020000 	.word	0x40020000

08003c00 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c00:	6903      	ldr	r3, [r0, #16]
 8003c02:	4219      	tst	r1, r3
 8003c04:	d001      	beq.n	8003c0a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8003c06:	2001      	movs	r0, #1
 8003c08:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c0a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8003c0c:	4770      	bx	lr

08003c0e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c0e:	b10a      	cbz	r2, 8003c14 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c10:	6181      	str	r1, [r0, #24]
 8003c12:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c14:	0409      	lsls	r1, r1, #16
 8003c16:	6181      	str	r1, [r0, #24]
  }
}
 8003c18:	4770      	bx	lr
	...

08003c1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c1c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c1e:	4b05      	ldr	r3, [pc, #20]	@ (8003c34 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	4203      	tst	r3, r0
 8003c24:	d100      	bne.n	8003c28 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8003c26:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c28:	4b02      	ldr	r3, [pc, #8]	@ (8003c34 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003c2a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c2c:	f7fe fae4 	bl	80021f8 <HAL_GPIO_EXTI_Callback>
}
 8003c30:	e7f9      	b.n	8003c26 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003c32:	bf00      	nop
 8003c34:	40013c00 	.word	0x40013c00

08003c38 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	f000 81e0 	beq.w	8003ffe <HAL_RCC_OscConfig+0x3c6>
{
 8003c3e:	b570      	push	{r4, r5, r6, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c44:	6803      	ldr	r3, [r0, #0]
 8003c46:	f013 0f01 	tst.w	r3, #1
 8003c4a:	d03b      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c4c:	4b9f      	ldr	r3, [pc, #636]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 030c 	and.w	r3, r3, #12
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d02c      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c58:	4b9c      	ldr	r3, [pc, #624]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d021      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c64:	6863      	ldr	r3, [r4, #4]
 8003c66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c6a:	d04f      	beq.n	8003d0c <HAL_RCC_OscConfig+0xd4>
 8003c6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c70:	d052      	beq.n	8003d18 <HAL_RCC_OscConfig+0xe0>
 8003c72:	4b96      	ldr	r3, [pc, #600]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003c82:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c84:	6863      	ldr	r3, [r4, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d050      	beq.n	8003d2c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8a:	f7ff f913 	bl	8002eb4 <HAL_GetTick>
 8003c8e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c90:	4b8e      	ldr	r3, [pc, #568]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003c98:	d114      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c9a:	f7ff f90b 	bl	8002eb4 <HAL_GetTick>
 8003c9e:	1b40      	subs	r0, r0, r5
 8003ca0:	2864      	cmp	r0, #100	@ 0x64
 8003ca2:	d9f5      	bls.n	8003c90 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8003ca4:	2003      	movs	r0, #3
 8003ca6:	e1b1      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ca8:	4b88      	ldr	r3, [pc, #544]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003cb0:	d0d8      	beq.n	8003c64 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb2:	4b86      	ldr	r3, [pc, #536]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003cba:	d003      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x8c>
 8003cbc:	6863      	ldr	r3, [r4, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 819f 	beq.w	8004002 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	f013 0f02 	tst.w	r3, #2
 8003cca:	d054      	beq.n	8003d76 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ccc:	4b7f      	ldr	r3, [pc, #508]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f013 0f0c 	tst.w	r3, #12
 8003cd4:	d03e      	beq.n	8003d54 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cd6:	4b7d      	ldr	r3, [pc, #500]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d033      	beq.n	8003d4a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ce2:	68e3      	ldr	r3, [r4, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d068      	beq.n	8003dba <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce8:	4b79      	ldr	r3, [pc, #484]	@ (8003ed0 <HAL_RCC_OscConfig+0x298>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cee:	f7ff f8e1 	bl	8002eb4 <HAL_GetTick>
 8003cf2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf4:	4b75      	ldr	r3, [pc, #468]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f013 0f02 	tst.w	r3, #2
 8003cfc:	d154      	bne.n	8003da8 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cfe:	f7ff f8d9 	bl	8002eb4 <HAL_GetTick>
 8003d02:	1b40      	subs	r0, r0, r5
 8003d04:	2802      	cmp	r0, #2
 8003d06:	d9f5      	bls.n	8003cf4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003d08:	2003      	movs	r0, #3
 8003d0a:	e17f      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d0c:	4a6f      	ldr	r2, [pc, #444]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003d0e:	6813      	ldr	r3, [r2, #0]
 8003d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	e7b5      	b.n	8003c84 <HAL_RCC_OscConfig+0x4c>
 8003d18:	4b6c      	ldr	r3, [pc, #432]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	e7ab      	b.n	8003c84 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8003d2c:	f7ff f8c2 	bl	8002eb4 <HAL_GetTick>
 8003d30:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d32:	4b66      	ldr	r3, [pc, #408]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003d3a:	d0c3      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d3c:	f7ff f8ba 	bl	8002eb4 <HAL_GetTick>
 8003d40:	1b40      	subs	r0, r0, r5
 8003d42:	2864      	cmp	r0, #100	@ 0x64
 8003d44:	d9f5      	bls.n	8003d32 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8003d46:	2003      	movs	r0, #3
 8003d48:	e160      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d4a:	4b60      	ldr	r3, [pc, #384]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003d52:	d1c6      	bne.n	8003ce2 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d54:	4b5d      	ldr	r3, [pc, #372]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f013 0f02 	tst.w	r3, #2
 8003d5c:	d003      	beq.n	8003d66 <HAL_RCC_OscConfig+0x12e>
 8003d5e:	68e3      	ldr	r3, [r4, #12]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	f040 8150 	bne.w	8004006 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d66:	4a59      	ldr	r2, [pc, #356]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003d68:	6813      	ldr	r3, [r2, #0]
 8003d6a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003d6e:	6921      	ldr	r1, [r4, #16]
 8003d70:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003d74:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	f013 0f08 	tst.w	r3, #8
 8003d7c:	d042      	beq.n	8003e04 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d7e:	6963      	ldr	r3, [r4, #20]
 8003d80:	b36b      	cbz	r3, 8003dde <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d82:	4b53      	ldr	r3, [pc, #332]	@ (8003ed0 <HAL_RCC_OscConfig+0x298>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8a:	f7ff f893 	bl	8002eb4 <HAL_GetTick>
 8003d8e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d90:	4b4e      	ldr	r3, [pc, #312]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d94:	f013 0f02 	tst.w	r3, #2
 8003d98:	d134      	bne.n	8003e04 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d9a:	f7ff f88b 	bl	8002eb4 <HAL_GetTick>
 8003d9e:	1b40      	subs	r0, r0, r5
 8003da0:	2802      	cmp	r0, #2
 8003da2:	d9f5      	bls.n	8003d90 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8003da4:	2003      	movs	r0, #3
 8003da6:	e131      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da8:	4a48      	ldr	r2, [pc, #288]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003daa:	6813      	ldr	r3, [r2, #0]
 8003dac:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003db0:	6921      	ldr	r1, [r4, #16]
 8003db2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	e7dd      	b.n	8003d76 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8003dba:	4b45      	ldr	r3, [pc, #276]	@ (8003ed0 <HAL_RCC_OscConfig+0x298>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003dc0:	f7ff f878 	bl	8002eb4 <HAL_GetTick>
 8003dc4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc6:	4b41      	ldr	r3, [pc, #260]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f013 0f02 	tst.w	r3, #2
 8003dce:	d0d2      	beq.n	8003d76 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd0:	f7ff f870 	bl	8002eb4 <HAL_GetTick>
 8003dd4:	1b40      	subs	r0, r0, r5
 8003dd6:	2802      	cmp	r0, #2
 8003dd8:	d9f5      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8003dda:	2003      	movs	r0, #3
 8003ddc:	e116      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dde:	4b3c      	ldr	r3, [pc, #240]	@ (8003ed0 <HAL_RCC_OscConfig+0x298>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de6:	f7ff f865 	bl	8002eb4 <HAL_GetTick>
 8003dea:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dec:	4b37      	ldr	r3, [pc, #220]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003df0:	f013 0f02 	tst.w	r3, #2
 8003df4:	d006      	beq.n	8003e04 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df6:	f7ff f85d 	bl	8002eb4 <HAL_GetTick>
 8003dfa:	1b40      	subs	r0, r0, r5
 8003dfc:	2802      	cmp	r0, #2
 8003dfe:	d9f5      	bls.n	8003dec <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8003e00:	2003      	movs	r0, #3
 8003e02:	e103      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e04:	6823      	ldr	r3, [r4, #0]
 8003e06:	f013 0f04 	tst.w	r3, #4
 8003e0a:	d077      	beq.n	8003efc <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e0c:	4b2f      	ldr	r3, [pc, #188]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003e14:	d133      	bne.n	8003e7e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	9301      	str	r3, [sp, #4]
 8003e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003e1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e1e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003e22:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e2a:	9301      	str	r3, [sp, #4]
 8003e2c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003e2e:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e30:	4b28      	ldr	r3, [pc, #160]	@ (8003ed4 <HAL_RCC_OscConfig+0x29c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003e38:	d023      	beq.n	8003e82 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e3a:	68a3      	ldr	r3, [r4, #8]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d034      	beq.n	8003eaa <HAL_RCC_OscConfig+0x272>
 8003e40:	2b05      	cmp	r3, #5
 8003e42:	d038      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x27e>
 8003e44:	4b21      	ldr	r3, [pc, #132]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003e46:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e48:	f022 0201 	bic.w	r2, r2, #1
 8003e4c:	671a      	str	r2, [r3, #112]	@ 0x70
 8003e4e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e50:	f022 0204 	bic.w	r2, r2, #4
 8003e54:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e56:	68a3      	ldr	r3, [r4, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d03d      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5c:	f7ff f82a 	bl	8002eb4 <HAL_GetTick>
 8003e60:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e62:	4b1a      	ldr	r3, [pc, #104]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e66:	f013 0f02 	tst.w	r3, #2
 8003e6a:	d146      	bne.n	8003efa <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e6c:	f7ff f822 	bl	8002eb4 <HAL_GetTick>
 8003e70:	1b80      	subs	r0, r0, r6
 8003e72:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003e76:	4298      	cmp	r0, r3
 8003e78:	d9f3      	bls.n	8003e62 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8003e7a:	2003      	movs	r0, #3
 8003e7c:	e0c6      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8003e7e:	2500      	movs	r5, #0
 8003e80:	e7d6      	b.n	8003e30 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e82:	4a14      	ldr	r2, [pc, #80]	@ (8003ed4 <HAL_RCC_OscConfig+0x29c>)
 8003e84:	6813      	ldr	r3, [r2, #0]
 8003e86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e8a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003e8c:	f7ff f812 	bl	8002eb4 <HAL_GetTick>
 8003e90:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e92:	4b10      	ldr	r3, [pc, #64]	@ (8003ed4 <HAL_RCC_OscConfig+0x29c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003e9a:	d1ce      	bne.n	8003e3a <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9c:	f7ff f80a 	bl	8002eb4 <HAL_GetTick>
 8003ea0:	1b80      	subs	r0, r0, r6
 8003ea2:	2802      	cmp	r0, #2
 8003ea4:	d9f5      	bls.n	8003e92 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8003ea6:	2003      	movs	r0, #3
 8003ea8:	e0b0      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eaa:	4a08      	ldr	r2, [pc, #32]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003eac:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eb4:	e7cf      	b.n	8003e56 <HAL_RCC_OscConfig+0x21e>
 8003eb6:	4b05      	ldr	r3, [pc, #20]	@ (8003ecc <HAL_RCC_OscConfig+0x294>)
 8003eb8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003eba:	f042 0204 	orr.w	r2, r2, #4
 8003ebe:	671a      	str	r2, [r3, #112]	@ 0x70
 8003ec0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	671a      	str	r2, [r3, #112]	@ 0x70
 8003ec8:	e7c5      	b.n	8003e56 <HAL_RCC_OscConfig+0x21e>
 8003eca:	bf00      	nop
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	42470000 	.word	0x42470000
 8003ed4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed8:	f7fe ffec 	bl	8002eb4 <HAL_GetTick>
 8003edc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ede:	4b52      	ldr	r3, [pc, #328]	@ (8004028 <HAL_RCC_OscConfig+0x3f0>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee2:	f013 0f02 	tst.w	r3, #2
 8003ee6:	d008      	beq.n	8003efa <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee8:	f7fe ffe4 	bl	8002eb4 <HAL_GetTick>
 8003eec:	1b80      	subs	r0, r0, r6
 8003eee:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003ef2:	4298      	cmp	r0, r3
 8003ef4:	d9f3      	bls.n	8003ede <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8003ef6:	2003      	movs	r0, #3
 8003ef8:	e088      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003efa:	b9ed      	cbnz	r5, 8003f38 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003efc:	69a3      	ldr	r3, [r4, #24]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 8083 	beq.w	800400a <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f04:	4a48      	ldr	r2, [pc, #288]	@ (8004028 <HAL_RCC_OscConfig+0x3f0>)
 8003f06:	6892      	ldr	r2, [r2, #8]
 8003f08:	f002 020c 	and.w	r2, r2, #12
 8003f0c:	2a08      	cmp	r2, #8
 8003f0e:	d051      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d017      	beq.n	8003f44 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f14:	4b45      	ldr	r3, [pc, #276]	@ (800402c <HAL_RCC_OscConfig+0x3f4>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1a:	f7fe ffcb 	bl	8002eb4 <HAL_GetTick>
 8003f1e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f20:	4b41      	ldr	r3, [pc, #260]	@ (8004028 <HAL_RCC_OscConfig+0x3f0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003f28:	d042      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f2a:	f7fe ffc3 	bl	8002eb4 <HAL_GetTick>
 8003f2e:	1b00      	subs	r0, r0, r4
 8003f30:	2802      	cmp	r0, #2
 8003f32:	d9f5      	bls.n	8003f20 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003f34:	2003      	movs	r0, #3
 8003f36:	e069      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f38:	4a3b      	ldr	r2, [pc, #236]	@ (8004028 <HAL_RCC_OscConfig+0x3f0>)
 8003f3a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003f3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f42:	e7db      	b.n	8003efc <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8003f44:	4b39      	ldr	r3, [pc, #228]	@ (800402c <HAL_RCC_OscConfig+0x3f4>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003f4a:	f7fe ffb3 	bl	8002eb4 <HAL_GetTick>
 8003f4e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f50:	4b35      	ldr	r3, [pc, #212]	@ (8004028 <HAL_RCC_OscConfig+0x3f0>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003f58:	d006      	beq.n	8003f68 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fe ffab 	bl	8002eb4 <HAL_GetTick>
 8003f5e:	1b40      	subs	r0, r0, r5
 8003f60:	2802      	cmp	r0, #2
 8003f62:	d9f5      	bls.n	8003f50 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8003f64:	2003      	movs	r0, #3
 8003f66:	e051      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f68:	69e3      	ldr	r3, [r4, #28]
 8003f6a:	6a22      	ldr	r2, [r4, #32]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003f70:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003f74:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003f76:	0852      	lsrs	r2, r2, #1
 8003f78:	3a01      	subs	r2, #1
 8003f7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f7e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003f80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003f84:	4a28      	ldr	r2, [pc, #160]	@ (8004028 <HAL_RCC_OscConfig+0x3f0>)
 8003f86:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003f88:	4b28      	ldr	r3, [pc, #160]	@ (800402c <HAL_RCC_OscConfig+0x3f4>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003f8e:	f7fe ff91 	bl	8002eb4 <HAL_GetTick>
 8003f92:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f94:	4b24      	ldr	r3, [pc, #144]	@ (8004028 <HAL_RCC_OscConfig+0x3f0>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003f9c:	d106      	bne.n	8003fac <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f9e:	f7fe ff89 	bl	8002eb4 <HAL_GetTick>
 8003fa2:	1b00      	subs	r0, r0, r4
 8003fa4:	2802      	cmp	r0, #2
 8003fa6:	d9f5      	bls.n	8003f94 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8003fa8:	2003      	movs	r0, #3
 8003faa:	e02f      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003fac:	2000      	movs	r0, #0
 8003fae:	e02d      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	e02b      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d02b      	beq.n	8004010 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8003fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8004028 <HAL_RCC_OscConfig+0x3f0>)
 8003fba:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fbc:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8003fc0:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc2:	4291      	cmp	r1, r2
 8003fc4:	d126      	bne.n	8004014 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fca:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fcc:	428a      	cmp	r2, r1
 8003fce:	d123      	bne.n	8004018 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fd0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fd2:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8003fd6:	401a      	ands	r2, r3
 8003fd8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003fdc:	d11e      	bne.n	800401c <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fde:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8003fe2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003fe4:	0852      	lsrs	r2, r2, #1
 8003fe6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fe8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003fec:	d118      	bne.n	8004020 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fee:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8003ff2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ff4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8003ff8:	d114      	bne.n	8004024 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	e006      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8003ffe:	2001      	movs	r0, #1
}
 8004000:	4770      	bx	lr
        return HAL_ERROR;
 8004002:	2001      	movs	r0, #1
 8004004:	e002      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8004006:	2001      	movs	r0, #1
 8004008:	e000      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800400a:	2000      	movs	r0, #0
}
 800400c:	b002      	add	sp, #8
 800400e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8004010:	2001      	movs	r0, #1
 8004012:	e7fb      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8004014:	2001      	movs	r0, #1
 8004016:	e7f9      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
 8004018:	2001      	movs	r0, #1
 800401a:	e7f7      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
 800401c:	2001      	movs	r0, #1
 800401e:	e7f5      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
 8004020:	2001      	movs	r0, #1
 8004022:	e7f3      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
 8004024:	2001      	movs	r0, #1
 8004026:	e7f1      	b.n	800400c <HAL_RCC_OscConfig+0x3d4>
 8004028:	40023800 	.word	0x40023800
 800402c:	42470000 	.word	0x42470000

08004030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004030:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004032:	4b33      	ldr	r3, [pc, #204]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	2b04      	cmp	r3, #4
 800403c:	d05b      	beq.n	80040f6 <HAL_RCC_GetSysClockFreq+0xc6>
 800403e:	2b08      	cmp	r3, #8
 8004040:	d15b      	bne.n	80040fa <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004042:	4b2f      	ldr	r3, [pc, #188]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8004050:	d02c      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004052:	4b2b      	ldr	r3, [pc, #172]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004054:	6858      	ldr	r0, [r3, #4]
 8004056:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800405a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800405e:	ebbc 0c00 	subs.w	ip, ip, r0
 8004062:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8004066:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800406a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800406e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8004072:	ebb1 010c 	subs.w	r1, r1, ip
 8004076:	eb63 030e 	sbc.w	r3, r3, lr
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004080:	00c9      	lsls	r1, r1, #3
 8004082:	eb11 0c00 	adds.w	ip, r1, r0
 8004086:	f143 0300 	adc.w	r3, r3, #0
 800408a:	0259      	lsls	r1, r3, #9
 800408c:	2300      	movs	r3, #0
 800408e:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8004092:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8004096:	f7fc fdf7 	bl	8000c88 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800409a:	4b19      	ldr	r3, [pc, #100]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xd0>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80040a2:	3301      	adds	r3, #1
 80040a4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80040a6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80040aa:	e027      	b.n	80040fc <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ac:	4b14      	ldr	r3, [pc, #80]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xd0>)
 80040ae:	6858      	ldr	r0, [r3, #4]
 80040b0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80040b4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80040b8:	ebbc 0c00 	subs.w	ip, ip, r0
 80040bc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80040c0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80040c4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80040c8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80040cc:	ebb1 010c 	subs.w	r1, r1, ip
 80040d0:	eb63 030e 	sbc.w	r3, r3, lr
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040da:	00c9      	lsls	r1, r1, #3
 80040dc:	eb11 0c00 	adds.w	ip, r1, r0
 80040e0:	f143 0300 	adc.w	r3, r3, #0
 80040e4:	0299      	lsls	r1, r3, #10
 80040e6:	2300      	movs	r3, #0
 80040e8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80040ec:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80040f0:	f7fc fdca 	bl	8000c88 <__aeabi_uldivmod>
 80040f4:	e7d1      	b.n	800409a <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 80040f6:	4803      	ldr	r0, [pc, #12]	@ (8004104 <HAL_RCC_GetSysClockFreq+0xd4>)
 80040f8:	e000      	b.n	80040fc <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040fa:	4803      	ldr	r0, [pc, #12]	@ (8004108 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80040fc:	bd08      	pop	{r3, pc}
 80040fe:	bf00      	nop
 8004100:	40023800 	.word	0x40023800
 8004104:	007a1200 	.word	0x007a1200
 8004108:	00f42400 	.word	0x00f42400

0800410c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800410c:	2800      	cmp	r0, #0
 800410e:	f000 809b 	beq.w	8004248 <HAL_RCC_ClockConfig+0x13c>
{
 8004112:	b570      	push	{r4, r5, r6, lr}
 8004114:	460d      	mov	r5, r1
 8004116:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004118:	4b4f      	ldr	r3, [pc, #316]	@ (8004258 <HAL_RCC_ClockConfig+0x14c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	428b      	cmp	r3, r1
 8004122:	d208      	bcs.n	8004136 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004124:	b2cb      	uxtb	r3, r1
 8004126:	4a4c      	ldr	r2, [pc, #304]	@ (8004258 <HAL_RCC_ClockConfig+0x14c>)
 8004128:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800412a:	6813      	ldr	r3, [r2, #0]
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	428b      	cmp	r3, r1
 8004132:	f040 808b 	bne.w	800424c <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	f013 0f02 	tst.w	r3, #2
 800413c:	d017      	beq.n	800416e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800413e:	f013 0f04 	tst.w	r3, #4
 8004142:	d004      	beq.n	800414e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004144:	4a45      	ldr	r2, [pc, #276]	@ (800425c <HAL_RCC_ClockConfig+0x150>)
 8004146:	6893      	ldr	r3, [r2, #8]
 8004148:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800414c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	f013 0f08 	tst.w	r3, #8
 8004154:	d004      	beq.n	8004160 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004156:	4a41      	ldr	r2, [pc, #260]	@ (800425c <HAL_RCC_ClockConfig+0x150>)
 8004158:	6893      	ldr	r3, [r2, #8]
 800415a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800415e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004160:	4a3e      	ldr	r2, [pc, #248]	@ (800425c <HAL_RCC_ClockConfig+0x150>)
 8004162:	6893      	ldr	r3, [r2, #8]
 8004164:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004168:	68a1      	ldr	r1, [r4, #8]
 800416a:	430b      	orrs	r3, r1
 800416c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	f013 0f01 	tst.w	r3, #1
 8004174:	d032      	beq.n	80041dc <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004176:	6863      	ldr	r3, [r4, #4]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d021      	beq.n	80041c0 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417c:	1e9a      	subs	r2, r3, #2
 800417e:	2a01      	cmp	r2, #1
 8004180:	d925      	bls.n	80041ce <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004182:	4a36      	ldr	r2, [pc, #216]	@ (800425c <HAL_RCC_ClockConfig+0x150>)
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	f012 0f02 	tst.w	r2, #2
 800418a:	d061      	beq.n	8004250 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800418c:	4933      	ldr	r1, [pc, #204]	@ (800425c <HAL_RCC_ClockConfig+0x150>)
 800418e:	688a      	ldr	r2, [r1, #8]
 8004190:	f022 0203 	bic.w	r2, r2, #3
 8004194:	4313      	orrs	r3, r2
 8004196:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004198:	f7fe fe8c 	bl	8002eb4 <HAL_GetTick>
 800419c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419e:	4b2f      	ldr	r3, [pc, #188]	@ (800425c <HAL_RCC_ClockConfig+0x150>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	6862      	ldr	r2, [r4, #4]
 80041a8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80041ac:	d016      	beq.n	80041dc <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ae:	f7fe fe81 	bl	8002eb4 <HAL_GetTick>
 80041b2:	1b80      	subs	r0, r0, r6
 80041b4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80041b8:	4298      	cmp	r0, r3
 80041ba:	d9f0      	bls.n	800419e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80041bc:	2003      	movs	r0, #3
 80041be:	e042      	b.n	8004246 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c0:	4a26      	ldr	r2, [pc, #152]	@ (800425c <HAL_RCC_ClockConfig+0x150>)
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80041c8:	d1e0      	bne.n	800418c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80041ca:	2001      	movs	r0, #1
 80041cc:	e03b      	b.n	8004246 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ce:	4a23      	ldr	r2, [pc, #140]	@ (800425c <HAL_RCC_ClockConfig+0x150>)
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80041d6:	d1d9      	bne.n	800418c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80041d8:	2001      	movs	r0, #1
 80041da:	e034      	b.n	8004246 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004258 <HAL_RCC_ClockConfig+0x14c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	42ab      	cmp	r3, r5
 80041e6:	d907      	bls.n	80041f8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e8:	b2ea      	uxtb	r2, r5
 80041ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004258 <HAL_RCC_ClockConfig+0x14c>)
 80041ec:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	42ab      	cmp	r3, r5
 80041f6:	d12d      	bne.n	8004254 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	f013 0f04 	tst.w	r3, #4
 80041fe:	d006      	beq.n	800420e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004200:	4a16      	ldr	r2, [pc, #88]	@ (800425c <HAL_RCC_ClockConfig+0x150>)
 8004202:	6893      	ldr	r3, [r2, #8]
 8004204:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8004208:	68e1      	ldr	r1, [r4, #12]
 800420a:	430b      	orrs	r3, r1
 800420c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	f013 0f08 	tst.w	r3, #8
 8004214:	d007      	beq.n	8004226 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004216:	4a11      	ldr	r2, [pc, #68]	@ (800425c <HAL_RCC_ClockConfig+0x150>)
 8004218:	6893      	ldr	r3, [r2, #8]
 800421a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800421e:	6921      	ldr	r1, [r4, #16]
 8004220:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004224:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004226:	f7ff ff03 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 800422a:	4b0c      	ldr	r3, [pc, #48]	@ (800425c <HAL_RCC_ClockConfig+0x150>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004232:	4a0b      	ldr	r2, [pc, #44]	@ (8004260 <HAL_RCC_ClockConfig+0x154>)
 8004234:	5cd3      	ldrb	r3, [r2, r3]
 8004236:	40d8      	lsrs	r0, r3
 8004238:	4b0a      	ldr	r3, [pc, #40]	@ (8004264 <HAL_RCC_ClockConfig+0x158>)
 800423a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800423c:	4b0a      	ldr	r3, [pc, #40]	@ (8004268 <HAL_RCC_ClockConfig+0x15c>)
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	f7fe fdec 	bl	8002e1c <HAL_InitTick>
  return HAL_OK;
 8004244:	2000      	movs	r0, #0
}
 8004246:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004248:	2001      	movs	r0, #1
}
 800424a:	4770      	bx	lr
      return HAL_ERROR;
 800424c:	2001      	movs	r0, #1
 800424e:	e7fa      	b.n	8004246 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8004250:	2001      	movs	r0, #1
 8004252:	e7f8      	b.n	8004246 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8004254:	2001      	movs	r0, #1
 8004256:	e7f6      	b.n	8004246 <HAL_RCC_ClockConfig+0x13a>
 8004258:	40023c00 	.word	0x40023c00
 800425c:	40023800 	.word	0x40023800
 8004260:	08011df8 	.word	0x08011df8
 8004264:	20000034 	.word	0x20000034
 8004268:	2000003c 	.word	0x2000003c

0800426c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800426c:	4b01      	ldr	r3, [pc, #4]	@ (8004274 <HAL_RCC_GetHCLKFreq+0x8>)
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	20000034 	.word	0x20000034

08004278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004278:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800427a:	f7ff fff7 	bl	800426c <HAL_RCC_GetHCLKFreq>
 800427e:	4b04      	ldr	r3, [pc, #16]	@ (8004290 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004286:	4a03      	ldr	r2, [pc, #12]	@ (8004294 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004288:	5cd3      	ldrb	r3, [r2, r3]
}
 800428a:	40d8      	lsrs	r0, r3
 800428c:	bd08      	pop	{r3, pc}
 800428e:	bf00      	nop
 8004290:	40023800 	.word	0x40023800
 8004294:	08011df0 	.word	0x08011df0

08004298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004298:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800429a:	f7ff ffe7 	bl	800426c <HAL_RCC_GetHCLKFreq>
 800429e:	4b04      	ldr	r3, [pc, #16]	@ (80042b0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80042a6:	4a03      	ldr	r2, [pc, #12]	@ (80042b4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80042a8:	5cd3      	ldrb	r3, [r2, r3]
}
 80042aa:	40d8      	lsrs	r0, r3
 80042ac:	bd08      	pop	{r3, pc}
 80042ae:	bf00      	nop
 80042b0:	40023800 	.word	0x40023800
 80042b4:	08011df0 	.word	0x08011df0

080042b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042b8:	b530      	push	{r4, r5, lr}
 80042ba:	b083      	sub	sp, #12
 80042bc:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042be:	6803      	ldr	r3, [r0, #0]
 80042c0:	f013 0f05 	tst.w	r3, #5
 80042c4:	d106      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	f013 0f02 	tst.w	r3, #2
 80042cc:	d12e      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x74>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80042ce:	2000      	movs	r0, #0
}
 80042d0:	b003      	add	sp, #12
 80042d2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80042d4:	4b4a      	ldr	r3, [pc, #296]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 80042da:	f7fe fdeb 	bl	8002eb4 <HAL_GetTick>
 80042de:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042e0:	4b48      	ldr	r3, [pc, #288]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80042e8:	d006      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042ea:	f7fe fde3 	bl	8002eb4 <HAL_GetTick>
 80042ee:	1b43      	subs	r3, r0, r5
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d9f5      	bls.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
        return HAL_TIMEOUT;
 80042f4:	2003      	movs	r0, #3
 80042f6:	e7eb      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042f8:	6862      	ldr	r2, [r4, #4]
 80042fa:	68a3      	ldr	r3, [r4, #8]
 80042fc:	071b      	lsls	r3, r3, #28
 80042fe:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004302:	4a40      	ldr	r2, [pc, #256]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004304:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004308:	4b3d      	ldr	r3, [pc, #244]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800430a:	2201      	movs	r2, #1
 800430c:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 800430e:	f7fe fdd1 	bl	8002eb4 <HAL_GetTick>
 8004312:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004314:	4b3b      	ldr	r3, [pc, #236]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800431c:	d1d3      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800431e:	f7fe fdc9 	bl	8002eb4 <HAL_GetTick>
 8004322:	1b43      	subs	r3, r0, r5
 8004324:	2b02      	cmp	r3, #2
 8004326:	d9f5      	bls.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x5c>
        return HAL_TIMEOUT;
 8004328:	2003      	movs	r0, #3
 800432a:	e7d1      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 800432c:	2300      	movs	r3, #0
 800432e:	9301      	str	r3, [sp, #4]
 8004330:	4b34      	ldr	r3, [pc, #208]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004332:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004334:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004338:	641a      	str	r2, [r3, #64]	@ 0x40
 800433a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004340:	9301      	str	r3, [sp, #4]
 8004342:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8004344:	4a30      	ldr	r2, [pc, #192]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004346:	6813      	ldr	r3, [r2, #0]
 8004348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800434c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800434e:	f7fe fdb1 	bl	8002eb4 <HAL_GetTick>
 8004352:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004354:	4b2c      	ldr	r3, [pc, #176]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800435c:	d106      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800435e:	f7fe fda9 	bl	8002eb4 <HAL_GetTick>
 8004362:	1b43      	subs	r3, r0, r5
 8004364:	2b02      	cmp	r3, #2
 8004366:	d9f5      	bls.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x9c>
        return HAL_TIMEOUT;
 8004368:	2003      	movs	r0, #3
 800436a:	e7b1      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800436c:	4b25      	ldr	r3, [pc, #148]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800436e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004370:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004374:	d014      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004376:	68e2      	ldr	r2, [r4, #12]
 8004378:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800437c:	429a      	cmp	r2, r3
 800437e:	d00f      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004380:	4b20      	ldr	r3, [pc, #128]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004382:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004384:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004388:	491d      	ldr	r1, [pc, #116]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800438a:	2001      	movs	r0, #1
 800438c:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004390:	2000      	movs	r0, #0
 8004392:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8004396:	671a      	str	r2, [r3, #112]	@ 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439a:	f013 0f01 	tst.w	r3, #1
 800439e:	d113      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043a0:	68e3      	ldr	r3, [r4, #12]
 80043a2:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80043a6:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80043aa:	d01e      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x132>
 80043ac:	4a15      	ldr	r2, [pc, #84]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80043ae:	6893      	ldr	r3, [r2, #8]
 80043b0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80043b4:	6093      	str	r3, [r2, #8]
 80043b6:	4913      	ldr	r1, [pc, #76]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80043b8:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 80043ba:	68e2      	ldr	r2, [r4, #12]
 80043bc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80043c0:	4313      	orrs	r3, r2
 80043c2:	670b      	str	r3, [r1, #112]	@ 0x70
  return HAL_OK;
 80043c4:	2000      	movs	r0, #0
 80043c6:	e783      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 80043c8:	f7fe fd74 	bl	8002eb4 <HAL_GetTick>
 80043cc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d2:	f013 0f02 	tst.w	r3, #2
 80043d6:	d1e3      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d8:	f7fe fd6c 	bl	8002eb4 <HAL_GetTick>
 80043dc:	1b40      	subs	r0, r0, r5
 80043de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80043e2:	4298      	cmp	r0, r3
 80043e4:	d9f3      	bls.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x116>
            return HAL_TIMEOUT;
 80043e6:	2003      	movs	r0, #3
 80043e8:	e772      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ea:	4906      	ldr	r1, [pc, #24]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80043ec:	688a      	ldr	r2, [r1, #8]
 80043ee:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 80043f2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80043f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043fa:	4313      	orrs	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]
 80043fe:	e7da      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004400:	42470000 	.word	0x42470000
 8004404:	40023800 	.word	0x40023800
 8004408:	40007000 	.word	0x40007000

0800440c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004410:	6803      	ldr	r3, [r0, #0]
 8004412:	4a0a      	ldr	r2, [pc, #40]	@ (800443c <HAL_RTC_WaitForSynchro+0x30>)
 8004414:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004416:	f7fe fd4d 	bl	8002eb4 <HAL_GetTick>
 800441a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f013 0f20 	tst.w	r3, #32
 8004424:	d107      	bne.n	8004436 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004426:	f7fe fd45 	bl	8002eb4 <HAL_GetTick>
 800442a:	1b40      	subs	r0, r0, r5
 800442c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004430:	d9f4      	bls.n	800441c <HAL_RTC_WaitForSynchro+0x10>
    {
      return HAL_TIMEOUT;
 8004432:	2003      	movs	r0, #3
 8004434:	e000      	b.n	8004438 <HAL_RTC_WaitForSynchro+0x2c>
    }
  }

  return HAL_OK;
 8004436:	2000      	movs	r0, #0
}
 8004438:	bd38      	pop	{r3, r4, r5, pc}
 800443a:	bf00      	nop
 800443c:	00017f5f 	.word	0x00017f5f

08004440 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004440:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004442:	6803      	ldr	r3, [r0, #0]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800444a:	d002      	beq.n	8004452 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 800444c:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 800444e:	4628      	mov	r0, r5
 8004450:	bd70      	pop	{r4, r5, r6, pc}
 8004452:	4604      	mov	r4, r0
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800445a:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800445c:	f7fe fd2a 	bl	8002eb4 <HAL_GetTick>
 8004460:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 8004462:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800446c:	d1ef      	bne.n	800444e <RTC_EnterInitMode+0xe>
 800446e:	2d00      	cmp	r5, #0
 8004470:	d1ed      	bne.n	800444e <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004472:	f7fe fd1f 	bl	8002eb4 <HAL_GetTick>
 8004476:	1b83      	subs	r3, r0, r6
 8004478:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800447c:	d9f2      	bls.n	8004464 <RTC_EnterInitMode+0x24>
        hrtc->State = HAL_RTC_STATE_ERROR;
 800447e:	2304      	movs	r3, #4
 8004480:	7763      	strb	r3, [r4, #29]
        status = HAL_ERROR;
 8004482:	2501      	movs	r5, #1
 8004484:	e7ee      	b.n	8004464 <RTC_EnterInitMode+0x24>

08004486 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004486:	6802      	ldr	r2, [r0, #0]
 8004488:	68d3      	ldr	r3, [r2, #12]
 800448a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800448e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004490:	6803      	ldr	r3, [r0, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f013 0f20 	tst.w	r3, #32
 8004498:	d001      	beq.n	800449e <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800449a:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 800449c:	4770      	bx	lr
{
 800449e:	b510      	push	{r4, lr}
 80044a0:	4604      	mov	r4, r0
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044a2:	f7ff ffb3 	bl	800440c <HAL_RTC_WaitForSynchro>
 80044a6:	b110      	cbz	r0, 80044ae <RTC_ExitInitMode+0x28>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80044a8:	2304      	movs	r3, #4
 80044aa:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 80044ac:	2001      	movs	r0, #1
}
 80044ae:	bd10      	pop	{r4, pc}

080044b0 <HAL_RTC_Init>:
  if (hrtc == NULL)
 80044b0:	2800      	cmp	r0, #0
 80044b2:	d04a      	beq.n	800454a <HAL_RTC_Init+0x9a>
{
 80044b4:	b510      	push	{r4, lr}
 80044b6:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80044b8:	7f43      	ldrb	r3, [r0, #29]
 80044ba:	b153      	cbz	r3, 80044d2 <HAL_RTC_Init+0x22>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80044bc:	2302      	movs	r3, #2
 80044be:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80044c0:	6823      	ldr	r3, [r4, #0]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	f012 0f10 	tst.w	r2, #16
 80044c8:	d007      	beq.n	80044da <HAL_RTC_Init+0x2a>
    status = HAL_OK;
 80044ca:	2000      	movs	r0, #0
    hrtc->State = HAL_RTC_STATE_READY;
 80044cc:	2301      	movs	r3, #1
 80044ce:	7763      	strb	r3, [r4, #29]
}
 80044d0:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80044d2:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80044d4:	f7fe f994 	bl	8002800 <HAL_RTC_MspInit>
 80044d8:	e7f0      	b.n	80044bc <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044da:	22ca      	movs	r2, #202	@ 0xca
 80044dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	2253      	movs	r2, #83	@ 0x53
 80044e2:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 80044e4:	4620      	mov	r0, r4
 80044e6:	f7ff ffab 	bl	8004440 <RTC_EnterInitMode>
    if (status == HAL_OK)
 80044ea:	b128      	cbz	r0, 80044f8 <HAL_RTC_Init+0x48>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	22ff      	movs	r2, #255	@ 0xff
 80044f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 80044f2:	2800      	cmp	r0, #0
 80044f4:	d1ec      	bne.n	80044d0 <HAL_RTC_Init+0x20>
 80044f6:	e7e9      	b.n	80044cc <HAL_RTC_Init+0x1c>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80044f8:	6822      	ldr	r2, [r4, #0]
 80044fa:	6893      	ldr	r3, [r2, #8]
 80044fc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004500:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004504:	6093      	str	r3, [r2, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004506:	6821      	ldr	r1, [r4, #0]
 8004508:	688a      	ldr	r2, [r1, #8]
 800450a:	6863      	ldr	r3, [r4, #4]
 800450c:	6920      	ldr	r0, [r4, #16]
 800450e:	4303      	orrs	r3, r0
 8004510:	6960      	ldr	r0, [r4, #20]
 8004512:	4303      	orrs	r3, r0
 8004514:	4313      	orrs	r3, r2
 8004516:	608b      	str	r3, [r1, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	68e2      	ldr	r2, [r4, #12]
 800451c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800451e:	6822      	ldr	r2, [r4, #0]
 8004520:	6913      	ldr	r3, [r2, #16]
 8004522:	68a1      	ldr	r1, [r4, #8]
 8004524:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004528:	6113      	str	r3, [r2, #16]
      status = RTC_ExitInitMode(hrtc);
 800452a:	4620      	mov	r0, r4
 800452c:	f7ff ffab 	bl	8004486 <RTC_ExitInitMode>
    if (status == HAL_OK)
 8004530:	2800      	cmp	r0, #0
 8004532:	d1db      	bne.n	80044ec <HAL_RTC_Init+0x3c>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004534:	6822      	ldr	r2, [r4, #0]
 8004536:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004538:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800453c:	6413      	str	r3, [r2, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800453e:	6822      	ldr	r2, [r4, #0]
 8004540:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004542:	69a1      	ldr	r1, [r4, #24]
 8004544:	430b      	orrs	r3, r1
 8004546:	6413      	str	r3, [r2, #64]	@ 0x40
 8004548:	e7d0      	b.n	80044ec <HAL_RTC_Init+0x3c>
    return HAL_ERROR;
 800454a:	2001      	movs	r0, #1
}
 800454c:	4770      	bx	lr

0800454e <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 800454e:	2300      	movs	r3, #0

  while (number >= 10U)
 8004550:	e002      	b.n	8004558 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8004552:	3301      	adds	r3, #1
    number -= 10U;
 8004554:	380a      	subs	r0, #10
 8004556:	b2c0      	uxtb	r0, r0
  while (number >= 10U)
 8004558:	2809      	cmp	r0, #9
 800455a:	d8fa      	bhi.n	8004552 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	b2db      	uxtb	r3, r3
}
 8004560:	4318      	orrs	r0, r3
 8004562:	4770      	bx	lr

08004564 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8004564:	7f03      	ldrb	r3, [r0, #28]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d05a      	beq.n	8004620 <HAL_RTC_SetTime+0xbc>
{
 800456a:	b570      	push	{r4, r5, r6, lr}
 800456c:	4604      	mov	r4, r0
 800456e:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 8004570:	2301      	movs	r3, #1
 8004572:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004574:	2302      	movs	r3, #2
 8004576:	7743      	strb	r3, [r0, #29]
  if (Format == RTC_FORMAT_BIN)
 8004578:	bb32      	cbnz	r2, 80045c8 <HAL_RTC_SetTime+0x64>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800457a:	6803      	ldr	r3, [r0, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004582:	d101      	bne.n	8004588 <HAL_RTC_SetTime+0x24>
      sTime->TimeFormat = 0x00U;
 8004584:	2300      	movs	r3, #0
 8004586:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004588:	7830      	ldrb	r0, [r6, #0]
 800458a:	f7ff ffe0 	bl	800454e <RTC_ByteToBcd2>
 800458e:	0405      	lsls	r5, r0, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004590:	7870      	ldrb	r0, [r6, #1]
 8004592:	f7ff ffdc 	bl	800454e <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004596:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800459a:	78b0      	ldrb	r0, [r6, #2]
 800459c:	f7ff ffd7 	bl	800454e <RTC_ByteToBcd2>
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045a0:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80045a2:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80045a4:	ea45 5583 	orr.w	r5, r5, r3, lsl #22
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	22ca      	movs	r2, #202	@ 0xca
 80045ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	2253      	movs	r2, #83	@ 0x53
 80045b2:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 80045b4:	4620      	mov	r0, r4
 80045b6:	f7ff ff43 	bl	8004440 <RTC_EnterInitMode>
  if (status == HAL_OK)
 80045ba:	b1b8      	cbz	r0, 80045ec <HAL_RTC_SetTime+0x88>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	22ff      	movs	r2, #255	@ 0xff
 80045c0:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 80045c2:	2300      	movs	r3, #0
 80045c4:	7723      	strb	r3, [r4, #28]
}
 80045c6:	bd70      	pop	{r4, r5, r6, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045c8:	6803      	ldr	r3, [r0, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80045d0:	d101      	bne.n	80045d6 <HAL_RTC_SetTime+0x72>
      sTime->TimeFormat = 0x00U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80045d6:	7833      	ldrb	r3, [r6, #0]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80045d8:	7875      	ldrb	r5, [r6, #1]
 80045da:	022d      	lsls	r5, r5, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80045dc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t) sTime->Seconds)                       | \
 80045e0:	78b3      	ldrb	r3, [r6, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80045e2:	431d      	orrs	r5, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80045e4:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80045e6:	ea45 5583 	orr.w	r5, r5, r3, lsl #22
 80045ea:	e7dd      	b.n	80045a8 <HAL_RTC_SetTime+0x44>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	f005 357f 	and.w	r5, r5, #2139062143	@ 0x7f7f7f7f
 80045f2:	f025 45fe 	bic.w	r5, r5, #2130706432	@ 0x7f000000
 80045f6:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80045f8:	6822      	ldr	r2, [r4, #0]
 80045fa:	6893      	ldr	r3, [r2, #8]
 80045fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004600:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004602:	6821      	ldr	r1, [r4, #0]
 8004604:	688b      	ldr	r3, [r1, #8]
 8004606:	68f2      	ldr	r2, [r6, #12]
 8004608:	6930      	ldr	r0, [r6, #16]
 800460a:	4302      	orrs	r2, r0
 800460c:	4313      	orrs	r3, r2
 800460e:	608b      	str	r3, [r1, #8]
    status = RTC_ExitInitMode(hrtc);
 8004610:	4620      	mov	r0, r4
 8004612:	f7ff ff38 	bl	8004486 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8004616:	2800      	cmp	r0, #0
 8004618:	d1d0      	bne.n	80045bc <HAL_RTC_SetTime+0x58>
    hrtc->State = HAL_RTC_STATE_READY;
 800461a:	2301      	movs	r3, #1
 800461c:	7763      	strb	r3, [r4, #29]
 800461e:	e7cd      	b.n	80045bc <HAL_RTC_SetTime+0x58>
  __HAL_LOCK(hrtc);
 8004620:	2002      	movs	r0, #2
}
 8004622:	4770      	bx	lr

08004624 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8004624:	7f03      	ldrb	r3, [r0, #28]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d048      	beq.n	80046bc <HAL_RTC_SetDate+0x98>
{
 800462a:	b570      	push	{r4, r5, r6, lr}
 800462c:	4604      	mov	r4, r0
 800462e:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 8004630:	2301      	movs	r3, #1
 8004632:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004634:	2302      	movs	r3, #2
 8004636:	7743      	strb	r3, [r0, #29]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004638:	b1ca      	cbz	r2, 800466e <HAL_RTC_SetDate+0x4a>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800463a:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800463c:	784d      	ldrb	r5, [r1, #1]
 800463e:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004640:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  ((uint32_t) sDate->Date)                      | \
 8004644:	788b      	ldrb	r3, [r1, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004646:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004648:	780b      	ldrb	r3, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800464a:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	22ca      	movs	r2, #202	@ 0xca
 8004652:	625a      	str	r2, [r3, #36]	@ 0x24
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	2253      	movs	r2, #83	@ 0x53
 8004658:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 800465a:	4620      	mov	r0, r4
 800465c:	f7ff fef0 	bl	8004440 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004660:	b1f0      	cbz	r0, 80046a0 <HAL_RTC_SetDate+0x7c>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	22ff      	movs	r2, #255	@ 0xff
 8004666:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8004668:	2300      	movs	r3, #0
 800466a:	7723      	strb	r3, [r4, #28]
}
 800466c:	bd70      	pop	{r4, r5, r6, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800466e:	784b      	ldrb	r3, [r1, #1]
 8004670:	f013 0f10 	tst.w	r3, #16
 8004674:	d003      	beq.n	800467e <HAL_RTC_SetDate+0x5a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004676:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 800467a:	330a      	adds	r3, #10
 800467c:	704b      	strb	r3, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800467e:	78f0      	ldrb	r0, [r6, #3]
 8004680:	f7ff ff65 	bl	800454e <RTC_ByteToBcd2>
 8004684:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004686:	7870      	ldrb	r0, [r6, #1]
 8004688:	f7ff ff61 	bl	800454e <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800468c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004690:	78b0      	ldrb	r0, [r6, #2]
 8004692:	f7ff ff5c 	bl	800454e <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004696:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004698:	7833      	ldrb	r3, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800469a:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
 800469e:	e7d6      	b.n	800464e <HAL_RTC_SetDate+0x2a>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	f025 457f 	bic.w	r5, r5, #4278190080	@ 0xff000000
 80046a6:	f025 05c0 	bic.w	r5, r5, #192	@ 0xc0
 80046aa:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 80046ac:	4620      	mov	r0, r4
 80046ae:	f7ff feea 	bl	8004486 <RTC_ExitInitMode>
  if (status == HAL_OK)
 80046b2:	2800      	cmp	r0, #0
 80046b4:	d1d5      	bne.n	8004662 <HAL_RTC_SetDate+0x3e>
    hrtc->State = HAL_RTC_STATE_READY;
 80046b6:	2301      	movs	r3, #1
 80046b8:	7763      	strb	r3, [r4, #29]
 80046ba:	e7d2      	b.n	8004662 <HAL_RTC_SetDate+0x3e>
  __HAL_LOCK(hrtc);
 80046bc:	2002      	movs	r0, #2
}
 80046be:	4770      	bx	lr

080046c0 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80046c0:	0903      	lsrs	r3, r0, #4
 80046c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80046c6:	f000 000f 	and.w	r0, r0, #15
 80046ca:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80046ce:	b2c0      	uxtb	r0, r0
 80046d0:	4770      	bx	lr

080046d2 <HAL_RTC_GetTime>:
{
 80046d2:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80046d4:	6803      	ldr	r3, [r0, #0]
 80046d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d8:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80046da:	6803      	ldr	r3, [r0, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80046e2:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80046e4:	6803      	ldr	r3, [r0, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80046e8:	f3c3 4005 	ubfx	r0, r3, #16, #6
 80046ec:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80046ee:	f3c3 2606 	ubfx	r6, r3, #8, #7
 80046f2:	704e      	strb	r6, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80046f4:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
 80046f8:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80046fa:	f3c3 5380 	ubfx	r3, r3, #22, #1
 80046fe:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8004700:	b95a      	cbnz	r2, 800471a <HAL_RTC_GetTime+0x48>
 8004702:	460c      	mov	r4, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004704:	f7ff ffdc 	bl	80046c0 <RTC_Bcd2ToByte>
 8004708:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800470a:	4630      	mov	r0, r6
 800470c:	f7ff ffd8 	bl	80046c0 <RTC_Bcd2ToByte>
 8004710:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004712:	4628      	mov	r0, r5
 8004714:	f7ff ffd4 	bl	80046c0 <RTC_Bcd2ToByte>
 8004718:	70a0      	strb	r0, [r4, #2]
}
 800471a:	2000      	movs	r0, #0
 800471c:	bd70      	pop	{r4, r5, r6, pc}

0800471e <HAL_RTC_GetDate>:
{
 800471e:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004720:	6803      	ldr	r3, [r0, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004724:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8004728:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800472a:	f3c3 2604 	ubfx	r6, r3, #8, #5
 800472e:	704e      	strb	r6, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004730:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 8004734:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004736:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800473a:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 800473c:	b95a      	cbnz	r2, 8004756 <HAL_RTC_GetDate+0x38>
 800473e:	460c      	mov	r4, r1
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004740:	f7ff ffbe 	bl	80046c0 <RTC_Bcd2ToByte>
 8004744:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004746:	4630      	mov	r0, r6
 8004748:	f7ff ffba 	bl	80046c0 <RTC_Bcd2ToByte>
 800474c:	7060      	strb	r0, [r4, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800474e:	4628      	mov	r0, r5
 8004750:	f7ff ffb6 	bl	80046c0 <RTC_Bcd2ToByte>
 8004754:	70a0      	strb	r0, [r4, #2]
}
 8004756:	2000      	movs	r0, #0
 8004758:	bd70      	pop	{r4, r5, r6, pc}
	...

0800475c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800475c:	b570      	push	{r4, r5, r6, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004766:	6800      	ldr	r0, [r0, #0]
 8004768:	f001 ff77 	bl	800665a <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800476c:	4605      	mov	r5, r0
 800476e:	b110      	cbz	r0, 8004776 <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 8004770:	4628      	mov	r0, r5
 8004772:	b002      	add	sp, #8
 8004774:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004776:	6820      	ldr	r0, [r4, #0]
 8004778:	f002 fa80 	bl	8006c7c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800477c:	b938      	cbnz	r0, 800478e <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800477e:	2301      	movs	r3, #1
 8004780:	64a3      	str	r3, [r4, #72]	@ 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004782:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004784:	2b01      	cmp	r3, #1
 8004786:	d00b      	beq.n	80047a0 <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004788:	462e      	mov	r6, r5
 800478a:	4628      	mov	r0, r5
 800478c:	e014      	b.n	80047b8 <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800478e:	2300      	movs	r3, #0
 8004790:	64a3      	str	r3, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004792:	6820      	ldr	r0, [r4, #0]
 8004794:	f001 ff61 	bl	800665a <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004798:	2800      	cmp	r0, #0
 800479a:	d0f2      	beq.n	8004782 <SD_PowerON+0x26>
      return errorstate;
 800479c:	4605      	mov	r5, r0
 800479e:	e7e7      	b.n	8004770 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80047a0:	2100      	movs	r1, #0
 80047a2:	6820      	ldr	r0, [r4, #0]
 80047a4:	f002 f8c0 	bl	8006928 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d0ed      	beq.n	8004788 <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80047b0:	e7de      	b.n	8004770 <SD_PowerON+0x14>
    count++;
 80047b2:	9b01      	ldr	r3, [sp, #4]
 80047b4:	3301      	adds	r3, #1
 80047b6:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80047b8:	9a01      	ldr	r2, [sp, #4]
 80047ba:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80047be:	429a      	cmp	r2, r3
 80047c0:	d813      	bhi.n	80047ea <SD_PowerON+0x8e>
 80047c2:	b996      	cbnz	r6, 80047ea <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80047c4:	2100      	movs	r1, #0
 80047c6:	6820      	ldr	r0, [r4, #0]
 80047c8:	f002 f8ae 	bl	8006928 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80047cc:	b9e0      	cbnz	r0, 8004808 <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80047ce:	4912      	ldr	r1, [pc, #72]	@ (8004818 <SD_PowerON+0xbc>)
 80047d0:	6820      	ldr	r0, [r4, #0]
 80047d2:	f002 f99f 	bl	8006b14 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80047d6:	4606      	mov	r6, r0
 80047d8:	b9c0      	cbnz	r0, 800480c <SD_PowerON+0xb0>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80047da:	2100      	movs	r1, #0
 80047dc:	6820      	ldr	r0, [r4, #0]
 80047de:	f001 ff27 	bl	8006630 <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80047e2:	0fc3      	lsrs	r3, r0, #31
 80047e4:	d0e5      	beq.n	80047b2 <SD_PowerON+0x56>
 80047e6:	461e      	mov	r6, r3
 80047e8:	e7e3      	b.n	80047b2 <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80047ea:	9a01      	ldr	r2, [sp, #4]
 80047ec:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d80e      	bhi.n	8004812 <SD_PowerON+0xb6>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80047f4:	f010 4380 	ands.w	r3, r0, #1073741824	@ 0x40000000
 80047f8:	d002      	beq.n	8004800 <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80047fa:	2301      	movs	r3, #1
 80047fc:	6463      	str	r3, [r4, #68]	@ 0x44
 80047fe:	e7b7      	b.n	8004770 <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDSC;
 8004800:	2200      	movs	r2, #0
 8004802:	6462      	str	r2, [r4, #68]	@ 0x44
  return HAL_SD_ERROR_NONE;
 8004804:	461d      	mov	r5, r3
 8004806:	e7b3      	b.n	8004770 <SD_PowerON+0x14>
      return errorstate;
 8004808:	4605      	mov	r5, r0
 800480a:	e7b1      	b.n	8004770 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800480c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8004810:	e7ae      	b.n	8004770 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004812:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 8004816:	e7ab      	b.n	8004770 <SD_PowerON+0x14>
 8004818:	c1100000 	.word	0xc1100000

0800481c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800481c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800481e:	b089      	sub	sp, #36	@ 0x24
 8004820:	4604      	mov	r4, r0
 8004822:	460f      	mov	r7, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004824:	f7fe fb46 	bl	8002eb4 <HAL_GetTick>
 8004828:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 800482a:	2300      	movs	r3, #0
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004830:	2108      	movs	r1, #8
 8004832:	6820      	ldr	r0, [r4, #0]
 8004834:	f001 ffce 	bl	80067d4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004838:	4605      	mov	r5, r0
 800483a:	b110      	cbz	r0, 8004842 <SD_FindSCR+0x26>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800483c:	4628      	mov	r0, r5
 800483e:	b009      	add	sp, #36	@ 0x24
 8004840:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004842:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8004844:	0409      	lsls	r1, r1, #16
 8004846:	6820      	ldr	r0, [r4, #0]
 8004848:	f002 f86e 	bl	8006928 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800484c:	4605      	mov	r5, r0
 800484e:	2800      	cmp	r0, #0
 8004850:	d1f4      	bne.n	800483c <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004852:	f04f 33ff 	mov.w	r3, #4294967295
 8004856:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8004858:	2308      	movs	r3, #8
 800485a:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800485c:	2330      	movs	r3, #48	@ 0x30
 800485e:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004860:	2302      	movs	r3, #2
 8004862:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004864:	2300      	movs	r3, #0
 8004866:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004868:	2301      	movs	r3, #1
 800486a:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800486c:	a902      	add	r1, sp, #8
 800486e:	6820      	ldr	r0, [r4, #0]
 8004870:	f001 fee1 	bl	8006636 <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004874:	6820      	ldr	r0, [r4, #0]
 8004876:	f002 f887 	bl	8006988 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800487a:	4605      	mov	r5, r0
 800487c:	b158      	cbz	r0, 8004896 <SD_FindSCR+0x7a>
 800487e:	e7dd      	b.n	800483c <SD_FindSCR+0x20>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004880:	f001 feb1 	bl	80065e6 <SDIO_ReadFIFO>
 8004884:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
      index++;
 8004888:	3501      	adds	r5, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800488a:	f7fe fb13 	bl	8002eb4 <HAL_GetTick>
 800488e:	1b83      	subs	r3, r0, r6
 8004890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004894:	d043      	beq.n	800491e <SD_FindSCR+0x102>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004896:	6820      	ldr	r0, [r4, #0]
 8004898:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800489a:	f013 0f2a 	tst.w	r3, #42	@ 0x2a
 800489e:	d107      	bne.n	80048b0 <SD_FindSCR+0x94>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80048a0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80048a2:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 80048a6:	d1eb      	bne.n	8004880 <SD_FindSCR+0x64>
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80048a8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80048aa:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80048ae:	d1ec      	bne.n	800488a <SD_FindSCR+0x6e>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80048b0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80048b2:	f013 0f08 	tst.w	r3, #8
 80048b6:	d129      	bne.n	800490c <SD_FindSCR+0xf0>
 80048b8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80048ba:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80048be:	d125      	bne.n	800490c <SD_FindSCR+0xf0>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80048c0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80048c2:	f013 0f02 	tst.w	r3, #2
 80048c6:	d124      	bne.n	8004912 <SD_FindSCR+0xf6>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80048c8:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 80048ca:	f015 0520 	ands.w	r5, r5, #32
 80048ce:	d123      	bne.n	8004918 <SD_FindSCR+0xfc>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80048d0:	f240 533a 	movw	r3, #1338	@ 0x53a
 80048d4:	6383      	str	r3, [r0, #56]	@ 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80048d6:	9a01      	ldr	r2, [sp, #4]
 80048d8:	0213      	lsls	r3, r2, #8
 80048da:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80048de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80048e2:	0a11      	lsrs	r1, r2, #8
 80048e4:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80048e8:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80048ea:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80048ee:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80048f0:	9a00      	ldr	r2, [sp, #0]
 80048f2:	0213      	lsls	r3, r2, #8
 80048f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80048f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80048fc:	0a11      	lsrs	r1, r2, #8
 80048fe:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004902:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004904:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004908:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 800490a:	e797      	b.n	800483c <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800490c:	2508      	movs	r5, #8
 800490e:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004910:	e794      	b.n	800483c <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004912:	2502      	movs	r5, #2
 8004914:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004916:	e791      	b.n	800483c <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004918:	2520      	movs	r5, #32
 800491a:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800491c:	e78e      	b.n	800483c <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 800491e:	f04f 4500 	mov.w	r5, #2147483648	@ 0x80000000
 8004922:	e78b      	b.n	800483c <SD_FindSCR+0x20>

08004924 <SD_WideBus_Enable>:
{
 8004924:	b510      	push	{r4, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 800492a:	2100      	movs	r1, #0
 800492c:	9100      	str	r1, [sp, #0]
 800492e:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004930:	6800      	ldr	r0, [r0, #0]
 8004932:	f001 fe7d 	bl	8006630 <SDIO_GetResponse>
 8004936:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 800493a:	d113      	bne.n	8004964 <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 800493c:	4669      	mov	r1, sp
 800493e:	4620      	mov	r0, r4
 8004940:	f7ff ff6c 	bl	800481c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004944:	b980      	cbnz	r0, 8004968 <SD_WideBus_Enable+0x44>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004946:	9b01      	ldr	r3, [sp, #4]
 8004948:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800494c:	d00e      	beq.n	800496c <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800494e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8004950:	0409      	lsls	r1, r1, #16
 8004952:	6820      	ldr	r0, [r4, #0]
 8004954:	f001 ffe8 	bl	8006928 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004958:	b930      	cbnz	r0, 8004968 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800495a:	2102      	movs	r1, #2
 800495c:	6820      	ldr	r0, [r4, #0]
 800495e:	f001 fffb 	bl	8006958 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004962:	e001      	b.n	8004968 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004964:	f44f 6000 	mov.w	r0, #2048	@ 0x800
}
 8004968:	b002      	add	sp, #8
 800496a:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800496c:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8004970:	e7fa      	b.n	8004968 <SD_WideBus_Enable+0x44>

08004972 <SD_WideBus_Disable>:
{
 8004972:	b510      	push	{r4, lr}
 8004974:	b082      	sub	sp, #8
 8004976:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8004978:	2100      	movs	r1, #0
 800497a:	9100      	str	r1, [sp, #0]
 800497c:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800497e:	6800      	ldr	r0, [r0, #0]
 8004980:	f001 fe56 	bl	8006630 <SDIO_GetResponse>
 8004984:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 8004988:	d113      	bne.n	80049b2 <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 800498a:	4669      	mov	r1, sp
 800498c:	4620      	mov	r0, r4
 800498e:	f7ff ff45 	bl	800481c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004992:	b980      	cbnz	r0, 80049b6 <SD_WideBus_Disable+0x44>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004994:	9b01      	ldr	r3, [sp, #4]
 8004996:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800499a:	d00e      	beq.n	80049ba <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800499c:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800499e:	0409      	lsls	r1, r1, #16
 80049a0:	6820      	ldr	r0, [r4, #0]
 80049a2:	f001 ffc1 	bl	8006928 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80049a6:	b930      	cbnz	r0, 80049b6 <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80049a8:	2100      	movs	r1, #0
 80049aa:	6820      	ldr	r0, [r4, #0]
 80049ac:	f001 ffd4 	bl	8006958 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 80049b0:	e001      	b.n	80049b6 <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80049b2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
}
 80049b6:	b002      	add	sp, #8
 80049b8:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80049ba:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80049be:	e7fa      	b.n	80049b6 <SD_WideBus_Disable+0x44>

080049c0 <SD_SendStatus>:
{
 80049c0:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 80049c2:	b181      	cbz	r1, 80049e6 <SD_SendStatus+0x26>
 80049c4:	4604      	mov	r4, r0
 80049c6:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80049c8:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80049ca:	0409      	lsls	r1, r1, #16
 80049cc:	6800      	ldr	r0, [r0, #0]
 80049ce:	f001 fff3 	bl	80069b8 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80049d2:	4605      	mov	r5, r0
 80049d4:	b108      	cbz	r0, 80049da <SD_SendStatus+0x1a>
}
 80049d6:	4628      	mov	r0, r5
 80049d8:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80049da:	2100      	movs	r1, #0
 80049dc:	6820      	ldr	r0, [r4, #0]
 80049de:	f001 fe27 	bl	8006630 <SDIO_GetResponse>
 80049e2:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 80049e4:	e7f7      	b.n	80049d6 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 80049e6:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
 80049ea:	e7f4      	b.n	80049d6 <SD_SendStatus+0x16>

080049ec <HAL_SD_ReadBlocks>:
{
 80049ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f0:	b087      	sub	sp, #28
 80049f2:	4605      	mov	r5, r0
 80049f4:	460c      	mov	r4, r1
 80049f6:	4616      	mov	r6, r2
 80049f8:	469b      	mov	fp, r3
 80049fa:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80049fe:	f7fe fa59 	bl	8002eb4 <HAL_GetTick>
  if(NULL == pData)
 8004a02:	2c00      	cmp	r4, #0
 8004a04:	d036      	beq.n	8004a74 <HAL_SD_ReadBlocks+0x88>
 8004a06:	4681      	mov	r9, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8004a08:	f895 7034 	ldrb.w	r7, [r5, #52]	@ 0x34
 8004a0c:	b2ff      	uxtb	r7, r7
 8004a0e:	2f01      	cmp	r7, #1
 8004a10:	f040 8109 	bne.w	8004c26 <HAL_SD_ReadBlocks+0x23a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a14:	2300      	movs	r3, #0
 8004a16:	63ab      	str	r3, [r5, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004a18:	eb06 030b 	add.w	r3, r6, fp
 8004a1c:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d82e      	bhi.n	8004a80 <HAL_SD_ReadBlocks+0x94>
    hsd->State = HAL_SD_STATE_BUSY;
 8004a22:	2303      	movs	r3, #3
 8004a24:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 8004a28:	682b      	ldr	r3, [r5, #0]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004a2e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d000      	beq.n	8004a36 <HAL_SD_ReadBlocks+0x4a>
      add *= 512U;
 8004a34:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004a36:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3a:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004a3c:	ea4f 234b 	mov.w	r3, fp, lsl #9
 8004a40:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004a42:	2390      	movs	r3, #144	@ 0x90
 8004a44:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004a46:	2302      	movs	r3, #2
 8004a48:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	9305      	str	r3, [sp, #20]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004a52:	4669      	mov	r1, sp
 8004a54:	6828      	ldr	r0, [r5, #0]
 8004a56:	f001 fdee 	bl	8006636 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8004a5a:	f1bb 0f01 	cmp.w	fp, #1
 8004a5e:	d914      	bls.n	8004a8a <HAL_SD_ReadBlocks+0x9e>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004a60:	2302      	movs	r3, #2
 8004a62:	632b      	str	r3, [r5, #48]	@ 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004a64:	4631      	mov	r1, r6
 8004a66:	6828      	ldr	r0, [r5, #0]
 8004a68:	f001 fee4 	bl	8006834 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a6c:	b9a0      	cbnz	r0, 8004a98 <HAL_SD_ReadBlocks+0xac>
    dataremaining = config.DataLength;
 8004a6e:	f8dd 8004 	ldr.w	r8, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004a72:	e038      	b.n	8004ae6 <HAL_SD_ReadBlocks+0xfa>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004a74:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8004a76:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a7a:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 8004a7c:	2701      	movs	r7, #1
 8004a7e:	e0d7      	b.n	8004c30 <HAL_SD_ReadBlocks+0x244>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004a80:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8004a82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a86:	63ab      	str	r3, [r5, #56]	@ 0x38
      return HAL_ERROR;
 8004a88:	e0d2      	b.n	8004c30 <HAL_SD_ReadBlocks+0x244>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	632b      	str	r3, [r5, #48]	@ 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004a8e:	4631      	mov	r1, r6
 8004a90:	6828      	ldr	r0, [r5, #0]
 8004a92:	f001 feb7 	bl	8006804 <SDMMC_CmdReadSingleBlock>
 8004a96:	e7e9      	b.n	8004a6c <HAL_SD_ReadBlocks+0x80>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a98:	682b      	ldr	r3, [r5, #0]
 8004a9a:	4a67      	ldr	r2, [pc, #412]	@ (8004c38 <HAL_SD_ReadBlocks+0x24c>)
 8004a9c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004a9e:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8004aa0:	4303      	orrs	r3, r0
 8004aa2:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 8004aae:	e0bf      	b.n	8004c30 <HAL_SD_ReadBlocks+0x244>
          data = SDIO_ReadFIFO(hsd->Instance);
 8004ab0:	6828      	ldr	r0, [r5, #0]
 8004ab2:	f001 fd98 	bl	80065e6 <SDIO_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004ab6:	7020      	strb	r0, [r4, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004ab8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8004abc:	7063      	strb	r3, [r4, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004abe:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8004ac2:	70a3      	strb	r3, [r4, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004ac4:	0e00      	lsrs	r0, r0, #24
 8004ac6:	70e0      	strb	r0, [r4, #3]
          tempbuff++;
 8004ac8:	3404      	adds	r4, #4
          dataremaining--;
 8004aca:	f1a8 0804 	sub.w	r8, r8, #4
        for(count = 0U; count < 8U; count++)
 8004ace:	3601      	adds	r6, #1
 8004ad0:	2e07      	cmp	r6, #7
 8004ad2:	d9ed      	bls.n	8004ab0 <HAL_SD_ReadBlocks+0xc4>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004ad4:	f7fe f9ee 	bl	8002eb4 <HAL_GetTick>
 8004ad8:	eba0 0009 	sub.w	r0, r0, r9
 8004adc:	4550      	cmp	r0, sl
 8004ade:	d210      	bcs.n	8004b02 <HAL_SD_ReadBlocks+0x116>
 8004ae0:	f1ba 0f00 	cmp.w	sl, #0
 8004ae4:	d00d      	beq.n	8004b02 <HAL_SD_ReadBlocks+0x116>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004ae6:	6828      	ldr	r0, [r5, #0]
 8004ae8:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 8004aea:	f240 332a 	movw	r3, #810	@ 0x32a
 8004aee:	401e      	ands	r6, r3
 8004af0:	d115      	bne.n	8004b1e <HAL_SD_ReadBlocks+0x132>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004af2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8004af4:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004af8:	d0ec      	beq.n	8004ad4 <HAL_SD_ReadBlocks+0xe8>
 8004afa:	f1b8 0f00 	cmp.w	r8, #0
 8004afe:	d0e9      	beq.n	8004ad4 <HAL_SD_ReadBlocks+0xe8>
 8004b00:	e7e6      	b.n	8004ad0 <HAL_SD_ReadBlocks+0xe4>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b02:	682b      	ldr	r3, [r5, #0]
 8004b04:	4a4c      	ldr	r2, [pc, #304]	@ (8004c38 <HAL_SD_ReadBlocks+0x24c>)
 8004b06:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004b08:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8004b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b0e:	63ab      	str	r3, [r5, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004b10:	2301      	movs	r3, #1
 8004b12:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004b16:	2300      	movs	r3, #0
 8004b18:	632b      	str	r3, [r5, #48]	@ 0x30
        return HAL_TIMEOUT;
 8004b1a:	2703      	movs	r7, #3
 8004b1c:	e088      	b.n	8004c30 <HAL_SD_ReadBlocks+0x244>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004b1e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8004b20:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004b24:	d005      	beq.n	8004b32 <HAL_SD_ReadBlocks+0x146>
 8004b26:	f1bb 0f01 	cmp.w	fp, #1
 8004b2a:	d902      	bls.n	8004b32 <HAL_SD_ReadBlocks+0x146>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004b2c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d13c      	bne.n	8004bac <HAL_SD_ReadBlocks+0x1c0>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8004b32:	682b      	ldr	r3, [r5, #0]
 8004b34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b36:	f012 0f08 	tst.w	r2, #8
 8004b3a:	d148      	bne.n	8004bce <HAL_SD_ReadBlocks+0x1e2>
 8004b3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b3e:	f412 7f00 	tst.w	r2, #512	@ 0x200
 8004b42:	d144      	bne.n	8004bce <HAL_SD_ReadBlocks+0x1e2>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004b44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b46:	f012 0f02 	tst.w	r2, #2
 8004b4a:	d14c      	bne.n	8004be6 <HAL_SD_ReadBlocks+0x1fa>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004b4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b4e:	f012 0f20 	tst.w	r2, #32
 8004b52:	d154      	bne.n	8004bfe <HAL_SD_ReadBlocks+0x212>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8004b54:	6828      	ldr	r0, [r5, #0]
 8004b56:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8004b58:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8004b5c:	d05b      	beq.n	8004c16 <HAL_SD_ReadBlocks+0x22a>
 8004b5e:	f1b8 0f00 	cmp.w	r8, #0
 8004b62:	d058      	beq.n	8004c16 <HAL_SD_ReadBlocks+0x22a>
      data = SDIO_ReadFIFO(hsd->Instance);
 8004b64:	f001 fd3f 	bl	80065e6 <SDIO_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004b68:	7020      	strb	r0, [r4, #0]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004b6a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8004b6e:	7063      	strb	r3, [r4, #1]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004b70:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8004b74:	70a3      	strb	r3, [r4, #2]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004b76:	0e00      	lsrs	r0, r0, #24
 8004b78:	70e0      	strb	r0, [r4, #3]
      tempbuff++;
 8004b7a:	3404      	adds	r4, #4
      dataremaining--;
 8004b7c:	f1a8 0804 	sub.w	r8, r8, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004b80:	f7fe f998 	bl	8002eb4 <HAL_GetTick>
 8004b84:	eba0 0009 	sub.w	r0, r0, r9
 8004b88:	4550      	cmp	r0, sl
 8004b8a:	d202      	bcs.n	8004b92 <HAL_SD_ReadBlocks+0x1a6>
 8004b8c:	f1ba 0f00 	cmp.w	sl, #0
 8004b90:	d1e0      	bne.n	8004b54 <HAL_SD_ReadBlocks+0x168>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b92:	682b      	ldr	r3, [r5, #0]
 8004b94:	4a28      	ldr	r2, [pc, #160]	@ (8004c38 <HAL_SD_ReadBlocks+0x24c>)
 8004b96:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004b98:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8004b9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b9e:	63ab      	str	r3, [r5, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	632b      	str	r3, [r5, #48]	@ 0x30
        return HAL_ERROR;
 8004baa:	e041      	b.n	8004c30 <HAL_SD_ReadBlocks+0x244>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004bac:	f001 fe8a 	bl	80068c4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2800      	cmp	r0, #0
 8004bb4:	d0bd      	beq.n	8004b32 <HAL_SD_ReadBlocks+0x146>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004bb6:	682a      	ldr	r2, [r5, #0]
 8004bb8:	491f      	ldr	r1, [pc, #124]	@ (8004c38 <HAL_SD_ReadBlocks+0x24c>)
 8004bba:	6391      	str	r1, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8004bbc:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	63ab      	str	r3, [r5, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	632b      	str	r3, [r5, #48]	@ 0x30
          return HAL_ERROR;
 8004bcc:	e030      	b.n	8004c30 <HAL_SD_ReadBlocks+0x244>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004bce:	4a1a      	ldr	r2, [pc, #104]	@ (8004c38 <HAL_SD_ReadBlocks+0x24c>)
 8004bd0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004bd2:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8004bd4:	f043 0308 	orr.w	r3, r3, #8
 8004bd8:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004be0:	2300      	movs	r3, #0
 8004be2:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 8004be4:	e024      	b.n	8004c30 <HAL_SD_ReadBlocks+0x244>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004be6:	4a14      	ldr	r2, [pc, #80]	@ (8004c38 <HAL_SD_ReadBlocks+0x24c>)
 8004be8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004bea:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8004bec:	f043 0302 	orr.w	r3, r3, #2
 8004bf0:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 8004bfc:	e018      	b.n	8004c30 <HAL_SD_ReadBlocks+0x244>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8004c38 <HAL_SD_ReadBlocks+0x24c>)
 8004c00:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004c02:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8004c04:	f043 0320 	orr.w	r3, r3, #32
 8004c08:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c10:	2300      	movs	r3, #0
 8004c12:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 8004c14:	e00c      	b.n	8004c30 <HAL_SD_ReadBlocks+0x244>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004c16:	f240 533a 	movw	r3, #1338	@ 0x53a
 8004c1a:	6383      	str	r3, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    return HAL_OK;
 8004c22:	2700      	movs	r7, #0
 8004c24:	e004      	b.n	8004c30 <HAL_SD_ReadBlocks+0x244>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004c26:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8004c28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c2c:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 8004c2e:	2701      	movs	r7, #1
}
 8004c30:	4638      	mov	r0, r7
 8004c32:	b007      	add	sp, #28
 8004c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c38:	004005ff 	.word	0x004005ff

08004c3c <HAL_SD_WriteBlocks>:
{
 8004c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c40:	b08b      	sub	sp, #44	@ 0x2c
 8004c42:	4605      	mov	r5, r0
 8004c44:	460c      	mov	r4, r1
 8004c46:	4616      	mov	r6, r2
 8004c48:	469b      	mov	fp, r3
 8004c4a:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
  uint32_t tickstart = HAL_GetTick();
 8004c4e:	f7fe f931 	bl	8002eb4 <HAL_GetTick>
  if(NULL == pData)
 8004c52:	2c00      	cmp	r4, #0
 8004c54:	d037      	beq.n	8004cc6 <HAL_SD_WriteBlocks+0x8a>
 8004c56:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8004c58:	f895 7034 	ldrb.w	r7, [r5, #52]	@ 0x34
 8004c5c:	b2ff      	uxtb	r7, r7
 8004c5e:	2f01      	cmp	r7, #1
 8004c60:	f040 80e6 	bne.w	8004e30 <HAL_SD_WriteBlocks+0x1f4>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c64:	2300      	movs	r3, #0
 8004c66:	63ab      	str	r3, [r5, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004c68:	eb06 030b 	add.w	r3, r6, fp
 8004c6c:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d82f      	bhi.n	8004cd2 <HAL_SD_WriteBlocks+0x96>
    hsd->State = HAL_SD_STATE_BUSY;
 8004c72:	2303      	movs	r3, #3
 8004c74:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004c7e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d000      	beq.n	8004c86 <HAL_SD_WriteBlocks+0x4a>
      add *= 512U;
 8004c84:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004c86:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8a:	9304      	str	r3, [sp, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004c8c:	ea4f 234b 	mov.w	r3, fp, lsl #9
 8004c90:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004c92:	2390      	movs	r3, #144	@ 0x90
 8004c94:	9306      	str	r3, [sp, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004c96:	2300      	movs	r3, #0
 8004c98:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004c9a:	9308      	str	r3, [sp, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	9309      	str	r3, [sp, #36]	@ 0x24
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004ca0:	a904      	add	r1, sp, #16
 8004ca2:	6828      	ldr	r0, [r5, #0]
 8004ca4:	f001 fcc7 	bl	8006636 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8004ca8:	f1bb 0f01 	cmp.w	fp, #1
 8004cac:	d916      	bls.n	8004cdc <HAL_SD_WriteBlocks+0xa0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004cae:	2320      	movs	r3, #32
 8004cb0:	632b      	str	r3, [r5, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004cb2:	4631      	mov	r1, r6
 8004cb4:	6828      	ldr	r0, [r5, #0]
 8004cb6:	f001 fded 	bl	8006894 <SDMMC_CmdWriteMultiBlock>
 8004cba:	9001      	str	r0, [sp, #4]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cbc:	9b01      	ldr	r3, [sp, #4]
 8004cbe:	b9ab      	cbnz	r3, 8004cec <HAL_SD_WriteBlocks+0xb0>
    dataremaining = config.DataLength;
 8004cc0:	f8dd 9014 	ldr.w	r9, [sp, #20]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004cc4:	e040      	b.n	8004d48 <HAL_SD_WriteBlocks+0x10c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004cc6:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8004cc8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ccc:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 8004cce:	2701      	movs	r7, #1
 8004cd0:	e0b3      	b.n	8004e3a <HAL_SD_WriteBlocks+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004cd2:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8004cd4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004cd8:	63ab      	str	r3, [r5, #56]	@ 0x38
      return HAL_ERROR;
 8004cda:	e0ae      	b.n	8004e3a <HAL_SD_WriteBlocks+0x1fe>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004cdc:	2310      	movs	r3, #16
 8004cde:	632b      	str	r3, [r5, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004ce0:	4631      	mov	r1, r6
 8004ce2:	6828      	ldr	r0, [r5, #0]
 8004ce4:	f001 fdbe 	bl	8006864 <SDMMC_CmdWriteSingleBlock>
 8004ce8:	9001      	str	r0, [sp, #4]
 8004cea:	e7e7      	b.n	8004cbc <HAL_SD_WriteBlocks+0x80>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004cec:	682b      	ldr	r3, [r5, #0]
 8004cee:	4a55      	ldr	r2, [pc, #340]	@ (8004e44 <HAL_SD_WriteBlocks+0x208>)
 8004cf0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004cf2:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8004cf4:	9a01      	ldr	r2, [sp, #4]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 8004d04:	e099      	b.n	8004e3a <HAL_SD_WriteBlocks+0x1fe>
          data = (uint32_t)(*tempbuff);
 8004d06:	7823      	ldrb	r3, [r4, #0]
 8004d08:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004d0a:	7862      	ldrb	r2, [r4, #1]
 8004d0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004d10:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004d12:	78a2      	ldrb	r2, [r4, #2]
 8004d14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d18:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004d1a:	78e2      	ldrb	r2, [r4, #3]
 8004d1c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004d20:	9303      	str	r3, [sp, #12]
          tempbuff++;
 8004d22:	3404      	adds	r4, #4
          dataremaining--;
 8004d24:	f1a9 0904 	sub.w	r9, r9, #4
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004d28:	a903      	add	r1, sp, #12
 8004d2a:	6828      	ldr	r0, [r5, #0]
 8004d2c:	f001 fc5e 	bl	80065ec <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004d30:	3601      	adds	r6, #1
 8004d32:	2e07      	cmp	r6, #7
 8004d34:	d9e7      	bls.n	8004d06 <HAL_SD_WriteBlocks+0xca>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004d36:	f7fe f8bd 	bl	8002eb4 <HAL_GetTick>
 8004d3a:	eba0 0008 	sub.w	r0, r0, r8
 8004d3e:	4550      	cmp	r0, sl
 8004d40:	d210      	bcs.n	8004d64 <HAL_SD_WriteBlocks+0x128>
 8004d42:	f1ba 0f00 	cmp.w	sl, #0
 8004d46:	d00d      	beq.n	8004d64 <HAL_SD_WriteBlocks+0x128>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004d48:	6828      	ldr	r0, [r5, #0]
 8004d4a:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 8004d4c:	f240 331a 	movw	r3, #794	@ 0x31a
 8004d50:	401e      	ands	r6, r3
 8004d52:	d115      	bne.n	8004d80 <HAL_SD_WriteBlocks+0x144>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004d54:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8004d56:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8004d5a:	d0ec      	beq.n	8004d36 <HAL_SD_WriteBlocks+0xfa>
 8004d5c:	f1b9 0f00 	cmp.w	r9, #0
 8004d60:	d0e9      	beq.n	8004d36 <HAL_SD_WriteBlocks+0xfa>
 8004d62:	e7e6      	b.n	8004d32 <HAL_SD_WriteBlocks+0xf6>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d64:	682b      	ldr	r3, [r5, #0]
 8004d66:	4a37      	ldr	r2, [pc, #220]	@ (8004e44 <HAL_SD_WriteBlocks+0x208>)
 8004d68:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8004d6a:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8004d6c:	9a01      	ldr	r2, [sp, #4]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	63ab      	str	r3, [r5, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004d72:	2301      	movs	r3, #1
 8004d74:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	632b      	str	r3, [r5, #48]	@ 0x30
        return HAL_TIMEOUT;
 8004d7c:	2703      	movs	r7, #3
 8004d7e:	e05c      	b.n	8004e3a <HAL_SD_WriteBlocks+0x1fe>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004d80:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8004d82:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004d86:	d005      	beq.n	8004d94 <HAL_SD_WriteBlocks+0x158>
 8004d88:	f1bb 0f01 	cmp.w	fp, #1
 8004d8c:	d902      	bls.n	8004d94 <HAL_SD_WriteBlocks+0x158>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004d8e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d11c      	bne.n	8004dce <HAL_SD_WriteBlocks+0x192>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d98:	f012 0f08 	tst.w	r2, #8
 8004d9c:	d128      	bne.n	8004df0 <HAL_SD_WriteBlocks+0x1b4>
 8004d9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004da0:	f412 7f00 	tst.w	r2, #512	@ 0x200
 8004da4:	d124      	bne.n	8004df0 <HAL_SD_WriteBlocks+0x1b4>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004da6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004da8:	f012 0f02 	tst.w	r2, #2
 8004dac:	d12c      	bne.n	8004e08 <HAL_SD_WriteBlocks+0x1cc>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004dae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004db0:	f012 0f10 	tst.w	r2, #16
 8004db4:	d034      	beq.n	8004e20 <HAL_SD_WriteBlocks+0x1e4>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004db6:	4a23      	ldr	r2, [pc, #140]	@ (8004e44 <HAL_SD_WriteBlocks+0x208>)
 8004db8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004dba:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8004dbc:	f043 0310 	orr.w	r3, r3, #16
 8004dc0:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 8004dcc:	e035      	b.n	8004e3a <HAL_SD_WriteBlocks+0x1fe>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004dce:	f001 fd79 	bl	80068c4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	d0dd      	beq.n	8004d94 <HAL_SD_WriteBlocks+0x158>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004dd8:	682a      	ldr	r2, [r5, #0]
 8004dda:	491a      	ldr	r1, [pc, #104]	@ (8004e44 <HAL_SD_WriteBlocks+0x208>)
 8004ddc:	6391      	str	r1, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8004dde:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8004de0:	4313      	orrs	r3, r2
 8004de2:	63ab      	str	r3, [r5, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004de4:	2301      	movs	r3, #1
 8004de6:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004dea:	2300      	movs	r3, #0
 8004dec:	632b      	str	r3, [r5, #48]	@ 0x30
          return HAL_ERROR;
 8004dee:	e024      	b.n	8004e3a <HAL_SD_WriteBlocks+0x1fe>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004df0:	4a14      	ldr	r2, [pc, #80]	@ (8004e44 <HAL_SD_WriteBlocks+0x208>)
 8004df2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004df4:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8004df6:	f043 0308 	orr.w	r3, r3, #8
 8004dfa:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 8004e06:	e018      	b.n	8004e3a <HAL_SD_WriteBlocks+0x1fe>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e08:	4a0e      	ldr	r2, [pc, #56]	@ (8004e44 <HAL_SD_WriteBlocks+0x208>)
 8004e0a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e0c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8004e0e:	f043 0302 	orr.w	r3, r3, #2
 8004e12:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e14:	2301      	movs	r3, #1
 8004e16:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 8004e1e:	e00c      	b.n	8004e3a <HAL_SD_WriteBlocks+0x1fe>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004e20:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004e24:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004e26:	2301      	movs	r3, #1
 8004e28:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    return HAL_OK;
 8004e2c:	2700      	movs	r7, #0
 8004e2e:	e004      	b.n	8004e3a <HAL_SD_WriteBlocks+0x1fe>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004e30:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8004e32:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e36:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 8004e38:	2701      	movs	r7, #1
}
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	b00b      	add	sp, #44	@ 0x2c
 8004e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e42:	bf00      	nop
 8004e44:	004005ff 	.word	0x004005ff

08004e48 <HAL_SD_ReadBlocks_DMA>:
{
 8004e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e4c:	b087      	sub	sp, #28
 8004e4e:	4604      	mov	r4, r0
  if(NULL == pData)
 8004e50:	b191      	cbz	r1, 8004e78 <HAL_SD_ReadBlocks_DMA+0x30>
 8004e52:	4616      	mov	r6, r2
 8004e54:	461f      	mov	r7, r3
 8004e56:	460a      	mov	r2, r1
  if(hsd->State == HAL_SD_STATE_READY)
 8004e58:	f890 5034 	ldrb.w	r5, [r0, #52]	@ 0x34
 8004e5c:	b2ed      	uxtb	r5, r5
 8004e5e:	2d01      	cmp	r5, #1
 8004e60:	d17f      	bne.n	8004f62 <HAL_SD_ReadBlocks_DMA+0x11a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e62:	2300      	movs	r3, #0
 8004e64:	6383      	str	r3, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004e66:	19f0      	adds	r0, r6, r7
 8004e68:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004e6a:	4298      	cmp	r0, r3
 8004e6c:	d90a      	bls.n	8004e84 <HAL_SD_ReadBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004e6e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004e70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004e74:	63a3      	str	r3, [r4, #56]	@ 0x38
      return HAL_ERROR;
 8004e76:	e075      	b.n	8004f64 <HAL_SD_ReadBlocks_DMA+0x11c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004e78:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8004e7a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e7e:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8004e80:	2501      	movs	r5, #1
 8004e82:	e06f      	b.n	8004f64 <HAL_SD_ReadBlocks_DMA+0x11c>
    hsd->State = HAL_SD_STATE_BUSY;
 8004e84:	2303      	movs	r3, #3
 8004e86:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	62d9      	str	r1, [r3, #44]	@ 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004e90:	6820      	ldr	r0, [r4, #0]
 8004e92:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8004e94:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8004e98:	f043 0302 	orr.w	r3, r3, #2
 8004e9c:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004e9e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ea0:	4833      	ldr	r0, [pc, #204]	@ (8004f70 <HAL_SD_ReadBlocks_DMA+0x128>)
 8004ea2:	63d8      	str	r0, [r3, #60]	@ 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004ea4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ea6:	4833      	ldr	r0, [pc, #204]	@ (8004f74 <HAL_SD_ReadBlocks_DMA+0x12c>)
 8004ea8:	64d8      	str	r0, [r3, #76]	@ 0x4c
    hsd->hdmarx->XferAbortCallback = NULL;
 8004eaa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004eac:	6519      	str	r1, [r3, #80]	@ 0x50
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004eae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004eb0:	6099      	str	r1, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004eb2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8004eb4:	6801      	ldr	r1, [r0, #0]
 8004eb6:	680b      	ldr	r3, [r1, #0]
 8004eb8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004ebc:	6880      	ldr	r0, [r0, #8]
 8004ebe:	4303      	orrs	r3, r0
 8004ec0:	600b      	str	r3, [r1, #0]
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004ec2:	6821      	ldr	r1, [r4, #0]
 8004ec4:	ea4f 2947 	mov.w	r9, r7, lsl #9
 8004ec8:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8004ecc:	3180      	adds	r1, #128	@ 0x80
 8004ece:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8004ed0:	f7fe fc1e 	bl	8003710 <HAL_DMA_Start_IT>
 8004ed4:	4680      	mov	r8, r0
 8004ed6:	bb68      	cbnz	r0, 8004f34 <HAL_SD_ReadBlocks_DMA+0xec>
      __HAL_SD_DMA_ENABLE(hsd);
 8004ed8:	4b27      	ldr	r3, [pc, #156]	@ (8004f78 <HAL_SD_ReadBlocks_DMA+0x130>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	f8c3 258c 	str.w	r2, [r3, #1420]	@ 0x58c
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004ee0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d000      	beq.n	8004ee8 <HAL_SD_ReadBlocks_DMA+0xa0>
        add *= 512U;
 8004ee6:	0276      	lsls	r6, r6, #9
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8004eec:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004eee:	f8cd 9004 	str.w	r9, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004ef2:	2390      	movs	r3, #144	@ 0x90
 8004ef4:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004efe:	2301      	movs	r3, #1
 8004f00:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004f02:	4669      	mov	r1, sp
 8004f04:	6820      	ldr	r0, [r4, #0]
 8004f06:	f001 fb96 	bl	8006636 <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 8004f0a:	2f01      	cmp	r7, #1
 8004f0c:	d922      	bls.n	8004f54 <HAL_SD_ReadBlocks_DMA+0x10c>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004f0e:	2382      	movs	r3, #130	@ 0x82
 8004f10:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004f12:	4631      	mov	r1, r6
 8004f14:	6820      	ldr	r0, [r4, #0]
 8004f16:	f001 fc8d 	bl	8006834 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 8004f1a:	b338      	cbz	r0, 8004f6c <HAL_SD_ReadBlocks_DMA+0x124>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	4a17      	ldr	r2, [pc, #92]	@ (8004f7c <HAL_SD_ReadBlocks_DMA+0x134>)
 8004f20:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8004f22:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004f24:	4303      	orrs	r3, r0
 8004f26:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	6323      	str	r3, [r4, #48]	@ 0x30
        return HAL_ERROR;
 8004f32:	e017      	b.n	8004f64 <HAL_SD_ReadBlocks_DMA+0x11c>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004f34:	6822      	ldr	r2, [r4, #0]
 8004f36:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8004f38:	f423 7395 	bic.w	r3, r3, #298	@ 0x12a
 8004f3c:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	4a0e      	ldr	r2, [pc, #56]	@ (8004f7c <HAL_SD_ReadBlocks_DMA+0x134>)
 8004f42:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004f44:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004f46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f4a:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 8004f52:	e007      	b.n	8004f64 <HAL_SD_ReadBlocks_DMA+0x11c>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004f54:	2381      	movs	r3, #129	@ 0x81
 8004f56:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004f58:	4631      	mov	r1, r6
 8004f5a:	6820      	ldr	r0, [r4, #0]
 8004f5c:	f001 fc52 	bl	8006804 <SDMMC_CmdReadSingleBlock>
 8004f60:	e7db      	b.n	8004f1a <HAL_SD_ReadBlocks_DMA+0xd2>
    return HAL_BUSY;
 8004f62:	2502      	movs	r5, #2
}
 8004f64:	4628      	mov	r0, r5
 8004f66:	b007      	add	sp, #28
 8004f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_OK;
 8004f6c:	4645      	mov	r5, r8
 8004f6e:	e7f9      	b.n	8004f64 <HAL_SD_ReadBlocks_DMA+0x11c>
 8004f70:	08004f89 	.word	0x08004f89
 8004f74:	08005471 	.word	0x08005471
 8004f78:	42258000 	.word	0x42258000
 8004f7c:	004005ff 	.word	0x004005ff

08004f80 <HAL_SD_GetState>:
  return hsd->State;
 8004f80:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
}
 8004f84:	4770      	bx	lr

08004f86 <HAL_SD_ErrorCallback>:
}
 8004f86:	4770      	bx	lr

08004f88 <SD_DMAReceiveCplt>:
{
 8004f88:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004f8a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004f8c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004f8e:	2b82      	cmp	r3, #130	@ 0x82
 8004f90:	d011      	beq.n	8004fb6 <SD_DMAReceiveCplt+0x2e>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004f92:	6822      	ldr	r2, [r4, #0]
 8004f94:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004f96:	f023 0308 	bic.w	r3, r3, #8
 8004f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004fa2:	639a      	str	r2, [r3, #56]	@ 0x38
  hsd->State = HAL_SD_STATE_READY;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004faa:	2300      	movs	r3, #0
 8004fac:	6323      	str	r3, [r4, #48]	@ 0x30
  HAL_SD_RxCpltCallback(hsd);
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f001 febf 	bl	8006d32 <HAL_SD_RxCpltCallback>
}
 8004fb4:	bd10      	pop	{r4, pc}
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004fb6:	6820      	ldr	r0, [r4, #0]
 8004fb8:	f001 fc84 	bl	80068c4 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	d0e7      	beq.n	8004f92 <SD_DMAReceiveCplt+0xa>
      hsd->ErrorCode |= errorstate;
 8004fc2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	63a3      	str	r3, [r4, #56]	@ 0x38
      HAL_SD_ErrorCallback(hsd);
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f7ff ffdc 	bl	8004f86 <HAL_SD_ErrorCallback>
 8004fce:	e7e0      	b.n	8004f92 <SD_DMAReceiveCplt+0xa>

08004fd0 <HAL_SD_GetCardCSD>:
{
 8004fd0:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004fd2:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8004fd4:	0f92      	lsrs	r2, r2, #30
 8004fd6:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004fd8:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8004fda:	f3c2 6283 	ubfx	r2, r2, #26, #4
 8004fde:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004fe0:	f890 2067 	ldrb.w	r2, [r0, #103]	@ 0x67
 8004fe4:	f002 0203 	and.w	r2, r2, #3
 8004fe8:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004fea:	f890 2066 	ldrb.w	r2, [r0, #102]	@ 0x66
 8004fee:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004ff0:	f890 2065 	ldrb.w	r2, [r0, #101]	@ 0x65
 8004ff4:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004ff6:	f890 2064 	ldrb.w	r2, [r0, #100]	@ 0x64
 8004ffa:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004ffc:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8004ffe:	0d12      	lsrs	r2, r2, #20
 8005000:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005002:	f8b0 206a 	ldrh.w	r2, [r0, #106]	@ 0x6a
 8005006:	f002 020f 	and.w	r2, r2, #15
 800500a:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800500c:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800500e:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8005012:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005014:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8005016:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800501a:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800501c:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800501e:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8005022:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005024:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8005026:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800502a:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800502c:	2200      	movs	r2, #0
 800502e:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8005030:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8005032:	2a00      	cmp	r2, #0
 8005034:	f040 8086 	bne.w	8005144 <HAL_SD_GetCardCSD+0x174>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005038:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800503a:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800503e:	ea02 0280 	and.w	r2, r2, r0, lsl #2
 8005042:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8005044:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8005048:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800504a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800504c:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8005050:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005052:	f893 206f 	ldrb.w	r2, [r3, #111]	@ 0x6f
 8005056:	f002 0207 	and.w	r2, r2, #7
 800505a:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800505c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800505e:	f3c2 5242 	ubfx	r2, r2, #21, #3
 8005062:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005064:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005066:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800506a:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800506c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800506e:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 8005072:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005074:	690a      	ldr	r2, [r1, #16]
 8005076:	3201      	adds	r2, #1
 8005078:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800507a:	7e08      	ldrb	r0, [r1, #24]
 800507c:	f000 0007 	and.w	r0, r0, #7
 8005080:	3002      	adds	r0, #2
 8005082:	4082      	lsls	r2, r0
 8005084:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005086:	f891 c008 	ldrb.w	ip, [r1, #8]
 800508a:	f00c 0c0f 	and.w	ip, ip, #15
 800508e:	2001      	movs	r0, #1
 8005090:	fa00 f00c 	lsl.w	r0, r0, ip
 8005094:	6598      	str	r0, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005096:	0a40      	lsrs	r0, r0, #9
 8005098:	fb00 f202 	mul.w	r2, r0, r2
 800509c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800509e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050a2:	661a      	str	r2, [r3, #96]	@ 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80050a4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80050a6:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80050aa:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80050ac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80050ae:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 80050b2:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80050b4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80050b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050ba:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80050bc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050be:	0fd2      	lsrs	r2, r2, #31
 80050c0:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80050c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050c4:	f3c2 7241 	ubfx	r2, r2, #29, #2
 80050c8:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80050ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050cc:	f3c2 6282 	ubfx	r2, r2, #26, #3
 80050d0:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80050d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050d4:	f3c2 5283 	ubfx	r2, r2, #22, #4
 80050d8:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80050da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050dc:	f3c2 5240 	ubfx	r2, r2, #21, #1
 80050e0:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 80050e4:	2000      	movs	r0, #0
 80050e6:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80050ea:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 80050ee:	f002 0201 	and.w	r2, r2, #1
 80050f2:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80050f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050f8:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80050fc:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005100:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005102:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8005106:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800510a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800510c:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8005110:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005114:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005116:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800511a:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800511e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005120:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8005124:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005128:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800512a:	f3c2 2201 	ubfx	r2, r2, #8, #2
 800512e:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005134:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8005138:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 800513c:	2301      	movs	r3, #1
 800513e:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
}
 8005142:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005144:	2a01      	cmp	r2, #1
 8005146:	d111      	bne.n	800516c <HAL_SD_GetCardCSD+0x19c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005148:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800514a:	0412      	lsls	r2, r2, #16
 800514c:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8005150:	f8b0 006e 	ldrh.w	r0, [r0, #110]	@ 0x6e
 8005154:	4302      	orrs	r2, r0
 8005156:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005158:	690a      	ldr	r2, [r1, #16]
 800515a:	3201      	adds	r2, #1
 800515c:	0292      	lsls	r2, r2, #10
 800515e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005160:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005162:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005166:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005168:	661a      	str	r2, [r3, #96]	@ 0x60
 800516a:	e79b      	b.n	80050a4 <HAL_SD_GetCardCSD+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800516c:	6802      	ldr	r2, [r0, #0]
 800516e:	4905      	ldr	r1, [pc, #20]	@ (8005184 <HAL_SD_GetCardCSD+0x1b4>)
 8005170:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005172:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8005174:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005178:	6382      	str	r2, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800517a:	2001      	movs	r0, #1
 800517c:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	004005ff 	.word	0x004005ff

08005188 <SD_InitCard>:
{
 8005188:	b570      	push	{r4, r5, r6, lr}
 800518a:	b090      	sub	sp, #64	@ 0x40
 800518c:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 800518e:	2301      	movs	r3, #1
 8005190:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005194:	6800      	ldr	r0, [r0, #0]
 8005196:	f001 fa32 	bl	80065fe <SDIO_GetPowerState>
 800519a:	2800      	cmp	r0, #0
 800519c:	d06c      	beq.n	8005278 <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800519e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d145      	bne.n	8005230 <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80051a4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d15d      	bne.n	8005266 <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80051aa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	d01d      	beq.n	80051ec <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 80051b0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80051b4:	6521      	str	r1, [r4, #80]	@ 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80051b6:	0409      	lsls	r1, r1, #16
 80051b8:	6820      	ldr	r0, [r4, #0]
 80051ba:	f001 fc70 	bl	8006a9e <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80051be:	4605      	mov	r5, r0
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d15b      	bne.n	800527c <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80051c4:	2100      	movs	r1, #0
 80051c6:	6820      	ldr	r0, [r4, #0]
 80051c8:	f001 fa32 	bl	8006630 <SDIO_GetResponse>
 80051cc:	6660      	str	r0, [r4, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80051ce:	2104      	movs	r1, #4
 80051d0:	6820      	ldr	r0, [r4, #0]
 80051d2:	f001 fa2d 	bl	8006630 <SDIO_GetResponse>
 80051d6:	66a0      	str	r0, [r4, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80051d8:	2108      	movs	r1, #8
 80051da:	6820      	ldr	r0, [r4, #0]
 80051dc:	f001 fa28 	bl	8006630 <SDIO_GetResponse>
 80051e0:	66e0      	str	r0, [r4, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80051e2:	210c      	movs	r1, #12
 80051e4:	6820      	ldr	r0, [r4, #0]
 80051e6:	f001 fa23 	bl	8006630 <SDIO_GetResponse>
 80051ea:	6720      	str	r0, [r4, #112]	@ 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80051ec:	2104      	movs	r1, #4
 80051ee:	6820      	ldr	r0, [r4, #0]
 80051f0:	f001 fa1e 	bl	8006630 <SDIO_GetResponse>
 80051f4:	0d00      	lsrs	r0, r0, #20
 80051f6:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80051f8:	a905      	add	r1, sp, #20
 80051fa:	4620      	mov	r0, r4
 80051fc:	f7ff fee8 	bl	8004fd0 <HAL_SD_GetCardCSD>
 8005200:	2800      	cmp	r0, #0
 8005202:	d13e      	bne.n	8005282 <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005204:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8005206:	0412      	lsls	r2, r2, #16
 8005208:	2300      	movs	r3, #0
 800520a:	6820      	ldr	r0, [r4, #0]
 800520c:	f001 fb74 	bl	80068f8 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005210:	4605      	mov	r5, r0
 8005212:	bb98      	cbnz	r0, 800527c <SD_InitCard+0xf4>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005214:	4623      	mov	r3, r4
 8005216:	f853 6b10 	ldr.w	r6, [r3], #16
 800521a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800521e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005222:	3404      	adds	r4, #4
 8005224:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8005228:	4630      	mov	r0, r6
 800522a:	f001 f9c3 	bl	80065b4 <SDIO_Init>
  return HAL_SD_ERROR_NONE;
 800522e:	e025      	b.n	800527c <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005230:	6820      	ldr	r0, [r4, #0]
 8005232:	f001 fc1f 	bl	8006a74 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005236:	4605      	mov	r5, r0
 8005238:	bb00      	cbnz	r0, 800527c <SD_InitCard+0xf4>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800523a:	2100      	movs	r1, #0
 800523c:	6820      	ldr	r0, [r4, #0]
 800523e:	f001 f9f7 	bl	8006630 <SDIO_GetResponse>
 8005242:	6760      	str	r0, [r4, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005244:	2104      	movs	r1, #4
 8005246:	6820      	ldr	r0, [r4, #0]
 8005248:	f001 f9f2 	bl	8006630 <SDIO_GetResponse>
 800524c:	67a0      	str	r0, [r4, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800524e:	2108      	movs	r1, #8
 8005250:	6820      	ldr	r0, [r4, #0]
 8005252:	f001 f9ed 	bl	8006630 <SDIO_GetResponse>
 8005256:	67e0      	str	r0, [r4, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005258:	210c      	movs	r1, #12
 800525a:	6820      	ldr	r0, [r4, #0]
 800525c:	f001 f9e8 	bl	8006630 <SDIO_GetResponse>
 8005260:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
 8005264:	e79e      	b.n	80051a4 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005266:	f10d 0112 	add.w	r1, sp, #18
 800526a:	6820      	ldr	r0, [r4, #0]
 800526c:	f001 fcbc 	bl	8006be8 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005270:	4605      	mov	r5, r0
 8005272:	2800      	cmp	r0, #0
 8005274:	d099      	beq.n	80051aa <SD_InitCard+0x22>
 8005276:	e001      	b.n	800527c <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005278:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
}
 800527c:	4628      	mov	r0, r5
 800527e:	b010      	add	sp, #64	@ 0x40
 8005280:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005282:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8005286:	e7f9      	b.n	800527c <SD_InitCard+0xf4>

08005288 <HAL_SD_InitCard>:
{
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	b08a      	sub	sp, #40	@ 0x28
 800528c:	4604      	mov	r4, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800528e:	2300      	movs	r3, #0
 8005290:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005292:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005294:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005296:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005298:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800529a:	2376      	movs	r3, #118	@ 0x76
 800529c:	9309      	str	r3, [sp, #36]	@ 0x24
  status = SDIO_Init(hsd->Instance, Init);
 800529e:	ab0a      	add	r3, sp, #40	@ 0x28
 80052a0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80052a4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80052a8:	ab04      	add	r3, sp, #16
 80052aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052ac:	6820      	ldr	r0, [r4, #0]
 80052ae:	f001 f981 	bl	80065b4 <SDIO_Init>
  if(status != HAL_OK)
 80052b2:	b118      	cbz	r0, 80052bc <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 80052b4:	2501      	movs	r5, #1
}
 80052b6:	4628      	mov	r0, r5
 80052b8:	b00a      	add	sp, #40	@ 0x28
 80052ba:	bd70      	pop	{r4, r5, r6, pc}
 80052bc:	4605      	mov	r5, r0
  __HAL_SD_DISABLE(hsd);
 80052be:	4e1a      	ldr	r6, [pc, #104]	@ (8005328 <HAL_SD_InitCard+0xa0>)
 80052c0:	2300      	movs	r3, #0
 80052c2:	f8c6 30a0 	str.w	r3, [r6, #160]	@ 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 80052c6:	6820      	ldr	r0, [r4, #0]
 80052c8:	f001 f995 	bl	80065f6 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80052cc:	2301      	movs	r3, #1
 80052ce:	f8c6 30a0 	str.w	r3, [r6, #160]	@ 0xa0
  HAL_Delay(2);
 80052d2:	2002      	movs	r0, #2
 80052d4:	f7fd fdf4 	bl	8002ec0 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 80052d8:	4620      	mov	r0, r4
 80052da:	f7ff fa3f 	bl	800475c <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 80052de:	b130      	cbz	r0, 80052ee <HAL_SD_InitCard+0x66>
    hsd->State = HAL_SD_STATE_READY;
 80052e0:	2501      	movs	r5, #1
 80052e2:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80052e6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80052e8:	4303      	orrs	r3, r0
 80052ea:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 80052ec:	e7e3      	b.n	80052b6 <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 80052ee:	4620      	mov	r0, r4
 80052f0:	f7ff ff4a 	bl	8005188 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 80052f4:	b130      	cbz	r0, 8005304 <HAL_SD_InitCard+0x7c>
    hsd->State = HAL_SD_STATE_READY;
 80052f6:	2501      	movs	r5, #1
 80052f8:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80052fc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80052fe:	4303      	orrs	r3, r0
 8005300:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 8005302:	e7d8      	b.n	80052b6 <HAL_SD_InitCard+0x2e>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005304:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005308:	6820      	ldr	r0, [r4, #0]
 800530a:	f001 fa63 	bl	80067d4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800530e:	2800      	cmp	r0, #0
 8005310:	d0d1      	beq.n	80052b6 <HAL_SD_InitCard+0x2e>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	4905      	ldr	r1, [pc, #20]	@ (800532c <HAL_SD_InitCard+0xa4>)
 8005316:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005318:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800531a:	4303      	orrs	r3, r0
 800531c:	63a3      	str	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800531e:	2501      	movs	r5, #1
 8005320:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8005324:	e7c7      	b.n	80052b6 <HAL_SD_InitCard+0x2e>
 8005326:	bf00      	nop
 8005328:	42258000 	.word	0x42258000
 800532c:	004005ff 	.word	0x004005ff

08005330 <HAL_SD_Init>:
  if(hsd == NULL)
 8005330:	b1a8      	cbz	r0, 800535e <HAL_SD_Init+0x2e>
{
 8005332:	b510      	push	{r4, lr}
 8005334:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 8005336:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 800533a:	b163      	cbz	r3, 8005356 <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 800533c:	2303      	movs	r3, #3
 800533e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005342:	4620      	mov	r0, r4
 8005344:	f7ff ffa0 	bl	8005288 <HAL_SD_InitCard>
 8005348:	b958      	cbnz	r0, 8005362 <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800534a:	63a0      	str	r0, [r4, #56]	@ 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800534c:	6320      	str	r0, [r4, #48]	@ 0x30
  hsd->State = HAL_SD_STATE_READY;
 800534e:	2301      	movs	r3, #1
 8005350:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8005354:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8005356:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 8005358:	f7fd fab4 	bl	80028c4 <HAL_SD_MspInit>
 800535c:	e7ee      	b.n	800533c <HAL_SD_Init+0xc>
    return HAL_ERROR;
 800535e:	2001      	movs	r0, #1
}
 8005360:	4770      	bx	lr
    return HAL_ERROR;
 8005362:	2001      	movs	r0, #1
 8005364:	e7f6      	b.n	8005354 <HAL_SD_Init+0x24>

08005366 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005366:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8005368:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800536a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800536c:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800536e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8005370:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005372:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8005374:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005376:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005378:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800537a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800537c:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800537e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8005380:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005382:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005384:	61cb      	str	r3, [r1, #28]
}
 8005386:	2000      	movs	r0, #0
 8005388:	4770      	bx	lr
	...

0800538c <HAL_SD_ConfigWideBusOperation>:
{
 800538c:	b530      	push	{r4, r5, lr}
 800538e:	b08b      	sub	sp, #44	@ 0x2c
 8005390:	4604      	mov	r4, r0
 8005392:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8005394:	2303      	movs	r3, #3
 8005396:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 800539a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800539c:	2b03      	cmp	r3, #3
 800539e:	d01c      	beq.n	80053da <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDIO_BUS_WIDE_8B)
 80053a0:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80053a4:	d008      	beq.n	80053b8 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80053a6:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80053aa:	d00a      	beq.n	80053c2 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80053ac:	b179      	cbz	r1, 80053ce <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80053ae:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80053b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80053b4:	6383      	str	r3, [r0, #56]	@ 0x38
 80053b6:	e014      	b.n	80053e2 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053b8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80053ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053be:	6383      	str	r3, [r0, #56]	@ 0x38
 80053c0:	e00f      	b.n	80053e2 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 80053c2:	f7ff faaf 	bl	8004924 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 80053c6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80053c8:	4303      	orrs	r3, r0
 80053ca:	63a3      	str	r3, [r4, #56]	@ 0x38
 80053cc:	e009      	b.n	80053e2 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 80053ce:	f7ff fad0 	bl	8004972 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 80053d2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80053d4:	4303      	orrs	r3, r0
 80053d6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80053d8:	e003      	b.n	80053e2 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053da:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80053dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053e0:	6383      	str	r3, [r0, #56]	@ 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80053e2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80053e4:	b1c3      	cbz	r3, 8005418 <HAL_SD_ConfigWideBusOperation+0x8c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	4a17      	ldr	r2, [pc, #92]	@ (8005448 <HAL_SD_ConfigWideBusOperation+0xbc>)
 80053ea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80053ec:	2501      	movs	r5, #1
 80053ee:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80053f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80053f6:	6820      	ldr	r0, [r4, #0]
 80053f8:	f001 f9ec 	bl	80067d4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80053fc:	b130      	cbz	r0, 800540c <HAL_SD_ConfigWideBusOperation+0x80>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	4911      	ldr	r1, [pc, #68]	@ (8005448 <HAL_SD_ConfigWideBusOperation+0xbc>)
 8005402:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005404:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005406:	4303      	orrs	r3, r0
 8005408:	63a3      	str	r3, [r4, #56]	@ 0x38
    status = HAL_ERROR;
 800540a:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 800540c:	2301      	movs	r3, #1
 800540e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8005412:	4628      	mov	r0, r5
 8005414:	b00b      	add	sp, #44	@ 0x2c
 8005416:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005418:	6863      	ldr	r3, [r4, #4]
 800541a:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800541c:	68a3      	ldr	r3, [r4, #8]
 800541e:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005420:	68e3      	ldr	r3, [r4, #12]
 8005422:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8005424:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005426:	6963      	ldr	r3, [r4, #20]
 8005428:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800542a:	69a3      	ldr	r3, [r4, #24]
 800542c:	9309      	str	r3, [sp, #36]	@ 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 800542e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005430:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8005434:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005438:	ab04      	add	r3, sp, #16
 800543a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800543c:	6820      	ldr	r0, [r4, #0]
 800543e:	f001 f8b9 	bl	80065b4 <SDIO_Init>
  HAL_StatusTypeDef status = HAL_OK;
 8005442:	2500      	movs	r5, #0
 8005444:	e7d5      	b.n	80053f2 <HAL_SD_ConfigWideBusOperation+0x66>
 8005446:	bf00      	nop
 8005448:	004005ff 	.word	0x004005ff

0800544c <HAL_SD_GetCardState>:
{
 800544c:	b510      	push	{r4, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8005452:	2300      	movs	r3, #0
 8005454:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 8005456:	a901      	add	r1, sp, #4
 8005458:	f7ff fab2 	bl	80049c0 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800545c:	b110      	cbz	r0, 8005464 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 800545e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005460:	4303      	orrs	r3, r0
 8005462:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8005464:	9801      	ldr	r0, [sp, #4]
 8005466:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800546a:	b002      	add	sp, #8
 800546c:	bd10      	pop	{r4, pc}
	...

08005470 <SD_DMAError>:
{
 8005470:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005472:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005474:	f7fe facc 	bl	8003a10 <HAL_DMA_GetError>
 8005478:	2802      	cmp	r0, #2
 800547a:	d00a      	beq.n	8005492 <SD_DMAError+0x22>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800547c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800547e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005480:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8005482:	6d52      	ldr	r2, [r2, #84]	@ 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005484:	2b01      	cmp	r3, #1
 8005486:	d005      	beq.n	8005494 <SD_DMAError+0x24>
 8005488:	2a01      	cmp	r2, #1
 800548a:	d003      	beq.n	8005494 <SD_DMAError+0x24>
    HAL_SD_ErrorCallback(hsd);
 800548c:	4620      	mov	r0, r4
 800548e:	f7ff fd7a 	bl	8004f86 <HAL_SD_ErrorCallback>
}
 8005492:	bd10      	pop	{r4, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	4a0f      	ldr	r2, [pc, #60]	@ (80054d4 <SD_DMAError+0x64>)
 8005498:	639a      	str	r2, [r3, #56]	@ 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800549a:	6822      	ldr	r2, [r4, #0]
 800549c:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800549e:	f423 739d 	bic.w	r3, r3, #314	@ 0x13a
 80054a2:	63d3      	str	r3, [r2, #60]	@ 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80054a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80054a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054aa:	63a3      	str	r3, [r4, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80054ac:	4620      	mov	r0, r4
 80054ae:	f7ff ffcd 	bl	800544c <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80054b2:	3805      	subs	r0, #5
 80054b4:	2801      	cmp	r0, #1
 80054b6:	d905      	bls.n	80054c4 <SD_DMAError+0x54>
      hsd->State= HAL_SD_STATE_READY;
 80054b8:	2301      	movs	r3, #1
 80054ba:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054be:	2300      	movs	r3, #0
 80054c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80054c2:	e7e3      	b.n	800548c <SD_DMAError+0x1c>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80054c4:	6820      	ldr	r0, [r4, #0]
 80054c6:	f001 f9fd 	bl	80068c4 <SDMMC_CmdStopTransfer>
 80054ca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80054cc:	4303      	orrs	r3, r0
 80054ce:	63a3      	str	r3, [r4, #56]	@ 0x38
 80054d0:	e7f2      	b.n	80054b8 <SD_DMAError+0x48>
 80054d2:	bf00      	nop
 80054d4:	004005ff 	.word	0x004005ff

080054d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	4605      	mov	r5, r0
 80054e0:	4688      	mov	r8, r1
 80054e2:	4617      	mov	r7, r2
 80054e4:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054e6:	f7fd fce5 	bl	8002eb4 <HAL_GetTick>
 80054ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054ec:	1a1b      	subs	r3, r3, r0
 80054ee:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80054f2:	f7fd fcdf 	bl	8002eb4 <HAL_GetTick>
 80054f6:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054f8:	4b28      	ldr	r3, [pc, #160]	@ (800559c <SPI_WaitFlagStateUntilTimeout+0xc4>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005500:	fb09 f303 	mul.w	r3, r9, r3
 8005504:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005506:	682b      	ldr	r3, [r5, #0]
 8005508:	689c      	ldr	r4, [r3, #8]
 800550a:	ea38 0404 	bics.w	r4, r8, r4
 800550e:	bf0c      	ite	eq
 8005510:	2301      	moveq	r3, #1
 8005512:	2300      	movne	r3, #0
 8005514:	42bb      	cmp	r3, r7
 8005516:	d03d      	beq.n	8005594 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005518:	f1b6 3fff 	cmp.w	r6, #4294967295
 800551c:	d0f3      	beq.n	8005506 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800551e:	f7fd fcc9 	bl	8002eb4 <HAL_GetTick>
 8005522:	eba0 000a 	sub.w	r0, r0, sl
 8005526:	4548      	cmp	r0, r9
 8005528:	d207      	bcs.n	800553a <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800552a:	9a01      	ldr	r2, [sp, #4]
 800552c:	b102      	cbz	r2, 8005530 <SPI_WaitFlagStateUntilTimeout+0x58>
 800552e:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8005530:	9b01      	ldr	r3, [sp, #4]
 8005532:	3b01      	subs	r3, #1
 8005534:	9301      	str	r3, [sp, #4]
 8005536:	4691      	mov	r9, r2
 8005538:	e7e5      	b.n	8005506 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800553a:	682a      	ldr	r2, [r5, #0]
 800553c:	6853      	ldr	r3, [r2, #4]
 800553e:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8005542:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005544:	686b      	ldr	r3, [r5, #4]
 8005546:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800554a:	d00b      	beq.n	8005564 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800554c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800554e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005552:	d014      	beq.n	800557e <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8005554:	2301      	movs	r3, #1
 8005556:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800555a:	2300      	movs	r3, #0
 800555c:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005560:	2003      	movs	r0, #3
 8005562:	e018      	b.n	8005596 <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005564:	68ab      	ldr	r3, [r5, #8]
 8005566:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800556a:	d002      	beq.n	8005572 <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800556c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005570:	d1ec      	bne.n	800554c <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8005572:	682a      	ldr	r2, [r5, #0]
 8005574:	6813      	ldr	r3, [r2, #0]
 8005576:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	e7e6      	b.n	800554c <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 800557e:	682a      	ldr	r2, [r5, #0]
 8005580:	6813      	ldr	r3, [r2, #0]
 8005582:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	682a      	ldr	r2, [r5, #0]
 800558a:	6813      	ldr	r3, [r2, #0]
 800558c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	e7df      	b.n	8005554 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8005594:	2000      	movs	r0, #0
}
 8005596:	b002      	add	sp, #8
 8005598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800559c:	20000034 	.word	0x20000034

080055a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055a0:	b570      	push	{r4, r5, r6, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	4604      	mov	r4, r0
 80055a6:	460d      	mov	r5, r1
 80055a8:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80055aa:	9200      	str	r2, [sp, #0]
 80055ac:	460b      	mov	r3, r1
 80055ae:	2201      	movs	r2, #1
 80055b0:	2102      	movs	r1, #2
 80055b2:	f7ff ff91 	bl	80054d8 <SPI_WaitFlagStateUntilTimeout>
 80055b6:	b9d0      	cbnz	r0, 80055ee <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80055b8:	4b17      	ldr	r3, [pc, #92]	@ (8005618 <SPI_EndRxTxTransaction+0x78>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a17      	ldr	r2, [pc, #92]	@ (800561c <SPI_EndRxTxTransaction+0x7c>)
 80055be:	fba2 2303 	umull	r2, r3, r2, r3
 80055c2:	0d5b      	lsrs	r3, r3, #21
 80055c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80055c8:	fb02 f303 	mul.w	r3, r2, r3
 80055cc:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055ce:	6863      	ldr	r3, [r4, #4]
 80055d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055d4:	d011      	beq.n	80055fa <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80055d6:	9b03      	ldr	r3, [sp, #12]
 80055d8:	b13b      	cbz	r3, 80055ea <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 80055da:	9b03      	ldr	r3, [sp, #12]
 80055dc:	3b01      	subs	r3, #1
 80055de:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80055e8:	d1f5      	bne.n	80055d6 <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 80055ea:	b004      	add	sp, #16
 80055ec:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ee:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80055f0:	f043 0320 	orr.w	r3, r3, #32
 80055f4:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 80055f6:	2003      	movs	r0, #3
 80055f8:	e7f7      	b.n	80055ea <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055fa:	9600      	str	r6, [sp, #0]
 80055fc:	462b      	mov	r3, r5
 80055fe:	2200      	movs	r2, #0
 8005600:	2180      	movs	r1, #128	@ 0x80
 8005602:	4620      	mov	r0, r4
 8005604:	f7ff ff68 	bl	80054d8 <SPI_WaitFlagStateUntilTimeout>
 8005608:	2800      	cmp	r0, #0
 800560a:	d0ee      	beq.n	80055ea <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800560c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800560e:	f043 0320 	orr.w	r3, r3, #32
 8005612:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005614:	2003      	movs	r0, #3
 8005616:	e7e8      	b.n	80055ea <SPI_EndRxTxTransaction+0x4a>
 8005618:	20000034 	.word	0x20000034
 800561c:	165e9f81 	.word	0x165e9f81

08005620 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005620:	2800      	cmp	r0, #0
 8005622:	d05a      	beq.n	80056da <HAL_SPI_Init+0xba>
{
 8005624:	b510      	push	{r4, lr}
 8005626:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005628:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800562a:	b933      	cbnz	r3, 800563a <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800562c:	6843      	ldr	r3, [r0, #4]
 800562e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005632:	d005      	beq.n	8005640 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005634:	2300      	movs	r3, #0
 8005636:	61c3      	str	r3, [r0, #28]
 8005638:	e002      	b.n	8005640 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800563a:	2300      	movs	r3, #0
 800563c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800563e:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005640:	2300      	movs	r3, #0
 8005642:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005644:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8005648:	2b00      	cmp	r3, #0
 800564a:	d040      	beq.n	80056ce <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 800564c:	2302      	movs	r3, #2
 800564e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8005652:	6822      	ldr	r2, [r4, #0]
 8005654:	6813      	ldr	r3, [r2, #0]
 8005656:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800565a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800565c:	6863      	ldr	r3, [r4, #4]
 800565e:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8005662:	68a2      	ldr	r2, [r4, #8]
 8005664:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8005668:	4313      	orrs	r3, r2
 800566a:	68e2      	ldr	r2, [r4, #12]
 800566c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005670:	4313      	orrs	r3, r2
 8005672:	6922      	ldr	r2, [r4, #16]
 8005674:	f002 0202 	and.w	r2, r2, #2
 8005678:	4313      	orrs	r3, r2
 800567a:	6962      	ldr	r2, [r4, #20]
 800567c:	f002 0201 	and.w	r2, r2, #1
 8005680:	4313      	orrs	r3, r2
 8005682:	69a2      	ldr	r2, [r4, #24]
 8005684:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8005688:	4313      	orrs	r3, r2
 800568a:	69e2      	ldr	r2, [r4, #28]
 800568c:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8005690:	4313      	orrs	r3, r2
 8005692:	6a22      	ldr	r2, [r4, #32]
 8005694:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005698:	4313      	orrs	r3, r2
 800569a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800569c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80056a0:	6821      	ldr	r1, [r4, #0]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80056a6:	8b63      	ldrh	r3, [r4, #26]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80056ae:	f002 0210 	and.w	r2, r2, #16
 80056b2:	6821      	ldr	r1, [r4, #0]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056b8:	6822      	ldr	r2, [r4, #0]
 80056ba:	69d3      	ldr	r3, [r2, #28]
 80056bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056c0:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056c2:	2000      	movs	r0, #0
 80056c4:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056c6:	2301      	movs	r3, #1
 80056c8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 80056cc:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80056ce:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 80056d2:	4620      	mov	r0, r4
 80056d4:	f7fd f9ae 	bl	8002a34 <HAL_SPI_MspInit>
 80056d8:	e7b8      	b.n	800564c <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80056da:	2001      	movs	r0, #1
}
 80056dc:	4770      	bx	lr

080056de <HAL_SPI_Transmit>:
{
 80056de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056e2:	b083      	sub	sp, #12
 80056e4:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80056e6:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	f000 80d1 	beq.w	8005892 <HAL_SPI_Transmit+0x1b4>
 80056f0:	4604      	mov	r4, r0
 80056f2:	4688      	mov	r8, r1
 80056f4:	4691      	mov	r9, r2
 80056f6:	2301      	movs	r3, #1
 80056f8:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 80056fc:	f7fd fbda 	bl	8002eb4 <HAL_GetTick>
 8005700:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005702:	f894 6051 	ldrb.w	r6, [r4, #81]	@ 0x51
 8005706:	b2f6      	uxtb	r6, r6
 8005708:	2e01      	cmp	r6, #1
 800570a:	f040 80ba 	bne.w	8005882 <HAL_SPI_Transmit+0x1a4>
  if ((pData == NULL) || (Size == 0U))
 800570e:	f1b8 0f00 	cmp.w	r8, #0
 8005712:	f000 80b7 	beq.w	8005884 <HAL_SPI_Transmit+0x1a6>
 8005716:	f1b9 0f00 	cmp.w	r9, #0
 800571a:	f000 80b3 	beq.w	8005884 <HAL_SPI_Transmit+0x1a6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800571e:	2303      	movs	r3, #3
 8005720:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005724:	2300      	movs	r3, #0
 8005726:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005728:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800572c:	f8a4 9034 	strh.w	r9, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005730:	f8a4 9036 	strh.w	r9, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005734:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005736:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005738:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800573a:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800573c:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800573e:	68a3      	ldr	r3, [r4, #8]
 8005740:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005744:	d01e      	beq.n	8005784 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800574e:	d103      	bne.n	8005758 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005756:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005758:	68e3      	ldr	r3, [r4, #12]
 800575a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800575e:	d01c      	beq.n	800579a <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005760:	6863      	ldr	r3, [r4, #4]
 8005762:	b113      	cbz	r3, 800576a <HAL_SPI_Transmit+0x8c>
 8005764:	f1b9 0f01 	cmp.w	r9, #1
 8005768:	d155      	bne.n	8005816 <HAL_SPI_Transmit+0x138>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800576a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	7812      	ldrb	r2, [r2, #0]
 8005770:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005772:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005774:	3301      	adds	r3, #1
 8005776:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8005778:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800577a:	b29b      	uxth	r3, r3
 800577c:	3b01      	subs	r3, #1
 800577e:	b29b      	uxth	r3, r3
 8005780:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8005782:	e048      	b.n	8005816 <HAL_SPI_Transmit+0x138>
    __HAL_SPI_DISABLE(hspi);
 8005784:	6822      	ldr	r2, [r4, #0]
 8005786:	6813      	ldr	r3, [r2, #0]
 8005788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800578c:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800578e:	6822      	ldr	r2, [r4, #0]
 8005790:	6813      	ldr	r3, [r2, #0]
 8005792:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	e7d5      	b.n	8005746 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800579a:	6863      	ldr	r3, [r4, #4]
 800579c:	b113      	cbz	r3, 80057a4 <HAL_SPI_Transmit+0xc6>
 800579e:	f1b9 0f01 	cmp.w	r9, #1
 80057a2:	d115      	bne.n	80057d0 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057a4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	8812      	ldrh	r2, [r2, #0]
 80057aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057ac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80057ae:	3302      	adds	r3, #2
 80057b0:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80057b2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	3b01      	subs	r3, #1
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80057bc:	e008      	b.n	80057d0 <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057be:	f7fd fb79 	bl	8002eb4 <HAL_GetTick>
 80057c2:	1bc0      	subs	r0, r0, r7
 80057c4:	42a8      	cmp	r0, r5
 80057c6:	d302      	bcc.n	80057ce <HAL_SPI_Transmit+0xf0>
 80057c8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80057cc:	d115      	bne.n	80057fa <HAL_SPI_Transmit+0x11c>
 80057ce:	b1a5      	cbz	r5, 80057fa <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 80057d0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d03c      	beq.n	8005852 <HAL_SPI_Transmit+0x174>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	f012 0f02 	tst.w	r2, #2
 80057e0:	d0ed      	beq.n	80057be <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057e2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80057e4:	8812      	ldrh	r2, [r2, #0]
 80057e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80057ea:	3302      	adds	r3, #2
 80057ec:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80057ee:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80057f8:	e7ea      	b.n	80057d0 <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 80057fa:	2301      	movs	r3, #1
 80057fc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          errorcode = HAL_TIMEOUT;
 8005800:	2603      	movs	r6, #3
          goto error;
 8005802:	e03f      	b.n	8005884 <HAL_SPI_Transmit+0x1a6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005804:	f7fd fb56 	bl	8002eb4 <HAL_GetTick>
 8005808:	1bc0      	subs	r0, r0, r7
 800580a:	42a8      	cmp	r0, r5
 800580c:	d302      	bcc.n	8005814 <HAL_SPI_Transmit+0x136>
 800580e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005812:	d119      	bne.n	8005848 <HAL_SPI_Transmit+0x16a>
 8005814:	b1c5      	cbz	r5, 8005848 <HAL_SPI_Transmit+0x16a>
    while (hspi->TxXferCount > 0U)
 8005816:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005818:	b29b      	uxth	r3, r3
 800581a:	b1d3      	cbz	r3, 8005852 <HAL_SPI_Transmit+0x174>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	f012 0f02 	tst.w	r2, #2
 8005824:	d0ee      	beq.n	8005804 <HAL_SPI_Transmit+0x126>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005826:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005828:	7812      	ldrb	r2, [r2, #0]
 800582a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800582c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800582e:	3301      	adds	r3, #1
 8005830:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005832:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
 8005836:	fa1f fc8c 	uxth.w	ip, ip
 800583a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800583e:	fa1f fc8c 	uxth.w	ip, ip
 8005842:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
 8005846:	e7e6      	b.n	8005816 <HAL_SPI_Transmit+0x138>
          hspi->State = HAL_SPI_STATE_READY;
 8005848:	2301      	movs	r3, #1
 800584a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          errorcode = HAL_TIMEOUT;
 800584e:	2603      	movs	r6, #3
          goto error;
 8005850:	e018      	b.n	8005884 <HAL_SPI_Transmit+0x1a6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005852:	463a      	mov	r2, r7
 8005854:	4629      	mov	r1, r5
 8005856:	4620      	mov	r0, r4
 8005858:	f7ff fea2 	bl	80055a0 <SPI_EndRxTxTransaction>
 800585c:	b108      	cbz	r0, 8005862 <HAL_SPI_Transmit+0x184>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800585e:	2320      	movs	r3, #32
 8005860:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005862:	68a3      	ldr	r3, [r4, #8]
 8005864:	b933      	cbnz	r3, 8005874 <HAL_SPI_Transmit+0x196>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005866:	9301      	str	r3, [sp, #4]
 8005868:	6823      	ldr	r3, [r4, #0]
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	9201      	str	r2, [sp, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	9301      	str	r3, [sp, #4]
 8005872:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005874:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005876:	b92b      	cbnz	r3, 8005884 <HAL_SPI_Transmit+0x1a6>
    hspi->State = HAL_SPI_STATE_READY;
 8005878:	2301      	movs	r3, #1
 800587a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 800587e:	2600      	movs	r6, #0
 8005880:	e000      	b.n	8005884 <HAL_SPI_Transmit+0x1a6>
    errorcode = HAL_BUSY;
 8005882:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 8005884:	2300      	movs	r3, #0
 8005886:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 800588a:	4630      	mov	r0, r6
 800588c:	b003      	add	sp, #12
 800588e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8005892:	2602      	movs	r6, #2
 8005894:	e7f9      	b.n	800588a <HAL_SPI_Transmit+0x1ac>

08005896 <HAL_SPI_TransmitReceive>:
{
 8005896:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800589a:	b083      	sub	sp, #12
 800589c:	461f      	mov	r7, r3
 800589e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  __HAL_LOCK(hspi);
 80058a0:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	f000 8116 	beq.w	8005ad6 <HAL_SPI_TransmitReceive+0x240>
 80058aa:	4604      	mov	r4, r0
 80058ac:	4688      	mov	r8, r1
 80058ae:	4691      	mov	r9, r2
 80058b0:	2301      	movs	r3, #1
 80058b2:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 80058b6:	f7fd fafd 	bl	8002eb4 <HAL_GetTick>
 80058ba:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80058bc:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80058c0:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80058c2:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d00a      	beq.n	80058de <HAL_SPI_TransmitReceive+0x48>
 80058c8:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80058cc:	f040 80f0 	bne.w	8005ab0 <HAL_SPI_TransmitReceive+0x21a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058d0:	68a2      	ldr	r2, [r4, #8]
 80058d2:	2a00      	cmp	r2, #0
 80058d4:	f040 80f3 	bne.w	8005abe <HAL_SPI_TransmitReceive+0x228>
 80058d8:	2b04      	cmp	r3, #4
 80058da:	f040 80f2 	bne.w	8005ac2 <HAL_SPI_TransmitReceive+0x22c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058de:	f1b8 0f00 	cmp.w	r8, #0
 80058e2:	f000 80f0 	beq.w	8005ac6 <HAL_SPI_TransmitReceive+0x230>
 80058e6:	f1b9 0f00 	cmp.w	r9, #0
 80058ea:	f000 80ee 	beq.w	8005aca <HAL_SPI_TransmitReceive+0x234>
 80058ee:	2f00      	cmp	r7, #0
 80058f0:	f000 80ed 	beq.w	8005ace <HAL_SPI_TransmitReceive+0x238>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058f4:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d002      	beq.n	8005904 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058fe:	2305      	movs	r3, #5
 8005900:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005904:	2300      	movs	r3, #0
 8005906:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005908:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800590c:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800590e:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005910:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005914:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005916:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 8005918:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800591a:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8005924:	d103      	bne.n	800592e <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800592c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800592e:	68e3      	ldr	r3, [r4, #12]
 8005930:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005934:	d011      	beq.n	800595a <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005936:	6863      	ldr	r3, [r4, #4]
 8005938:	b10b      	cbz	r3, 800593e <HAL_SPI_TransmitReceive+0xa8>
 800593a:	2f01      	cmp	r7, #1
 800593c:	d10b      	bne.n	8005956 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800593e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	7812      	ldrb	r2, [r2, #0]
 8005944:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005946:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005948:	3301      	adds	r3, #1
 800594a:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800594c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29b      	uxth	r3, r3
 8005954:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8005956:	2701      	movs	r7, #1
 8005958:	e06e      	b.n	8005a38 <HAL_SPI_TransmitReceive+0x1a2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800595a:	6863      	ldr	r3, [r4, #4]
 800595c:	b10b      	cbz	r3, 8005962 <HAL_SPI_TransmitReceive+0xcc>
 800595e:	2f01      	cmp	r7, #1
 8005960:	d10b      	bne.n	800597a <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005962:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	8812      	ldrh	r2, [r2, #0]
 8005968:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800596a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800596c:	3302      	adds	r3, #2
 800596e:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8005970:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29b      	uxth	r3, r3
 8005978:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 800597a:	2701      	movs	r7, #1
 800597c:	e01b      	b.n	80059b6 <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	f012 0f01 	tst.w	r2, #1
 8005986:	d00e      	beq.n	80059a6 <HAL_SPI_TransmitReceive+0x110>
 8005988:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800598a:	b292      	uxth	r2, r2
 800598c:	b15a      	cbz	r2, 80059a6 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800598e:	68da      	ldr	r2, [r3, #12]
 8005990:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005992:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005994:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005996:	3302      	adds	r3, #2
 8005998:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800599a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800599c:	b29b      	uxth	r3, r3
 800599e:	3b01      	subs	r3, #1
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80059a4:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059a6:	f7fd fa85 	bl	8002eb4 <HAL_GetTick>
 80059aa:	1b80      	subs	r0, r0, r6
 80059ac:	42a8      	cmp	r0, r5
 80059ae:	d302      	bcc.n	80059b6 <HAL_SPI_TransmitReceive+0x120>
 80059b0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80059b4:	d11e      	bne.n	80059f4 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059b6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	b91b      	cbnz	r3, 80059c4 <HAL_SPI_TransmitReceive+0x12e>
 80059bc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d05c      	beq.n	8005a7e <HAL_SPI_TransmitReceive+0x1e8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	f012 0f02 	tst.w	r2, #2
 80059cc:	d0d7      	beq.n	800597e <HAL_SPI_TransmitReceive+0xe8>
 80059ce:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80059d0:	b292      	uxth	r2, r2
 80059d2:	2a00      	cmp	r2, #0
 80059d4:	d0d3      	beq.n	800597e <HAL_SPI_TransmitReceive+0xe8>
 80059d6:	2f00      	cmp	r7, #0
 80059d8:	d0d1      	beq.n	800597e <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059da:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80059dc:	8812      	ldrh	r2, [r2, #0]
 80059de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80059e2:	3302      	adds	r3, #2
 80059e4:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80059e6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80059f0:	2700      	movs	r7, #0
 80059f2:	e7c4      	b.n	800597e <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 80059f4:	2301      	movs	r3, #1
 80059f6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        errorcode = HAL_TIMEOUT;
 80059fa:	2003      	movs	r0, #3
        goto error;
 80059fc:	e059      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x21c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	f012 0f01 	tst.w	r2, #1
 8005a06:	d00e      	beq.n	8005a26 <HAL_SPI_TransmitReceive+0x190>
 8005a08:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8005a0a:	b292      	uxth	r2, r2
 8005a0c:	b15a      	cbz	r2, 8005a26 <HAL_SPI_TransmitReceive+0x190>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005a12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a14:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005a16:	3301      	adds	r3, #1
 8005a18:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a1a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8005a24:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a26:	f7fd fa45 	bl	8002eb4 <HAL_GetTick>
 8005a2a:	1b83      	subs	r3, r0, r6
 8005a2c:	42ab      	cmp	r3, r5
 8005a2e:	d302      	bcc.n	8005a36 <HAL_SPI_TransmitReceive+0x1a0>
 8005a30:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005a34:	d11e      	bne.n	8005a74 <HAL_SPI_TransmitReceive+0x1de>
 8005a36:	b1ed      	cbz	r5, 8005a74 <HAL_SPI_TransmitReceive+0x1de>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a38:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	b913      	cbnz	r3, 8005a44 <HAL_SPI_TransmitReceive+0x1ae>
 8005a3e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	b1e3      	cbz	r3, 8005a7e <HAL_SPI_TransmitReceive+0x1e8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	f012 0f02 	tst.w	r2, #2
 8005a4c:	d0d7      	beq.n	80059fe <HAL_SPI_TransmitReceive+0x168>
 8005a4e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8005a50:	b292      	uxth	r2, r2
 8005a52:	2a00      	cmp	r2, #0
 8005a54:	d0d3      	beq.n	80059fe <HAL_SPI_TransmitReceive+0x168>
 8005a56:	2f00      	cmp	r7, #0
 8005a58:	d0d1      	beq.n	80059fe <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a5a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005a5c:	7812      	ldrb	r2, [r2, #0]
 8005a5e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8005a60:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005a62:	3301      	adds	r3, #1
 8005a64:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a66:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8005a70:	2700      	movs	r7, #0
 8005a72:	e7c4      	b.n	80059fe <HAL_SPI_TransmitReceive+0x168>
        hspi->State = HAL_SPI_STATE_READY;
 8005a74:	2301      	movs	r3, #1
 8005a76:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        errorcode = HAL_TIMEOUT;
 8005a7a:	2003      	movs	r0, #3
        goto error;
 8005a7c:	e019      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x21c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a7e:	4632      	mov	r2, r6
 8005a80:	4629      	mov	r1, r5
 8005a82:	4620      	mov	r0, r4
 8005a84:	f7ff fd8c 	bl	80055a0 <SPI_EndRxTxTransaction>
 8005a88:	b970      	cbnz	r0, 8005aa8 <HAL_SPI_TransmitReceive+0x212>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a8a:	68a3      	ldr	r3, [r4, #8]
 8005a8c:	b933      	cbnz	r3, 8005a9c <HAL_SPI_TransmitReceive+0x206>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a8e:	9301      	str	r3, [sp, #4]
 8005a90:	6823      	ldr	r3, [r4, #0]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	9201      	str	r2, [sp, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	9301      	str	r3, [sp, #4]
 8005a9a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a9c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005a9e:	b9c3      	cbnz	r3, 8005ad2 <HAL_SPI_TransmitReceive+0x23c>
    hspi->State = HAL_SPI_STATE_READY;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
 8005aa6:	e004      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x21c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005aa8:	2320      	movs	r3, #32
 8005aaa:	6563      	str	r3, [r4, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8005aac:	2001      	movs	r0, #1
    goto error;
 8005aae:	e000      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x21c>
    errorcode = HAL_BUSY;
 8005ab0:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8005ab8:	b003      	add	sp, #12
 8005aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8005abe:	2002      	movs	r0, #2
 8005ac0:	e7f7      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x21c>
 8005ac2:	2002      	movs	r0, #2
 8005ac4:	e7f5      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x21c>
    errorcode = HAL_ERROR;
 8005ac6:	2001      	movs	r0, #1
 8005ac8:	e7f3      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x21c>
 8005aca:	2001      	movs	r0, #1
 8005acc:	e7f1      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x21c>
 8005ace:	2001      	movs	r0, #1
 8005ad0:	e7ef      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x21c>
    errorcode = HAL_ERROR;
 8005ad2:	2001      	movs	r0, #1
 8005ad4:	e7ed      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x21c>
  __HAL_LOCK(hspi);
 8005ad6:	2002      	movs	r0, #2
 8005ad8:	e7ee      	b.n	8005ab8 <HAL_SPI_TransmitReceive+0x222>

08005ada <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005ada:	b340      	cbz	r0, 8005b2e <HAL_SRAM_Init+0x54>
{
 8005adc:	b570      	push	{r4, r5, r6, lr}
 8005ade:	460e      	mov	r6, r1
 8005ae0:	4615      	mov	r5, r2
 8005ae2:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005ae4:	f890 3049 	ldrb.w	r3, [r0, #73]	@ 0x49
 8005ae8:	b1e3      	cbz	r3, 8005b24 <HAL_SRAM_Init+0x4a>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005aea:	4621      	mov	r1, r4
 8005aec:	f851 0b08 	ldr.w	r0, [r1], #8
 8005af0:	f000 fcca 	bl	8006488 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005af4:	68a2      	ldr	r2, [r4, #8]
 8005af6:	4631      	mov	r1, r6
 8005af8:	6820      	ldr	r0, [r4, #0]
 8005afa:	f000 fcfb 	bl	80064f4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005afe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005b00:	68a2      	ldr	r2, [r4, #8]
 8005b02:	4629      	mov	r1, r5
 8005b04:	6860      	ldr	r0, [r4, #4]
 8005b06:	f000 fd17 	bl	8006538 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005b0a:	6822      	ldr	r2, [r4, #0]
 8005b0c:	68a1      	ldr	r1, [r4, #8]
 8005b0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b12:	f043 0301 	orr.w	r3, r3, #1
 8005b16:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	f884 3049 	strb.w	r3, [r4, #73]	@ 0x49

  return HAL_OK;
 8005b20:	2000      	movs	r0, #0
}
 8005b22:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 8005b24:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
    HAL_SRAM_MspInit(hsram);
 8005b28:	f7fb fd26 	bl	8001578 <HAL_SRAM_MspInit>
 8005b2c:	e7dd      	b.n	8005aea <HAL_SRAM_Init+0x10>
    return HAL_ERROR;
 8005b2e:	2001      	movs	r0, #1
}
 8005b30:	4770      	bx	lr

08005b32 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b32:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b34:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b36:	6a04      	ldr	r4, [r0, #32]
 8005b38:	f024 0401 	bic.w	r4, r4, #1
 8005b3c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b3e:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b40:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b44:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b48:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8005b4c:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b4e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005b50:	6203      	str	r3, [r0, #32]
}
 8005b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b58:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b5a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b5c:	6a04      	ldr	r4, [r0, #32]
 8005b5e:	f024 0410 	bic.w	r4, r4, #16
 8005b62:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b64:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b66:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b6a:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b72:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b76:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005b78:	6203      	str	r3, [r0, #32]
}
 8005b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b80:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b86:	430b      	orrs	r3, r1
 8005b88:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b8c:	6083      	str	r3, [r0, #8]
}
 8005b8e:	4770      	bx	lr

08005b90 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8005b90:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b92:	4a34      	ldr	r2, [pc, #208]	@ (8005c64 <TIM_Base_SetConfig+0xd4>)
 8005b94:	4290      	cmp	r0, r2
 8005b96:	d012      	beq.n	8005bbe <TIM_Base_SetConfig+0x2e>
 8005b98:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005b9c:	d00f      	beq.n	8005bbe <TIM_Base_SetConfig+0x2e>
 8005b9e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8005ba2:	4290      	cmp	r0, r2
 8005ba4:	d00b      	beq.n	8005bbe <TIM_Base_SetConfig+0x2e>
 8005ba6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005baa:	4290      	cmp	r0, r2
 8005bac:	d007      	beq.n	8005bbe <TIM_Base_SetConfig+0x2e>
 8005bae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005bb2:	4290      	cmp	r0, r2
 8005bb4:	d003      	beq.n	8005bbe <TIM_Base_SetConfig+0x2e>
 8005bb6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8005bba:	4290      	cmp	r0, r2
 8005bbc:	d103      	bne.n	8005bc6 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005bc2:	684a      	ldr	r2, [r1, #4]
 8005bc4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bc6:	4a27      	ldr	r2, [pc, #156]	@ (8005c64 <TIM_Base_SetConfig+0xd4>)
 8005bc8:	4290      	cmp	r0, r2
 8005bca:	d02a      	beq.n	8005c22 <TIM_Base_SetConfig+0x92>
 8005bcc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005bd0:	d027      	beq.n	8005c22 <TIM_Base_SetConfig+0x92>
 8005bd2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8005bd6:	4290      	cmp	r0, r2
 8005bd8:	d023      	beq.n	8005c22 <TIM_Base_SetConfig+0x92>
 8005bda:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005bde:	4290      	cmp	r0, r2
 8005be0:	d01f      	beq.n	8005c22 <TIM_Base_SetConfig+0x92>
 8005be2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005be6:	4290      	cmp	r0, r2
 8005be8:	d01b      	beq.n	8005c22 <TIM_Base_SetConfig+0x92>
 8005bea:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8005bee:	4290      	cmp	r0, r2
 8005bf0:	d017      	beq.n	8005c22 <TIM_Base_SetConfig+0x92>
 8005bf2:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8005bf6:	4290      	cmp	r0, r2
 8005bf8:	d013      	beq.n	8005c22 <TIM_Base_SetConfig+0x92>
 8005bfa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005bfe:	4290      	cmp	r0, r2
 8005c00:	d00f      	beq.n	8005c22 <TIM_Base_SetConfig+0x92>
 8005c02:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c06:	4290      	cmp	r0, r2
 8005c08:	d00b      	beq.n	8005c22 <TIM_Base_SetConfig+0x92>
 8005c0a:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8005c0e:	4290      	cmp	r0, r2
 8005c10:	d007      	beq.n	8005c22 <TIM_Base_SetConfig+0x92>
 8005c12:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c16:	4290      	cmp	r0, r2
 8005c18:	d003      	beq.n	8005c22 <TIM_Base_SetConfig+0x92>
 8005c1a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c1e:	4290      	cmp	r0, r2
 8005c20:	d103      	bne.n	8005c2a <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c26:	68ca      	ldr	r2, [r1, #12]
 8005c28:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c2e:	694a      	ldr	r2, [r1, #20]
 8005c30:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005c32:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c34:	688b      	ldr	r3, [r1, #8]
 8005c36:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c38:	680b      	ldr	r3, [r1, #0]
 8005c3a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c3c:	4b09      	ldr	r3, [pc, #36]	@ (8005c64 <TIM_Base_SetConfig+0xd4>)
 8005c3e:	4298      	cmp	r0, r3
 8005c40:	d003      	beq.n	8005c4a <TIM_Base_SetConfig+0xba>
 8005c42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c46:	4298      	cmp	r0, r3
 8005c48:	d101      	bne.n	8005c4e <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8005c4a:	690b      	ldr	r3, [r1, #16]
 8005c4c:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c52:	6903      	ldr	r3, [r0, #16]
 8005c54:	f013 0f01 	tst.w	r3, #1
 8005c58:	d003      	beq.n	8005c62 <TIM_Base_SetConfig+0xd2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c5a:	6903      	ldr	r3, [r0, #16]
 8005c5c:	f023 0301 	bic.w	r3, r3, #1
 8005c60:	6103      	str	r3, [r0, #16]
}
 8005c62:	4770      	bx	lr
 8005c64:	40010000 	.word	0x40010000

08005c68 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005c68:	b340      	cbz	r0, 8005cbc <HAL_TIM_Base_Init+0x54>
{
 8005c6a:	b510      	push	{r4, lr}
 8005c6c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005c6e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005c72:	b1f3      	cbz	r3, 8005cb2 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005c74:	2302      	movs	r3, #2
 8005c76:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005c80:	f7ff ff86 	bl	8005b90 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c84:	2301      	movs	r3, #1
 8005c86:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c8a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005c8e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005c92:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005c96:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c9a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ca2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005ca6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005caa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005cae:	2000      	movs	r0, #0
}
 8005cb0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005cb2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005cb6:	f7fd f807 	bl	8002cc8 <HAL_TIM_Base_MspInit>
 8005cba:	e7db      	b.n	8005c74 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005cbc:	2001      	movs	r0, #1
}
 8005cbe:	4770      	bx	lr

08005cc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cc0:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cc2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cc4:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cc8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cd2:	6082      	str	r2, [r0, #8]
}
 8005cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005cda:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d078      	beq.n	8005dd4 <HAL_TIM_ConfigClockSource+0xfa>
{
 8005ce2:	b510      	push	{r4, lr}
 8005ce4:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005cec:	2302      	movs	r3, #2
 8005cee:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005cf2:	6802      	ldr	r2, [r0, #0]
 8005cf4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cfa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005cfe:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005d00:	680b      	ldr	r3, [r1, #0]
 8005d02:	2b60      	cmp	r3, #96	@ 0x60
 8005d04:	d04c      	beq.n	8005da0 <HAL_TIM_ConfigClockSource+0xc6>
 8005d06:	d829      	bhi.n	8005d5c <HAL_TIM_ConfigClockSource+0x82>
 8005d08:	2b40      	cmp	r3, #64	@ 0x40
 8005d0a:	d054      	beq.n	8005db6 <HAL_TIM_ConfigClockSource+0xdc>
 8005d0c:	d90c      	bls.n	8005d28 <HAL_TIM_ConfigClockSource+0x4e>
 8005d0e:	2b50      	cmp	r3, #80	@ 0x50
 8005d10:	d122      	bne.n	8005d58 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d12:	68ca      	ldr	r2, [r1, #12]
 8005d14:	6849      	ldr	r1, [r1, #4]
 8005d16:	6800      	ldr	r0, [r0, #0]
 8005d18:	f7ff ff0b 	bl	8005b32 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d1c:	2150      	movs	r1, #80	@ 0x50
 8005d1e:	6820      	ldr	r0, [r4, #0]
 8005d20:	f7ff ff2e 	bl	8005b80 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005d24:	2000      	movs	r0, #0
      break;
 8005d26:	e005      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	d00d      	beq.n	8005d48 <HAL_TIM_ConfigClockSource+0x6e>
 8005d2c:	d909      	bls.n	8005d42 <HAL_TIM_ConfigClockSource+0x68>
 8005d2e:	2b30      	cmp	r3, #48	@ 0x30
 8005d30:	d00a      	beq.n	8005d48 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8005d32:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8005d34:	2301      	movs	r3, #1
 8005d36:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8005d40:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8005d42:	b10b      	cbz	r3, 8005d48 <HAL_TIM_ConfigClockSource+0x6e>
 8005d44:	2b10      	cmp	r3, #16
 8005d46:	d105      	bne.n	8005d54 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d48:	4619      	mov	r1, r3
 8005d4a:	6820      	ldr	r0, [r4, #0]
 8005d4c:	f7ff ff18 	bl	8005b80 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005d50:	2000      	movs	r0, #0
      break;
 8005d52:	e7ef      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8005d54:	2001      	movs	r0, #1
 8005d56:	e7ed      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x5a>
 8005d58:	2001      	movs	r0, #1
 8005d5a:	e7eb      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d60:	d034      	beq.n	8005dcc <HAL_TIM_ConfigClockSource+0xf2>
 8005d62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d66:	d10c      	bne.n	8005d82 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8005d68:	68cb      	ldr	r3, [r1, #12]
 8005d6a:	684a      	ldr	r2, [r1, #4]
 8005d6c:	6889      	ldr	r1, [r1, #8]
 8005d6e:	6800      	ldr	r0, [r0, #0]
 8005d70:	f7ff ffa6 	bl	8005cc0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d74:	6822      	ldr	r2, [r4, #0]
 8005d76:	6893      	ldr	r3, [r2, #8]
 8005d78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d7c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005d7e:	2000      	movs	r0, #0
      break;
 8005d80:	e7d8      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005d82:	2b70      	cmp	r3, #112	@ 0x70
 8005d84:	d124      	bne.n	8005dd0 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8005d86:	68cb      	ldr	r3, [r1, #12]
 8005d88:	684a      	ldr	r2, [r1, #4]
 8005d8a:	6889      	ldr	r1, [r1, #8]
 8005d8c:	6800      	ldr	r0, [r0, #0]
 8005d8e:	f7ff ff97 	bl	8005cc0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005d92:	6822      	ldr	r2, [r4, #0]
 8005d94:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d96:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005d9a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005d9c:	2000      	movs	r0, #0
      break;
 8005d9e:	e7c9      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005da0:	68ca      	ldr	r2, [r1, #12]
 8005da2:	6849      	ldr	r1, [r1, #4]
 8005da4:	6800      	ldr	r0, [r0, #0]
 8005da6:	f7ff fed7 	bl	8005b58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005daa:	2160      	movs	r1, #96	@ 0x60
 8005dac:	6820      	ldr	r0, [r4, #0]
 8005dae:	f7ff fee7 	bl	8005b80 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005db2:	2000      	movs	r0, #0
      break;
 8005db4:	e7be      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005db6:	68ca      	ldr	r2, [r1, #12]
 8005db8:	6849      	ldr	r1, [r1, #4]
 8005dba:	6800      	ldr	r0, [r0, #0]
 8005dbc:	f7ff feb9 	bl	8005b32 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dc0:	2140      	movs	r1, #64	@ 0x40
 8005dc2:	6820      	ldr	r0, [r4, #0]
 8005dc4:	f7ff fedc 	bl	8005b80 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005dc8:	2000      	movs	r0, #0
      break;
 8005dca:	e7b3      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005dcc:	2000      	movs	r0, #0
 8005dce:	e7b1      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8005dd0:	2001      	movs	r0, #1
 8005dd2:	e7af      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8005dd4:	2002      	movs	r0, #2
}
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dd8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8005ddc:	2a01      	cmp	r2, #1
 8005dde:	d03d      	beq.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8005de0:	b410      	push	{r4}
 8005de2:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8005de4:	2201      	movs	r2, #1
 8005de6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dea:	2202      	movs	r2, #2
 8005dec:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005df0:	6802      	ldr	r2, [r0, #0]
 8005df2:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005df4:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005df6:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dfa:	6808      	ldr	r0, [r1, #0]
 8005dfc:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e00:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	4816      	ldr	r0, [pc, #88]	@ (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8005e06:	4282      	cmp	r2, r0
 8005e08:	d01a      	beq.n	8005e40 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8005e0a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005e0e:	d017      	beq.n	8005e40 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8005e10:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8005e14:	4282      	cmp	r2, r0
 8005e16:	d013      	beq.n	8005e40 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8005e18:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8005e1c:	4282      	cmp	r2, r0
 8005e1e:	d00f      	beq.n	8005e40 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8005e20:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8005e24:	4282      	cmp	r2, r0
 8005e26:	d00b      	beq.n	8005e40 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8005e28:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8005e2c:	4282      	cmp	r2, r0
 8005e2e:	d007      	beq.n	8005e40 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8005e30:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8005e34:	4282      	cmp	r2, r0
 8005e36:	d003      	beq.n	8005e40 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8005e38:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8005e3c:	4282      	cmp	r2, r0
 8005e3e:	d104      	bne.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e40:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e44:	6849      	ldr	r1, [r1, #4]
 8005e46:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e48:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e50:	2000      	movs	r0, #0
 8005e52:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8005e56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e5a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005e5c:	2002      	movs	r0, #2
}
 8005e5e:	4770      	bx	lr
 8005e60:	40010000 	.word	0x40010000

08005e64 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e64:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e66:	f102 030c 	add.w	r3, r2, #12
 8005e6a:	e853 3f00 	ldrex	r3, [r3]
 8005e6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e72:	320c      	adds	r2, #12
 8005e74:	e842 3100 	strex	r1, r3, [r2]
 8005e78:	2900      	cmp	r1, #0
 8005e7a:	d1f3      	bne.n	8005e64 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7e:	f102 0314 	add.w	r3, r2, #20
 8005e82:	e853 3f00 	ldrex	r3, [r3]
 8005e86:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8a:	3214      	adds	r2, #20
 8005e8c:	e842 3100 	strex	r1, r3, [r2]
 8005e90:	2900      	cmp	r1, #0
 8005e92:	d1f3      	bne.n	8005e7c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e94:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d005      	beq.n	8005ea6 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e9a:	2320      	movs	r3, #32
 8005e9c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8005ea4:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea8:	f102 030c 	add.w	r3, r2, #12
 8005eac:	e853 3f00 	ldrex	r3, [r3]
 8005eb0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb4:	320c      	adds	r2, #12
 8005eb6:	e842 3100 	strex	r1, r3, [r2]
 8005eba:	2900      	cmp	r1, #0
 8005ebc:	d1f3      	bne.n	8005ea6 <UART_EndRxTransfer+0x42>
 8005ebe:	e7ec      	b.n	8005e9a <UART_EndRxTransfer+0x36>

08005ec0 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ec0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b21      	cmp	r3, #33	@ 0x21
 8005ec8:	d001      	beq.n	8005ece <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8005eca:	2002      	movs	r0, #2
  }
}
 8005ecc:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ece:	6883      	ldr	r3, [r0, #8]
 8005ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed4:	d017      	beq.n	8005f06 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ed6:	6a03      	ldr	r3, [r0, #32]
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	6202      	str	r2, [r0, #32]
 8005edc:	781a      	ldrb	r2, [r3, #0]
 8005ede:	6803      	ldr	r3, [r0, #0]
 8005ee0:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8005ee2:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8005eec:	b94b      	cbnz	r3, 8005f02 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005eee:	6802      	ldr	r2, [r0, #0]
 8005ef0:	68d3      	ldr	r3, [r2, #12]
 8005ef2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ef6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ef8:	6802      	ldr	r2, [r0, #0]
 8005efa:	68d3      	ldr	r3, [r2, #12]
 8005efc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f00:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8005f02:	2000      	movs	r0, #0
 8005f04:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f06:	6903      	ldr	r3, [r0, #16]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1e4      	bne.n	8005ed6 <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f0c:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f0e:	881b      	ldrh	r3, [r3, #0]
 8005f10:	6802      	ldr	r2, [r0, #0]
 8005f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f16:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8005f18:	6a03      	ldr	r3, [r0, #32]
 8005f1a:	3302      	adds	r3, #2
 8005f1c:	6203      	str	r3, [r0, #32]
 8005f1e:	e7e0      	b.n	8005ee2 <UART_Transmit_IT+0x22>

08005f20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f20:	b510      	push	{r4, lr}
 8005f22:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f24:	6802      	ldr	r2, [r0, #0]
 8005f26:	6913      	ldr	r3, [r2, #16]
 8005f28:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005f2c:	68c1      	ldr	r1, [r0, #12]
 8005f2e:	430b      	orrs	r3, r1
 8005f30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f32:	6883      	ldr	r3, [r0, #8]
 8005f34:	6902      	ldr	r2, [r0, #16]
 8005f36:	431a      	orrs	r2, r3
 8005f38:	6943      	ldr	r3, [r0, #20]
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	69c3      	ldr	r3, [r0, #28]
 8005f3e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8005f40:	6801      	ldr	r1, [r0, #0]
 8005f42:	68cb      	ldr	r3, [r1, #12]
 8005f44:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8005f48:	f023 030c 	bic.w	r3, r3, #12
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f50:	6802      	ldr	r2, [r0, #0]
 8005f52:	6953      	ldr	r3, [r2, #20]
 8005f54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f58:	6981      	ldr	r1, [r0, #24]
 8005f5a:	430b      	orrs	r3, r1
 8005f5c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f5e:	6803      	ldr	r3, [r0, #0]
 8005f60:	4a31      	ldr	r2, [pc, #196]	@ (8006028 <UART_SetConfig+0x108>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d006      	beq.n	8005f74 <UART_SetConfig+0x54>
 8005f66:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d002      	beq.n	8005f74 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f6e:	f7fe f983 	bl	8004278 <HAL_RCC_GetPCLK1Freq>
 8005f72:	e001      	b.n	8005f78 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f74:	f7fe f990 	bl	8004298 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f78:	69e3      	ldr	r3, [r4, #28]
 8005f7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f7e:	d029      	beq.n	8005fd4 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f80:	2100      	movs	r1, #0
 8005f82:	1803      	adds	r3, r0, r0
 8005f84:	4149      	adcs	r1, r1
 8005f86:	181b      	adds	r3, r3, r0
 8005f88:	f141 0100 	adc.w	r1, r1, #0
 8005f8c:	00c9      	lsls	r1, r1, #3
 8005f8e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	1818      	adds	r0, r3, r0
 8005f96:	6863      	ldr	r3, [r4, #4]
 8005f98:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8005f9c:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8005fa0:	f141 0100 	adc.w	r1, r1, #0
 8005fa4:	f7fa fe70 	bl	8000c88 <__aeabi_uldivmod>
 8005fa8:	4a20      	ldr	r2, [pc, #128]	@ (800602c <UART_SetConfig+0x10c>)
 8005faa:	fba2 3100 	umull	r3, r1, r2, r0
 8005fae:	0949      	lsrs	r1, r1, #5
 8005fb0:	2364      	movs	r3, #100	@ 0x64
 8005fb2:	fb03 0311 	mls	r3, r3, r1, r0
 8005fb6:	011b      	lsls	r3, r3, #4
 8005fb8:	3332      	adds	r3, #50	@ 0x32
 8005fba:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005fc4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005fc8:	f003 030f 	and.w	r3, r3, #15
 8005fcc:	6821      	ldr	r1, [r4, #0]
 8005fce:	4413      	add	r3, r2
 8005fd0:	608b      	str	r3, [r1, #8]
  }
}
 8005fd2:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	1802      	adds	r2, r0, r0
 8005fd8:	eb43 0103 	adc.w	r1, r3, r3
 8005fdc:	1812      	adds	r2, r2, r0
 8005fde:	f141 0100 	adc.w	r1, r1, #0
 8005fe2:	00c9      	lsls	r1, r1, #3
 8005fe4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fe8:	00d2      	lsls	r2, r2, #3
 8005fea:	1810      	adds	r0, r2, r0
 8005fec:	f141 0100 	adc.w	r1, r1, #0
 8005ff0:	6862      	ldr	r2, [r4, #4]
 8005ff2:	1892      	adds	r2, r2, r2
 8005ff4:	415b      	adcs	r3, r3
 8005ff6:	f7fa fe47 	bl	8000c88 <__aeabi_uldivmod>
 8005ffa:	4a0c      	ldr	r2, [pc, #48]	@ (800602c <UART_SetConfig+0x10c>)
 8005ffc:	fba2 3100 	umull	r3, r1, r2, r0
 8006000:	0949      	lsrs	r1, r1, #5
 8006002:	2364      	movs	r3, #100	@ 0x64
 8006004:	fb03 0311 	mls	r3, r3, r1, r0
 8006008:	00db      	lsls	r3, r3, #3
 800600a:	3332      	adds	r3, #50	@ 0x32
 800600c:	fba2 2303 	umull	r2, r3, r2, r3
 8006010:	095b      	lsrs	r3, r3, #5
 8006012:	005a      	lsls	r2, r3, #1
 8006014:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8006018:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800601c:	f003 0307 	and.w	r3, r3, #7
 8006020:	6821      	ldr	r1, [r4, #0]
 8006022:	4413      	add	r3, r2
 8006024:	608b      	str	r3, [r1, #8]
 8006026:	e7d4      	b.n	8005fd2 <UART_SetConfig+0xb2>
 8006028:	40011000 	.word	0x40011000
 800602c:	51eb851f 	.word	0x51eb851f

08006030 <HAL_UART_Init>:
  if (huart == NULL)
 8006030:	b360      	cbz	r0, 800608c <HAL_UART_Init+0x5c>
{
 8006032:	b510      	push	{r4, lr}
 8006034:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006036:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800603a:	b313      	cbz	r3, 8006082 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800603c:	2324      	movs	r3, #36	@ 0x24
 800603e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8006042:	6822      	ldr	r2, [r4, #0]
 8006044:	68d3      	ldr	r3, [r2, #12]
 8006046:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800604a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800604c:	4620      	mov	r0, r4
 800604e:	f7ff ff67 	bl	8005f20 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006052:	6822      	ldr	r2, [r4, #0]
 8006054:	6913      	ldr	r3, [r2, #16]
 8006056:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800605a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800605c:	6822      	ldr	r2, [r4, #0]
 800605e:	6953      	ldr	r3, [r2, #20]
 8006060:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8006064:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8006066:	6822      	ldr	r2, [r4, #0]
 8006068:	68d3      	ldr	r3, [r2, #12]
 800606a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800606e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006070:	2000      	movs	r0, #0
 8006072:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006074:	2320      	movs	r3, #32
 8006076:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800607a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800607e:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8006080:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006082:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8006086:	f7fc fe61 	bl	8002d4c <HAL_UART_MspInit>
 800608a:	e7d7      	b.n	800603c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800608c:	2001      	movs	r0, #1
}
 800608e:	4770      	bx	lr

08006090 <HAL_UART_TxCpltCallback>:
}
 8006090:	4770      	bx	lr

08006092 <UART_EndTransmit_IT>:
{
 8006092:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006094:	6801      	ldr	r1, [r0, #0]
 8006096:	68ca      	ldr	r2, [r1, #12]
 8006098:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800609c:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800609e:	2220      	movs	r2, #32
 80060a0:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 80060a4:	f7ff fff4 	bl	8006090 <HAL_UART_TxCpltCallback>
}
 80060a8:	2000      	movs	r0, #0
 80060aa:	bd08      	pop	{r3, pc}

080060ac <HAL_UART_ErrorCallback>:
}
 80060ac:	4770      	bx	lr

080060ae <UART_DMAAbortOnError>:
{
 80060ae:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060b0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80060b6:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 80060b8:	f7ff fff8 	bl	80060ac <HAL_UART_ErrorCallback>
}
 80060bc:	bd08      	pop	{r3, pc}

080060be <HAL_UARTEx_RxEventCallback>:
}
 80060be:	4770      	bx	lr

080060c0 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060c0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b22      	cmp	r3, #34	@ 0x22
 80060c8:	d169      	bne.n	800619e <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ca:	6883      	ldr	r3, [r0, #8]
 80060cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060d0:	d04f      	beq.n	8006172 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060d2:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060d8:	d004      	beq.n	80060e4 <UART_Receive_IT+0x24>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d156      	bne.n	800618c <UART_Receive_IT+0xcc>
 80060de:	6903      	ldr	r3, [r0, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d153      	bne.n	800618c <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060e4:	6803      	ldr	r3, [r0, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80060ea:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80060ec:	3301      	adds	r3, #1
 80060ee:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 80060f0:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d151      	bne.n	80061a2 <UART_Receive_IT+0xe2>
{
 80060fe:	b500      	push	{lr}
 8006100:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006102:	6802      	ldr	r2, [r0, #0]
 8006104:	68d3      	ldr	r3, [r2, #12]
 8006106:	f023 0320 	bic.w	r3, r3, #32
 800610a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800610c:	6802      	ldr	r2, [r0, #0]
 800610e:	68d3      	ldr	r3, [r2, #12]
 8006110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006114:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006116:	6802      	ldr	r2, [r0, #0]
 8006118:	6953      	ldr	r3, [r2, #20]
 800611a:	f023 0301 	bic.w	r3, r3, #1
 800611e:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8006120:	2320      	movs	r3, #32
 8006122:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006126:	2300      	movs	r3, #0
 8006128:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800612a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800612c:	2b01      	cmp	r3, #1
 800612e:	d133      	bne.n	8006198 <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006130:	2300      	movs	r3, #0
 8006132:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006134:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006136:	f102 030c 	add.w	r3, r2, #12
 800613a:	e853 3f00 	ldrex	r3, [r3]
 800613e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	320c      	adds	r2, #12
 8006144:	e842 3100 	strex	r1, r3, [r2]
 8006148:	2900      	cmp	r1, #0
 800614a:	d1f3      	bne.n	8006134 <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800614c:	6803      	ldr	r3, [r0, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	f012 0f10 	tst.w	r2, #16
 8006154:	d006      	beq.n	8006164 <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006156:	2200      	movs	r2, #0
 8006158:	9201      	str	r2, [sp, #4]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	9201      	str	r2, [sp, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	9301      	str	r3, [sp, #4]
 8006162:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006164:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8006166:	f7ff ffaa 	bl	80060be <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 800616a:	2000      	movs	r0, #0
}
 800616c:	b003      	add	sp, #12
 800616e:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006172:	6902      	ldr	r2, [r0, #16]
 8006174:	2a00      	cmp	r2, #0
 8006176:	d1ac      	bne.n	80060d2 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006178:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800617a:	6803      	ldr	r3, [r0, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006182:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8006184:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006186:	3302      	adds	r3, #2
 8006188:	6283      	str	r3, [r0, #40]	@ 0x28
 800618a:	e7b1      	b.n	80060f0 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800618c:	6803      	ldr	r3, [r0, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006194:	7013      	strb	r3, [r2, #0]
 8006196:	e7a8      	b.n	80060ea <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 8006198:	f7fb ffe2 	bl	8002160 <HAL_UART_RxCpltCallback>
 800619c:	e7e5      	b.n	800616a <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 800619e:	2002      	movs	r0, #2
 80061a0:	4770      	bx	lr
    return HAL_OK;
 80061a2:	2000      	movs	r0, #0
}
 80061a4:	4770      	bx	lr
	...

080061a8 <HAL_UART_IRQHandler>:
{
 80061a8:	b510      	push	{r4, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061ae:	6802      	ldr	r2, [r0, #0]
 80061b0:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061b2:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061b4:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 80061b6:	f013 0f0f 	tst.w	r3, #15
 80061ba:	d109      	bne.n	80061d0 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061bc:	f013 0f20 	tst.w	r3, #32
 80061c0:	d00c      	beq.n	80061dc <HAL_UART_IRQHandler+0x34>
 80061c2:	f010 0f20 	tst.w	r0, #32
 80061c6:	d009      	beq.n	80061dc <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 80061c8:	4620      	mov	r0, r4
 80061ca:	f7ff ff79 	bl	80060c0 <UART_Receive_IT>
      return;
 80061ce:	e016      	b.n	80061fe <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80061d0:	f011 0101 	ands.w	r1, r1, #1
 80061d4:	d115      	bne.n	8006202 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061d6:	f410 7f90 	tst.w	r0, #288	@ 0x120
 80061da:	d112      	bne.n	8006202 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80061de:	2901      	cmp	r1, #1
 80061e0:	d079      	beq.n	80062d6 <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80061e6:	d003      	beq.n	80061f0 <HAL_UART_IRQHandler+0x48>
 80061e8:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80061ec:	f040 8114 	bne.w	8006418 <HAL_UART_IRQHandler+0x270>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061f0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80061f4:	d003      	beq.n	80061fe <HAL_UART_IRQHandler+0x56>
 80061f6:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80061fa:	f040 8111 	bne.w	8006420 <HAL_UART_IRQHandler+0x278>
}
 80061fe:	b002      	add	sp, #8
 8006200:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006202:	f013 0f01 	tst.w	r3, #1
 8006206:	d006      	beq.n	8006216 <HAL_UART_IRQHandler+0x6e>
 8006208:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800620c:	d003      	beq.n	8006216 <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800620e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006210:	f042 0201 	orr.w	r2, r2, #1
 8006214:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006216:	f013 0f04 	tst.w	r3, #4
 800621a:	d004      	beq.n	8006226 <HAL_UART_IRQHandler+0x7e>
 800621c:	b119      	cbz	r1, 8006226 <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800621e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006220:	f042 0202 	orr.w	r2, r2, #2
 8006224:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006226:	f013 0f02 	tst.w	r3, #2
 800622a:	d004      	beq.n	8006236 <HAL_UART_IRQHandler+0x8e>
 800622c:	b119      	cbz	r1, 8006236 <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800622e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006230:	f042 0204 	orr.w	r2, r2, #4
 8006234:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006236:	f013 0f08 	tst.w	r3, #8
 800623a:	d007      	beq.n	800624c <HAL_UART_IRQHandler+0xa4>
 800623c:	f010 0f20 	tst.w	r0, #32
 8006240:	d100      	bne.n	8006244 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006242:	b119      	cbz	r1, 800624c <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006244:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006246:	f042 0208 	orr.w	r2, r2, #8
 800624a:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800624c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800624e:	2a00      	cmp	r2, #0
 8006250:	d0d5      	beq.n	80061fe <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006252:	f013 0f20 	tst.w	r3, #32
 8006256:	d002      	beq.n	800625e <HAL_UART_IRQHandler+0xb6>
 8006258:	f010 0f20 	tst.w	r0, #32
 800625c:	d129      	bne.n	80062b2 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006266:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006268:	f012 0f08 	tst.w	r2, #8
 800626c:	d100      	bne.n	8006270 <HAL_UART_IRQHandler+0xc8>
 800626e:	b363      	cbz	r3, 80062ca <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8006270:	4620      	mov	r0, r4
 8006272:	f7ff fdf7 	bl	8005e64 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800627e:	d020      	beq.n	80062c2 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006280:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006282:	f102 0314 	add.w	r3, r2, #20
 8006286:	e853 3f00 	ldrex	r3, [r3]
 800628a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628e:	3214      	adds	r2, #20
 8006290:	e842 3100 	strex	r1, r3, [r2]
 8006294:	2900      	cmp	r1, #0
 8006296:	d1f3      	bne.n	8006280 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 8006298:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800629a:	b173      	cbz	r3, 80062ba <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800629c:	4a62      	ldr	r2, [pc, #392]	@ (8006428 <HAL_UART_IRQHandler+0x280>)
 800629e:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062a0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80062a2:	f7fd fab4 	bl	800380e <HAL_DMA_Abort_IT>
 80062a6:	2800      	cmp	r0, #0
 80062a8:	d0a9      	beq.n	80061fe <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062aa:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80062ac:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80062ae:	4798      	blx	r3
 80062b0:	e7a5      	b.n	80061fe <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 80062b2:	4620      	mov	r0, r4
 80062b4:	f7ff ff04 	bl	80060c0 <UART_Receive_IT>
 80062b8:	e7d1      	b.n	800625e <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 80062ba:	4620      	mov	r0, r4
 80062bc:	f7ff fef6 	bl	80060ac <HAL_UART_ErrorCallback>
 80062c0:	e79d      	b.n	80061fe <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 80062c2:	4620      	mov	r0, r4
 80062c4:	f7ff fef2 	bl	80060ac <HAL_UART_ErrorCallback>
 80062c8:	e799      	b.n	80061fe <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 80062ca:	4620      	mov	r0, r4
 80062cc:	f7ff feee 	bl	80060ac <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d0:	2300      	movs	r3, #0
 80062d2:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 80062d4:	e793      	b.n	80061fe <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062d6:	f013 0f10 	tst.w	r3, #16
 80062da:	d082      	beq.n	80061e2 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062dc:	f010 0f10 	tst.w	r0, #16
 80062e0:	f43f af7f 	beq.w	80061e2 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062e4:	2300      	movs	r3, #0
 80062e6:	9301      	str	r3, [sp, #4]
 80062e8:	6813      	ldr	r3, [r2, #0]
 80062ea:	9301      	str	r3, [sp, #4]
 80062ec:	6853      	ldr	r3, [r2, #4]
 80062ee:	9301      	str	r3, [sp, #4]
 80062f0:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f2:	6953      	ldr	r3, [r2, #20]
 80062f4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80062f8:	d052      	beq.n	80063a0 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062fa:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80062fc:	6813      	ldr	r3, [r2, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8006302:	2b00      	cmp	r3, #0
 8006304:	f43f af7b 	beq.w	80061fe <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006308:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800630a:	4299      	cmp	r1, r3
 800630c:	f67f af77 	bls.w	80061fe <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8006310:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006312:	69d3      	ldr	r3, [r2, #28]
 8006314:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006318:	d037      	beq.n	800638a <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800631a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	f102 030c 	add.w	r3, r2, #12
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	320c      	adds	r2, #12
 800632a:	e842 3100 	strex	r1, r3, [r2]
 800632e:	2900      	cmp	r1, #0
 8006330:	d1f3      	bne.n	800631a <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006332:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	f102 0314 	add.w	r3, r2, #20
 8006338:	e853 3f00 	ldrex	r3, [r3]
 800633c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	3214      	adds	r2, #20
 8006342:	e842 3100 	strex	r1, r3, [r2]
 8006346:	2900      	cmp	r1, #0
 8006348:	d1f3      	bne.n	8006332 <HAL_UART_IRQHandler+0x18a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800634a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634c:	f102 0314 	add.w	r3, r2, #20
 8006350:	e853 3f00 	ldrex	r3, [r3]
 8006354:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006358:	3214      	adds	r2, #20
 800635a:	e842 3100 	strex	r1, r3, [r2]
 800635e:	2900      	cmp	r1, #0
 8006360:	d1f3      	bne.n	800634a <HAL_UART_IRQHandler+0x1a2>
          huart->RxState = HAL_UART_STATE_READY;
 8006362:	2320      	movs	r3, #32
 8006364:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006368:	2300      	movs	r3, #0
 800636a:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800636c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636e:	f102 030c 	add.w	r3, r2, #12
 8006372:	e853 3f00 	ldrex	r3, [r3]
 8006376:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	320c      	adds	r2, #12
 800637c:	e842 3100 	strex	r1, r3, [r2]
 8006380:	2900      	cmp	r1, #0
 8006382:	d1f3      	bne.n	800636c <HAL_UART_IRQHandler+0x1c4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006384:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006386:	f7fd f9f8 	bl	800377a <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800638a:	2302      	movs	r3, #2
 800638c:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800638e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8006390:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8006392:	b29b      	uxth	r3, r3
 8006394:	1ac9      	subs	r1, r1, r3
 8006396:	b289      	uxth	r1, r1
 8006398:	4620      	mov	r0, r4
 800639a:	f7ff fe90 	bl	80060be <HAL_UARTEx_RxEventCallback>
      return;
 800639e:	e72e      	b.n	80061fe <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063a0:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80063a2:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	1ac9      	subs	r1, r1, r3
 80063a8:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80063aa:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f43f af25 	beq.w	80061fe <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 80063b4:	2900      	cmp	r1, #0
 80063b6:	f43f af22 	beq.w	80061fe <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063ba:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063bc:	f102 030c 	add.w	r3, r2, #12
 80063c0:	e853 3f00 	ldrex	r3, [r3]
 80063c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c8:	320c      	adds	r2, #12
 80063ca:	e842 3000 	strex	r0, r3, [r2]
 80063ce:	2800      	cmp	r0, #0
 80063d0:	d1f3      	bne.n	80063ba <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d4:	f102 0314 	add.w	r3, r2, #20
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	3214      	adds	r2, #20
 80063e2:	e842 3000 	strex	r0, r3, [r2]
 80063e6:	2800      	cmp	r0, #0
 80063e8:	d1f3      	bne.n	80063d2 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 80063ea:	2320      	movs	r3, #32
 80063ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f0:	2300      	movs	r3, #0
 80063f2:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f6:	f102 030c 	add.w	r3, r2, #12
 80063fa:	e853 3f00 	ldrex	r3, [r3]
 80063fe:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006402:	320c      	adds	r2, #12
 8006404:	e842 3000 	strex	r0, r3, [r2]
 8006408:	2800      	cmp	r0, #0
 800640a:	d1f3      	bne.n	80063f4 <HAL_UART_IRQHandler+0x24c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800640c:	2302      	movs	r3, #2
 800640e:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006410:	4620      	mov	r0, r4
 8006412:	f7ff fe54 	bl	80060be <HAL_UARTEx_RxEventCallback>
      return;
 8006416:	e6f2      	b.n	80061fe <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 8006418:	4620      	mov	r0, r4
 800641a:	f7ff fd51 	bl	8005ec0 <UART_Transmit_IT>
    return;
 800641e:	e6ee      	b.n	80061fe <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8006420:	4620      	mov	r0, r4
 8006422:	f7ff fe36 	bl	8006092 <UART_EndTransmit_IT>
    return;
 8006426:	e6ea      	b.n	80061fe <HAL_UART_IRQHandler+0x56>
 8006428:	080060af 	.word	0x080060af

0800642c <UART_Start_Receive_IT>:
  huart->pRxBuffPtr = pData;
 800642c:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 800642e:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006430:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006432:	2300      	movs	r3, #0
 8006434:	6443      	str	r3, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006436:	2322      	movs	r3, #34	@ 0x22
 8006438:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 800643c:	6903      	ldr	r3, [r0, #16]
 800643e:	b123      	cbz	r3, 800644a <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006440:	6802      	ldr	r2, [r0, #0]
 8006442:	68d3      	ldr	r3, [r2, #12]
 8006444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006448:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800644a:	6802      	ldr	r2, [r0, #0]
 800644c:	6953      	ldr	r3, [r2, #20]
 800644e:	f043 0301 	orr.w	r3, r3, #1
 8006452:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006454:	6802      	ldr	r2, [r0, #0]
 8006456:	68d3      	ldr	r3, [r2, #12]
 8006458:	f043 0320 	orr.w	r3, r3, #32
 800645c:	60d3      	str	r3, [r2, #12]
}
 800645e:	2000      	movs	r0, #0
 8006460:	4770      	bx	lr

08006462 <HAL_UART_Receive_IT>:
{
 8006462:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8006464:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b20      	cmp	r3, #32
 800646c:	d108      	bne.n	8006480 <HAL_UART_Receive_IT+0x1e>
    if ((pData == NULL) || (Size == 0U))
 800646e:	b149      	cbz	r1, 8006484 <HAL_UART_Receive_IT+0x22>
 8006470:	b90a      	cbnz	r2, 8006476 <HAL_UART_Receive_IT+0x14>
      return HAL_ERROR;
 8006472:	2001      	movs	r0, #1
}
 8006474:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006476:	2300      	movs	r3, #0
 8006478:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 800647a:	f7ff ffd7 	bl	800642c <UART_Start_Receive_IT>
 800647e:	e7f9      	b.n	8006474 <HAL_UART_Receive_IT+0x12>
    return HAL_BUSY;
 8006480:	2002      	movs	r0, #2
 8006482:	e7f7      	b.n	8006474 <HAL_UART_Receive_IT+0x12>
      return HAL_ERROR;
 8006484:	2001      	movs	r0, #1
 8006486:	e7f5      	b.n	8006474 <HAL_UART_Receive_IT+0x12>

08006488 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8006488:	b410      	push	{r4}
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800648a:	680a      	ldr	r2, [r1, #0]
 800648c:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8006490:	f023 0301 	bic.w	r3, r3, #1
 8006494:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006498:	688b      	ldr	r3, [r1, #8]
 800649a:	2b08      	cmp	r3, #8
 800649c:	d025      	beq.n	80064ea <FSMC_NORSRAM_Init+0x62>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800649e:	2400      	movs	r4, #0
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80064a0:	684a      	ldr	r2, [r1, #4]
  btcr_reg = (flashaccess                   | \
 80064a2:	4322      	orrs	r2, r4
              Init->DataAddressMux          | \
 80064a4:	4313      	orrs	r3, r2
              Init->MemoryType              | \
              Init->MemoryDataWidth         | \
 80064a6:	68ca      	ldr	r2, [r1, #12]
              Init->MemoryType              | \
 80064a8:	4313      	orrs	r3, r2
              Init->BurstAccessMode         | \
 80064aa:	690a      	ldr	r2, [r1, #16]
              Init->MemoryDataWidth         | \
 80064ac:	4313      	orrs	r3, r2
              Init->WaitSignalPolarity      | \
 80064ae:	694a      	ldr	r2, [r1, #20]
              Init->BurstAccessMode         | \
 80064b0:	4313      	orrs	r3, r2
              Init->WaitSignalActive        | \
 80064b2:	69ca      	ldr	r2, [r1, #28]
              Init->WaitSignalPolarity      | \
 80064b4:	4313      	orrs	r3, r2
              Init->WriteOperation          | \
 80064b6:	6a0a      	ldr	r2, [r1, #32]
              Init->WaitSignalActive        | \
 80064b8:	4313      	orrs	r3, r2
              Init->WaitSignal              | \
 80064ba:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
              Init->WriteOperation          | \
 80064bc:	4313      	orrs	r3, r2
              Init->ExtendedMode            | \
 80064be:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
              Init->WaitSignal              | \
 80064c0:	4313      	orrs	r3, r2
              Init->AsynchronousWait        | \
 80064c2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
              Init->ExtendedMode            | \
 80064c4:	4313      	orrs	r3, r2
              Init->WriteBurst);
 80064c6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 80064c8:	4313      	orrs	r3, r2

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80064ca:	698a      	ldr	r2, [r1, #24]
 80064cc:	431a      	orrs	r2, r3
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80064ce:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 80064d0:	431a      	orrs	r2, r3
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80064d2:	6809      	ldr	r1, [r1, #0]
 80064d4:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 80064d8:	4b05      	ldr	r3, [pc, #20]	@ (80064f0 <FSMC_NORSRAM_Init+0x68>)
 80064da:	4023      	ands	r3, r4
 80064dc:	4313      	orrs	r3, r2
 80064de:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
}
 80064e2:	2000      	movs	r0, #0
 80064e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064e8:	4770      	bx	lr
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80064ea:	2440      	movs	r4, #64	@ 0x40
 80064ec:	e7d8      	b.n	80064a0 <FSMC_NORSRAM_Init+0x18>
 80064ee:	bf00      	nop
 80064f0:	fff00080 	.word	0xfff00080

080064f4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80064f4:	b510      	push	{r4, lr}
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80064f6:	3201      	adds	r2, #1
 80064f8:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80064fc:	f003 4c40 	and.w	ip, r3, #3221225472	@ 0xc0000000
 8006500:	680b      	ldr	r3, [r1, #0]
 8006502:	684c      	ldr	r4, [r1, #4]
 8006504:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8006508:	688c      	ldr	r4, [r1, #8]
 800650a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800650e:	68cc      	ldr	r4, [r1, #12]
 8006510:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006514:	690c      	ldr	r4, [r1, #16]
 8006516:	f104 3eff 	add.w	lr, r4, #4294967295
 800651a:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 800651e:	694c      	ldr	r4, [r1, #20]
 8006520:	f1a4 0e02 	sub.w	lr, r4, #2
 8006524:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 8006528:	6989      	ldr	r1, [r1, #24]
 800652a:	430b      	orrs	r3, r1
 800652c:	ea4c 0303 	orr.w	r3, ip, r3
 8006530:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
}
 8006534:	2000      	movs	r0, #0
 8006536:	bd10      	pop	{r4, pc}

08006538 <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006538:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800653c:	d005      	beq.n	800654a <FSMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800653e:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 8006542:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8006546:	2000      	movs	r0, #0
 8006548:	4770      	bx	lr
{
 800654a:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800654c:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8006550:	4c09      	ldr	r4, [pc, #36]	@ (8006578 <FSMC_NORSRAM_Extended_Timing_Init+0x40>)
 8006552:	401c      	ands	r4, r3
 8006554:	680b      	ldr	r3, [r1, #0]
 8006556:	684d      	ldr	r5, [r1, #4]
 8006558:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800655c:	688d      	ldr	r5, [r1, #8]
 800655e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8006562:	698d      	ldr	r5, [r1, #24]
 8006564:	432b      	orrs	r3, r5
 8006566:	68c9      	ldr	r1, [r1, #12]
 8006568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800656c:	431c      	orrs	r4, r3
 800656e:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
}
 8006572:	2000      	movs	r0, #0
 8006574:	bc30      	pop	{r4, r5}
 8006576:	4770      	bx	lr
 8006578:	cff00000 	.word	0xcff00000

0800657c <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800657c:	4b0b      	ldr	r3, [pc, #44]	@ (80065ac <SDMMC_GetCmdError+0x30>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a0b      	ldr	r2, [pc, #44]	@ (80065b0 <SDMMC_GetCmdError+0x34>)
 8006582:	fba2 2303 	umull	r2, r3, r2, r3
 8006586:	0a5b      	lsrs	r3, r3, #9
 8006588:	f241 3288 	movw	r2, #5000	@ 0x1388
 800658c:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006590:	461a      	mov	r2, r3
 8006592:	3b01      	subs	r3, #1
 8006594:	b13a      	cbz	r2, 80065a6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006596:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8006598:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800659c:	d0f8      	beq.n	8006590 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800659e:	23c5      	movs	r3, #197	@ 0xc5
 80065a0:	6383      	str	r3, [r0, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80065a2:	2000      	movs	r0, #0
 80065a4:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80065a6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80065aa:	4770      	bx	lr
 80065ac:	20000034 	.word	0x20000034
 80065b0:	10624dd3 	.word	0x10624dd3

080065b4 <SDIO_Init>:
{
 80065b4:	b084      	sub	sp, #16
 80065b6:	f10d 0c04 	add.w	ip, sp, #4
 80065ba:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 80065be:	460b      	mov	r3, r1
 80065c0:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 80065c2:	9a03      	ldr	r2, [sp, #12]
             Init.ClockBypass         |\
 80065c4:	4313      	orrs	r3, r2
             Init.BusWide             |\
 80065c6:	9a04      	ldr	r2, [sp, #16]
             Init.ClockPowerSave      |\
 80065c8:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 80065ca:	9a05      	ldr	r2, [sp, #20]
             Init.BusWide             |\
 80065cc:	4313      	orrs	r3, r2
             Init.ClockDiv
 80065ce:	9a06      	ldr	r2, [sp, #24]
             Init.HardwareFlowControl |\
 80065d0:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80065d2:	6842      	ldr	r2, [r0, #4]
 80065d4:	f422 42fd 	bic.w	r2, r2, #32384	@ 0x7e80
 80065d8:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 80065dc:	4313      	orrs	r3, r2
 80065de:	6043      	str	r3, [r0, #4]
}
 80065e0:	2000      	movs	r0, #0
 80065e2:	b004      	add	sp, #16
 80065e4:	4770      	bx	lr

080065e6 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 80065e6:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 80065ea:	4770      	bx	lr

080065ec <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 80065ec:	680b      	ldr	r3, [r1, #0]
 80065ee:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 80065f2:	2000      	movs	r0, #0
 80065f4:	4770      	bx	lr

080065f6 <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80065f6:	2303      	movs	r3, #3
 80065f8:	6003      	str	r3, [r0, #0]
}
 80065fa:	2000      	movs	r0, #0
 80065fc:	4770      	bx	lr

080065fe <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80065fe:	6800      	ldr	r0, [r0, #0]
}
 8006600:	f000 0003 	and.w	r0, r0, #3
 8006604:	4770      	bx	lr

08006606 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8006606:	680b      	ldr	r3, [r1, #0]
 8006608:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800660a:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 800660c:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800660e:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8006610:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 8006612:	4313      	orrs	r3, r2
                       Command->CPSM);
 8006614:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8006616:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006618:	68c2      	ldr	r2, [r0, #12]
 800661a:	f422 627f 	bic.w	r2, r2, #4080	@ 0xff0
 800661e:	f022 020f 	bic.w	r2, r2, #15
 8006622:	4313      	orrs	r3, r2
 8006624:	60c3      	str	r3, [r0, #12]
}
 8006626:	2000      	movs	r0, #0
 8006628:	4770      	bx	lr

0800662a <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 800662a:	6900      	ldr	r0, [r0, #16]
}
 800662c:	b2c0      	uxtb	r0, r0
 800662e:	4770      	bx	lr

08006630 <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006630:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8006632:	5840      	ldr	r0, [r0, r1]
}  
 8006634:	4770      	bx	lr

08006636 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8006636:	680b      	ldr	r3, [r1, #0]
 8006638:	6243      	str	r3, [r0, #36]	@ 0x24
  SDIOx->DLEN = Data->DataLength;
 800663a:	684b      	ldr	r3, [r1, #4]
 800663c:	6283      	str	r3, [r0, #40]	@ 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800663e:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 8006640:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006642:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8006644:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8006646:	4313      	orrs	r3, r2
                       Data->DPSM);
 8006648:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 800664a:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800664c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800664e:	f022 02f7 	bic.w	r2, r2, #247	@ 0xf7
 8006652:	4313      	orrs	r3, r2
 8006654:	62c3      	str	r3, [r0, #44]	@ 0x2c
}
 8006656:	2000      	movs	r0, #0
 8006658:	4770      	bx	lr

0800665a <SDMMC_CmdGoIdleState>:
{
 800665a:	b510      	push	{r4, lr}
 800665c:	b086      	sub	sp, #24
 800665e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8006660:	2300      	movs	r3, #0
 8006662:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006664:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006666:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006668:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800666a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800666e:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006670:	a901      	add	r1, sp, #4
 8006672:	f7ff ffc8 	bl	8006606 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006676:	4620      	mov	r0, r4
 8006678:	f7ff ff80 	bl	800657c <SDMMC_GetCmdError>
}
 800667c:	b006      	add	sp, #24
 800667e:	bd10      	pop	{r4, pc}

08006680 <SDMMC_GetCmdResp1>:
{
 8006680:	b538      	push	{r3, r4, r5, lr}
 8006682:	4604      	mov	r4, r0
 8006684:	460d      	mov	r5, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006686:	4b50      	ldr	r3, [pc, #320]	@ (80067c8 <SDMMC_GetCmdResp1+0x148>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4950      	ldr	r1, [pc, #320]	@ (80067cc <SDMMC_GetCmdResp1+0x14c>)
 800668c:	fba1 1303 	umull	r1, r3, r1, r3
 8006690:	0a5b      	lsrs	r3, r3, #9
 8006692:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 8006696:	4613      	mov	r3, r2
 8006698:	3a01      	subs	r2, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d05d      	beq.n	800675a <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDIOx->STA;
 800669e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066a0:	f013 0f45 	tst.w	r3, #69	@ 0x45
 80066a4:	d0f7      	beq.n	8006696 <SDMMC_GetCmdResp1+0x16>
 80066a6:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80066aa:	d1f4      	bne.n	8006696 <SDMMC_GetCmdResp1+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80066ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80066ae:	f013 0f04 	tst.w	r3, #4
 80066b2:	d106      	bne.n	80066c2 <SDMMC_GetCmdResp1+0x42>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80066b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80066b6:	f013 0f01 	tst.w	r3, #1
 80066ba:	d005      	beq.n	80066c8 <SDMMC_GetCmdResp1+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80066bc:	2001      	movs	r0, #1
 80066be:	63a0      	str	r0, [r4, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066c0:	e04d      	b.n	800675e <SDMMC_GetCmdResp1+0xde>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80066c2:	2004      	movs	r0, #4
 80066c4:	63a0      	str	r0, [r4, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066c6:	e04a      	b.n	800675e <SDMMC_GetCmdResp1+0xde>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80066c8:	23c5      	movs	r3, #197	@ 0xc5
 80066ca:	63a3      	str	r3, [r4, #56]	@ 0x38
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80066cc:	4620      	mov	r0, r4
 80066ce:	f7ff ffac 	bl	800662a <SDIO_GetCommandResponse>
 80066d2:	42a8      	cmp	r0, r5
 80066d4:	d001      	beq.n	80066da <SDMMC_GetCmdResp1+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066d6:	2001      	movs	r0, #1
 80066d8:	e041      	b.n	800675e <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80066da:	2100      	movs	r1, #0
 80066dc:	4620      	mov	r0, r4
 80066de:	f7ff ffa7 	bl	8006630 <SDIO_GetResponse>
 80066e2:	4603      	mov	r3, r0
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80066e4:	483a      	ldr	r0, [pc, #232]	@ (80067d0 <SDMMC_GetCmdResp1+0x150>)
 80066e6:	4018      	ands	r0, r3
 80066e8:	b3c8      	cbz	r0, 800675e <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	db38      	blt.n	8006760 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80066ee:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80066f2:	d138      	bne.n	8006766 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80066f4:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80066f8:	d137      	bne.n	800676a <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80066fa:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80066fe:	d136      	bne.n	800676e <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006700:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8006704:	d136      	bne.n	8006774 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006706:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 800670a:	d136      	bne.n	800677a <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800670c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8006710:	d136      	bne.n	8006780 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006712:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8006716:	d136      	bne.n	8006786 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006718:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800671c:	d136      	bne.n	800678c <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800671e:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8006722:	d136      	bne.n	8006792 <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8006728:	d136      	bne.n	8006798 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800672a:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800672e:	d136      	bne.n	800679e <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006730:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006734:	d136      	bne.n	80067a4 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006736:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800673a:	d136      	bne.n	80067aa <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800673c:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8006740:	d136      	bne.n	80067b0 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006742:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8006746:	d136      	bne.n	80067b6 <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006748:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800674c:	d136      	bne.n	80067bc <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800674e:	f013 0f08 	tst.w	r3, #8
 8006752:	d036      	beq.n	80067c2 <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006754:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8006758:	e001      	b.n	800675e <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 800675a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800675e:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006760:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8006764:	e7fb      	b.n	800675e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006766:	2040      	movs	r0, #64	@ 0x40
 8006768:	e7f9      	b.n	800675e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800676a:	2080      	movs	r0, #128	@ 0x80
 800676c:	e7f7      	b.n	800675e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800676e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006772:	e7f4      	b.n	800675e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006774:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8006778:	e7f1      	b.n	800675e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800677a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800677e:	e7ee      	b.n	800675e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006780:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006784:	e7eb      	b.n	800675e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006786:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800678a:	e7e8      	b.n	800675e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800678c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006790:	e7e5      	b.n	800675e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006792:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006796:	e7e2      	b.n	800675e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 8006798:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800679c:	e7df      	b.n	800675e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800679e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80067a2:	e7dc      	b.n	800675e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80067a4:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80067a8:	e7d9      	b.n	800675e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80067aa:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80067ae:	e7d6      	b.n	800675e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80067b0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80067b4:	e7d3      	b.n	800675e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80067b6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80067ba:	e7d0      	b.n	800675e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 80067bc:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80067c0:	e7cd      	b.n	800675e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80067c2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80067c6:	e7ca      	b.n	800675e <SDMMC_GetCmdResp1+0xde>
 80067c8:	20000034 	.word	0x20000034
 80067cc:	10624dd3 	.word	0x10624dd3
 80067d0:	fdffe008 	.word	0xfdffe008

080067d4 <SDMMC_CmdBlockLength>:
{
 80067d4:	b530      	push	{r4, r5, lr}
 80067d6:	b087      	sub	sp, #28
 80067d8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80067da:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80067dc:	2510      	movs	r5, #16
 80067de:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80067e0:	2340      	movs	r3, #64	@ 0x40
 80067e2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067e4:	2300      	movs	r3, #0
 80067e6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067ec:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80067ee:	a901      	add	r1, sp, #4
 80067f0:	f7ff ff09 	bl	8006606 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80067f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067f8:	4629      	mov	r1, r5
 80067fa:	4620      	mov	r0, r4
 80067fc:	f7ff ff40 	bl	8006680 <SDMMC_GetCmdResp1>
}
 8006800:	b007      	add	sp, #28
 8006802:	bd30      	pop	{r4, r5, pc}

08006804 <SDMMC_CmdReadSingleBlock>:
{
 8006804:	b530      	push	{r4, r5, lr}
 8006806:	b087      	sub	sp, #28
 8006808:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800680a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800680c:	2511      	movs	r5, #17
 800680e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006810:	2340      	movs	r3, #64	@ 0x40
 8006812:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006814:	2300      	movs	r3, #0
 8006816:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006818:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800681c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800681e:	a901      	add	r1, sp, #4
 8006820:	f7ff fef1 	bl	8006606 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006828:	4629      	mov	r1, r5
 800682a:	4620      	mov	r0, r4
 800682c:	f7ff ff28 	bl	8006680 <SDMMC_GetCmdResp1>
}
 8006830:	b007      	add	sp, #28
 8006832:	bd30      	pop	{r4, r5, pc}

08006834 <SDMMC_CmdReadMultiBlock>:
{
 8006834:	b530      	push	{r4, r5, lr}
 8006836:	b087      	sub	sp, #28
 8006838:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800683a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800683c:	2512      	movs	r5, #18
 800683e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006840:	2340      	movs	r3, #64	@ 0x40
 8006842:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006844:	2300      	movs	r3, #0
 8006846:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006848:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800684c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800684e:	a901      	add	r1, sp, #4
 8006850:	f7ff fed9 	bl	8006606 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006858:	4629      	mov	r1, r5
 800685a:	4620      	mov	r0, r4
 800685c:	f7ff ff10 	bl	8006680 <SDMMC_GetCmdResp1>
}
 8006860:	b007      	add	sp, #28
 8006862:	bd30      	pop	{r4, r5, pc}

08006864 <SDMMC_CmdWriteSingleBlock>:
{
 8006864:	b530      	push	{r4, r5, lr}
 8006866:	b087      	sub	sp, #28
 8006868:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800686a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800686c:	2518      	movs	r5, #24
 800686e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006870:	2340      	movs	r3, #64	@ 0x40
 8006872:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006874:	2300      	movs	r3, #0
 8006876:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006878:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800687c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800687e:	a901      	add	r1, sp, #4
 8006880:	f7ff fec1 	bl	8006606 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006888:	4629      	mov	r1, r5
 800688a:	4620      	mov	r0, r4
 800688c:	f7ff fef8 	bl	8006680 <SDMMC_GetCmdResp1>
}
 8006890:	b007      	add	sp, #28
 8006892:	bd30      	pop	{r4, r5, pc}

08006894 <SDMMC_CmdWriteMultiBlock>:
{
 8006894:	b530      	push	{r4, r5, lr}
 8006896:	b087      	sub	sp, #28
 8006898:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800689a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800689c:	2519      	movs	r5, #25
 800689e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80068a0:	2340      	movs	r3, #64	@ 0x40
 80068a2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80068a4:	2300      	movs	r3, #0
 80068a6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80068ac:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068ae:	a901      	add	r1, sp, #4
 80068b0:	f7ff fea9 	bl	8006606 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80068b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068b8:	4629      	mov	r1, r5
 80068ba:	4620      	mov	r0, r4
 80068bc:	f7ff fee0 	bl	8006680 <SDMMC_GetCmdResp1>
}
 80068c0:	b007      	add	sp, #28
 80068c2:	bd30      	pop	{r4, r5, pc}

080068c4 <SDMMC_CmdStopTransfer>:
{
 80068c4:	b530      	push	{r4, r5, lr}
 80068c6:	b087      	sub	sp, #28
 80068c8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80068ce:	250c      	movs	r5, #12
 80068d0:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80068d2:	2240      	movs	r2, #64	@ 0x40
 80068d4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80068d6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80068dc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068de:	a901      	add	r1, sp, #4
 80068e0:	f7ff fe91 	bl	8006606 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80068e4:	4a03      	ldr	r2, [pc, #12]	@ (80068f4 <SDMMC_CmdStopTransfer+0x30>)
 80068e6:	4629      	mov	r1, r5
 80068e8:	4620      	mov	r0, r4
 80068ea:	f7ff fec9 	bl	8006680 <SDMMC_GetCmdResp1>
}
 80068ee:	b007      	add	sp, #28
 80068f0:	bd30      	pop	{r4, r5, pc}
 80068f2:	bf00      	nop
 80068f4:	05f5e100 	.word	0x05f5e100

080068f8 <SDMMC_CmdSelDesel>:
{
 80068f8:	b530      	push	{r4, r5, lr}
 80068fa:	b087      	sub	sp, #28
 80068fc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80068fe:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006900:	2507      	movs	r5, #7
 8006902:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006904:	2340      	movs	r3, #64	@ 0x40
 8006906:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006908:	2300      	movs	r3, #0
 800690a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800690c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006910:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006912:	a901      	add	r1, sp, #4
 8006914:	f7ff fe77 	bl	8006606 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800691c:	4629      	mov	r1, r5
 800691e:	4620      	mov	r0, r4
 8006920:	f7ff feae 	bl	8006680 <SDMMC_GetCmdResp1>
}
 8006924:	b007      	add	sp, #28
 8006926:	bd30      	pop	{r4, r5, pc}

08006928 <SDMMC_CmdAppCommand>:
{
 8006928:	b530      	push	{r4, r5, lr}
 800692a:	b087      	sub	sp, #28
 800692c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800692e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006930:	2537      	movs	r5, #55	@ 0x37
 8006932:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006934:	2340      	movs	r3, #64	@ 0x40
 8006936:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006938:	2300      	movs	r3, #0
 800693a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800693c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006940:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006942:	a901      	add	r1, sp, #4
 8006944:	f7ff fe5f 	bl	8006606 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006948:	f241 3288 	movw	r2, #5000	@ 0x1388
 800694c:	4629      	mov	r1, r5
 800694e:	4620      	mov	r0, r4
 8006950:	f7ff fe96 	bl	8006680 <SDMMC_GetCmdResp1>
}
 8006954:	b007      	add	sp, #28
 8006956:	bd30      	pop	{r4, r5, pc}

08006958 <SDMMC_CmdBusWidth>:
{
 8006958:	b530      	push	{r4, r5, lr}
 800695a:	b087      	sub	sp, #28
 800695c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800695e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006960:	2506      	movs	r5, #6
 8006962:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006964:	2340      	movs	r3, #64	@ 0x40
 8006966:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006968:	2300      	movs	r3, #0
 800696a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800696c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006970:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006972:	a901      	add	r1, sp, #4
 8006974:	f7ff fe47 	bl	8006606 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800697c:	4629      	mov	r1, r5
 800697e:	4620      	mov	r0, r4
 8006980:	f7ff fe7e 	bl	8006680 <SDMMC_GetCmdResp1>
}
 8006984:	b007      	add	sp, #28
 8006986:	bd30      	pop	{r4, r5, pc}

08006988 <SDMMC_CmdSendSCR>:
{
 8006988:	b530      	push	{r4, r5, lr}
 800698a:	b087      	sub	sp, #28
 800698c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800698e:	2300      	movs	r3, #0
 8006990:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006992:	2533      	movs	r5, #51	@ 0x33
 8006994:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006996:	2240      	movs	r2, #64	@ 0x40
 8006998:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800699a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800699c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069a0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069a2:	a901      	add	r1, sp, #4
 80069a4:	f7ff fe2f 	bl	8006606 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80069a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069ac:	4629      	mov	r1, r5
 80069ae:	4620      	mov	r0, r4
 80069b0:	f7ff fe66 	bl	8006680 <SDMMC_GetCmdResp1>
}
 80069b4:	b007      	add	sp, #28
 80069b6:	bd30      	pop	{r4, r5, pc}

080069b8 <SDMMC_CmdSendStatus>:
{
 80069b8:	b530      	push	{r4, r5, lr}
 80069ba:	b087      	sub	sp, #28
 80069bc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80069be:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80069c0:	250d      	movs	r5, #13
 80069c2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80069c4:	2340      	movs	r3, #64	@ 0x40
 80069c6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80069c8:	2300      	movs	r3, #0
 80069ca:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069d0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069d2:	a901      	add	r1, sp, #4
 80069d4:	f7ff fe17 	bl	8006606 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80069d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069dc:	4629      	mov	r1, r5
 80069de:	4620      	mov	r0, r4
 80069e0:	f7ff fe4e 	bl	8006680 <SDMMC_GetCmdResp1>
}
 80069e4:	b007      	add	sp, #28
 80069e6:	bd30      	pop	{r4, r5, pc}

080069e8 <SDMMC_CmdSwitch>:
{
 80069e8:	b530      	push	{r4, r5, lr}
 80069ea:	b087      	sub	sp, #28
 80069ec:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN */
 80069ee:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 80069f0:	2506      	movs	r5, #6
 80069f2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80069f4:	2340      	movs	r3, #64	@ 0x40
 80069f6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80069f8:	2300      	movs	r3, #0
 80069fa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a00:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a02:	a901      	add	r1, sp, #4
 8006a04:	f7ff fdff 	bl	8006606 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_HS_SWITCH, SDIO_CMDTIMEOUT);
 8006a08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a0c:	4629      	mov	r1, r5
 8006a0e:	4620      	mov	r0, r4
 8006a10:	f7ff fe36 	bl	8006680 <SDMMC_GetCmdResp1>
}
 8006a14:	b007      	add	sp, #28
 8006a16:	bd30      	pop	{r4, r5, pc}

08006a18 <SDMMC_GetCmdResp2>:
{
 8006a18:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006a1a:	4b14      	ldr	r3, [pc, #80]	@ (8006a6c <SDMMC_GetCmdResp2+0x54>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a14      	ldr	r2, [pc, #80]	@ (8006a70 <SDMMC_GetCmdResp2+0x58>)
 8006a20:	fba2 2303 	umull	r2, r3, r2, r3
 8006a24:	0a5b      	lsrs	r3, r3, #9
 8006a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a2a:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8006a2e:	461a      	mov	r2, r3
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b1ba      	cbz	r2, 8006a64 <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDIOx->STA;
 8006a34:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a36:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8006a3a:	d0f8      	beq.n	8006a2e <SDMMC_GetCmdResp2+0x16>
 8006a3c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8006a40:	d1f5      	bne.n	8006a2e <SDMMC_GetCmdResp2+0x16>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006a42:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8006a44:	f013 0f04 	tst.w	r3, #4
 8006a48:	d106      	bne.n	8006a58 <SDMMC_GetCmdResp2+0x40>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006a4a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8006a4c:	f010 0001 	ands.w	r0, r0, #1
 8006a50:	d105      	bne.n	8006a5e <SDMMC_GetCmdResp2+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006a52:	23c5      	movs	r3, #197	@ 0xc5
 8006a54:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8006a56:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006a58:	2004      	movs	r0, #4
 8006a5a:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006a5c:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006a5e:	2001      	movs	r0, #1
 8006a60:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a62:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8006a64:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	20000034 	.word	0x20000034
 8006a70:	10624dd3 	.word	0x10624dd3

08006a74 <SDMMC_CmdSendCID>:
{
 8006a74:	b510      	push	{r4, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006a7e:	2202      	movs	r2, #2
 8006a80:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006a82:	22c0      	movs	r2, #192	@ 0xc0
 8006a84:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a86:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a8c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a8e:	a901      	add	r1, sp, #4
 8006a90:	f7ff fdb9 	bl	8006606 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006a94:	4620      	mov	r0, r4
 8006a96:	f7ff ffbf 	bl	8006a18 <SDMMC_GetCmdResp2>
}
 8006a9a:	b006      	add	sp, #24
 8006a9c:	bd10      	pop	{r4, pc}

08006a9e <SDMMC_CmdSendCSD>:
{
 8006a9e:	b510      	push	{r4, lr}
 8006aa0:	b086      	sub	sp, #24
 8006aa2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8006aa4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006aa6:	2309      	movs	r3, #9
 8006aa8:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006aaa:	23c0      	movs	r3, #192	@ 0xc0
 8006aac:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ab2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ab6:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ab8:	a901      	add	r1, sp, #4
 8006aba:	f7ff fda4 	bl	8006606 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f7ff ffaa 	bl	8006a18 <SDMMC_GetCmdResp2>
}
 8006ac4:	b006      	add	sp, #24
 8006ac6:	bd10      	pop	{r4, pc}

08006ac8 <SDMMC_GetCmdResp3>:
{
 8006ac8:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006aca:	4b10      	ldr	r3, [pc, #64]	@ (8006b0c <SDMMC_GetCmdResp3+0x44>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a10      	ldr	r2, [pc, #64]	@ (8006b10 <SDMMC_GetCmdResp3+0x48>)
 8006ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad4:	0a5b      	lsrs	r3, r3, #9
 8006ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ada:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8006ade:	461a      	mov	r2, r3
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b182      	cbz	r2, 8006b06 <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDIOx->STA;
 8006ae4:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006ae6:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8006aea:	d0f8      	beq.n	8006ade <SDMMC_GetCmdResp3+0x16>
 8006aec:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8006af0:	d1f5      	bne.n	8006ade <SDMMC_GetCmdResp3+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006af2:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8006af4:	f010 0004 	ands.w	r0, r0, #4
 8006af8:	d102      	bne.n	8006b00 <SDMMC_GetCmdResp3+0x38>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006afa:	23c5      	movs	r3, #197	@ 0xc5
 8006afc:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8006afe:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006b00:	2004      	movs	r0, #4
 8006b02:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006b04:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8006b06:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8006b0a:	4770      	bx	lr
 8006b0c:	20000034 	.word	0x20000034
 8006b10:	10624dd3 	.word	0x10624dd3

08006b14 <SDMMC_CmdAppOperCommand>:
{
 8006b14:	b510      	push	{r4, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006b1a:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 8006b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8006b22:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006b24:	2329      	movs	r3, #41	@ 0x29
 8006b26:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b28:	2340      	movs	r3, #64	@ 0x40
 8006b2a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b34:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b36:	a901      	add	r1, sp, #4
 8006b38:	f7ff fd65 	bl	8006606 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f7ff ffc3 	bl	8006ac8 <SDMMC_GetCmdResp3>
}
 8006b42:	b006      	add	sp, #24
 8006b44:	bd10      	pop	{r4, pc}
	...

08006b48 <SDMMC_GetCmdResp6>:
{
 8006b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	460e      	mov	r6, r1
 8006b4e:	4617      	mov	r7, r2
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006b50:	4b23      	ldr	r3, [pc, #140]	@ (8006be0 <SDMMC_GetCmdResp6+0x98>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a23      	ldr	r2, [pc, #140]	@ (8006be4 <SDMMC_GetCmdResp6+0x9c>)
 8006b56:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5a:	0a5b      	lsrs	r3, r3, #9
 8006b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b60:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8006b64:	461a      	mov	r2, r3
 8006b66:	3b01      	subs	r3, #1
 8006b68:	b38a      	cbz	r2, 8006bce <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDIOx->STA;
 8006b6a:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006b6c:	f014 0f45 	tst.w	r4, #69	@ 0x45
 8006b70:	d0f8      	beq.n	8006b64 <SDMMC_GetCmdResp6+0x1c>
 8006b72:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 8006b76:	d1f5      	bne.n	8006b64 <SDMMC_GetCmdResp6+0x1c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006b78:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8006b7a:	f013 0f04 	tst.w	r3, #4
 8006b7e:	d106      	bne.n	8006b8e <SDMMC_GetCmdResp6+0x46>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006b80:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8006b82:	f013 0f01 	tst.w	r3, #1
 8006b86:	d005      	beq.n	8006b94 <SDMMC_GetCmdResp6+0x4c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006b88:	2001      	movs	r0, #1
 8006b8a:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006b8c:	e021      	b.n	8006bd2 <SDMMC_GetCmdResp6+0x8a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006b8e:	2004      	movs	r0, #4
 8006b90:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006b92:	e01e      	b.n	8006bd2 <SDMMC_GetCmdResp6+0x8a>
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006b94:	4628      	mov	r0, r5
 8006b96:	f7ff fd48 	bl	800662a <SDIO_GetCommandResponse>
 8006b9a:	42b0      	cmp	r0, r6
 8006b9c:	d001      	beq.n	8006ba2 <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006b9e:	2001      	movs	r0, #1
 8006ba0:	e017      	b.n	8006bd2 <SDMMC_GetCmdResp6+0x8a>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006ba2:	23c5      	movs	r3, #197	@ 0xc5
 8006ba4:	63ab      	str	r3, [r5, #56]	@ 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	4628      	mov	r0, r5
 8006baa:	f7ff fd41 	bl	8006630 <SDIO_GetResponse>
 8006bae:	4603      	mov	r3, r0
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006bb0:	f410 4060 	ands.w	r0, r0, #57344	@ 0xe000
 8006bb4:	d008      	beq.n	8006bc8 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006bb6:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8006bba:	d10b      	bne.n	8006bd4 <SDMMC_GetCmdResp6+0x8c>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006bbc:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8006bc0:	d00b      	beq.n	8006bda <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006bc2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006bc6:	e004      	b.n	8006bd2 <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006bc8:	0c1b      	lsrs	r3, r3, #16
 8006bca:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 8006bcc:	e001      	b.n	8006bd2 <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 8006bce:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8006bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006bd4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006bd8:	e7fb      	b.n	8006bd2 <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006bda:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006bde:	e7f8      	b.n	8006bd2 <SDMMC_GetCmdResp6+0x8a>
 8006be0:	20000034 	.word	0x20000034
 8006be4:	10624dd3 	.word	0x10624dd3

08006be8 <SDMMC_CmdSetRelAdd>:
{
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	4604      	mov	r4, r0
 8006bee:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006bf4:	2603      	movs	r6, #3
 8006bf6:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006bf8:	2240      	movs	r2, #64	@ 0x40
 8006bfa:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bfc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006bfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c02:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c04:	a901      	add	r1, sp, #4
 8006c06:	f7ff fcfe 	bl	8006606 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006c0a:	462a      	mov	r2, r5
 8006c0c:	4631      	mov	r1, r6
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f7ff ff9a 	bl	8006b48 <SDMMC_GetCmdResp6>
}
 8006c14:	b006      	add	sp, #24
 8006c16:	bd70      	pop	{r4, r5, r6, pc}

08006c18 <SDMMC_GetCmdResp7>:
{
 8006c18:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c1a:	4b16      	ldr	r3, [pc, #88]	@ (8006c74 <SDMMC_GetCmdResp7+0x5c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a16      	ldr	r2, [pc, #88]	@ (8006c78 <SDMMC_GetCmdResp7+0x60>)
 8006c20:	fba2 2303 	umull	r2, r3, r2, r3
 8006c24:	0a5b      	lsrs	r3, r3, #9
 8006c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c2a:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8006c2e:	461a      	mov	r2, r3
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b1e2      	cbz	r2, 8006c6e <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDIOx->STA;
 8006c34:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c36:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8006c3a:	d0f8      	beq.n	8006c2e <SDMMC_GetCmdResp7+0x16>
 8006c3c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8006c40:	d1f5      	bne.n	8006c2e <SDMMC_GetCmdResp7+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006c42:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8006c44:	f013 0f04 	tst.w	r3, #4
 8006c48:	d10b      	bne.n	8006c62 <SDMMC_GetCmdResp7+0x4a>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006c4a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8006c4c:	f013 0301 	ands.w	r3, r3, #1
 8006c50:	d10a      	bne.n	8006c68 <SDMMC_GetCmdResp7+0x50>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006c52:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8006c54:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 8006c58:	d00b      	beq.n	8006c72 <SDMMC_GetCmdResp7+0x5a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006c5a:	2240      	movs	r2, #64	@ 0x40
 8006c5c:	638a      	str	r2, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8006c5e:	4618      	mov	r0, r3
 8006c60:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006c62:	2004      	movs	r0, #4
 8006c64:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006c66:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006c68:	2001      	movs	r0, #1
 8006c6a:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c6c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8006c6e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8006c72:	4770      	bx	lr
 8006c74:	20000034 	.word	0x20000034
 8006c78:	10624dd3 	.word	0x10624dd3

08006c7c <SDMMC_CmdOperCond>:
{
 8006c7c:	b510      	push	{r4, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006c82:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8006c86:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006c88:	2308      	movs	r3, #8
 8006c8a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c8c:	2340      	movs	r3, #64	@ 0x40
 8006c8e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c90:	2300      	movs	r3, #0
 8006c92:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c98:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c9a:	a901      	add	r1, sp, #4
 8006c9c:	f7ff fcb3 	bl	8006606 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f7ff ffb9 	bl	8006c18 <SDMMC_GetCmdResp7>
}
 8006ca6:	b006      	add	sp, #24
 8006ca8:	bd10      	pop	{r4, pc}
	...

08006cac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006cac:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006cae:	4903      	ldr	r1, [pc, #12]	@ (8006cbc <MX_FATFS_Init+0x10>)
 8006cb0:	4803      	ldr	r0, [pc, #12]	@ (8006cc0 <MX_FATFS_Init+0x14>)
 8006cb2:	f001 fabb 	bl	800822c <FATFS_LinkDriver>
 8006cb6:	4b03      	ldr	r3, [pc, #12]	@ (8006cc4 <MX_FATFS_Init+0x18>)
 8006cb8:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006cba:	bd08      	pop	{r3, pc}
 8006cbc:	20002728 	.word	0x20002728
 8006cc0:	08011e10 	.word	0x08011e10
 8006cc4:	2000272c 	.word	0x2000272c

08006cc8 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8006cc8:	2000      	movs	r0, #0
 8006cca:	4770      	bx	lr

08006ccc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006ccc:	b500      	push	{lr}
 8006cce:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	460a      	mov	r2, r1
 8006cd6:	4601      	mov	r1, r0
 8006cd8:	4803      	ldr	r0, [pc, #12]	@ (8006ce8 <BSP_SD_ReadBlocks+0x1c>)
 8006cda:	f7fd fe87 	bl	80049ec <HAL_SD_ReadBlocks>
 8006cde:	b100      	cbz	r0, 8006ce2 <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8006ce0:	2001      	movs	r0, #1
  }

  return sd_state;
}
 8006ce2:	b003      	add	sp, #12
 8006ce4:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ce8:	2000256c 	.word	0x2000256c

08006cec <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006cec:	b500      	push	{lr}
 8006cee:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	460a      	mov	r2, r1
 8006cf6:	4601      	mov	r1, r0
 8006cf8:	4803      	ldr	r0, [pc, #12]	@ (8006d08 <BSP_SD_WriteBlocks+0x1c>)
 8006cfa:	f7fd ff9f 	bl	8004c3c <HAL_SD_WriteBlocks>
 8006cfe:	b100      	cbz	r0, 8006d02 <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8006d00:	2001      	movs	r0, #1
  }

  return sd_state;
}
 8006d02:	b003      	add	sp, #12
 8006d04:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d08:	2000256c 	.word	0x2000256c

08006d0c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006d0c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006d0e:	4803      	ldr	r0, [pc, #12]	@ (8006d1c <BSP_SD_GetCardState+0x10>)
 8006d10:	f7fe fb9c 	bl	800544c <HAL_SD_GetCardState>
}
 8006d14:	3804      	subs	r0, #4
 8006d16:	bf18      	it	ne
 8006d18:	2001      	movne	r0, #1
 8006d1a:	bd08      	pop	{r3, pc}
 8006d1c:	2000256c 	.word	0x2000256c

08006d20 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006d20:	b508      	push	{r3, lr}
 8006d22:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006d24:	4801      	ldr	r0, [pc, #4]	@ (8006d2c <BSP_SD_GetCardInfo+0xc>)
 8006d26:	f7fe fb1e 	bl	8005366 <HAL_SD_GetCardInfo>
}
 8006d2a:	bd08      	pop	{r3, pc}
 8006d2c:	2000256c 	.word	0x2000256c

08006d30 <BSP_SD_ReadCpltCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{

}
 8006d30:	4770      	bx	lr

08006d32 <HAL_SD_RxCpltCallback>:
{
 8006d32:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8006d34:	f7ff fffc 	bl	8006d30 <BSP_SD_ReadCpltCallback>
}
 8006d38:	bd08      	pop	{r3, pc}

08006d3a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006d3a:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8006d42:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8006d46:	b002      	add	sp, #8
 8006d48:	4770      	bx	lr
	...

08006d4c <BSP_SD_Init>:
{
 8006d4c:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006d4e:	f7ff fff4 	bl	8006d3a <BSP_SD_IsDetected>
 8006d52:	2801      	cmp	r0, #1
 8006d54:	d001      	beq.n	8006d5a <BSP_SD_Init+0xe>
    return MSD_ERROR;
 8006d56:	2001      	movs	r0, #1
}
 8006d58:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd);
 8006d5a:	4802      	ldr	r0, [pc, #8]	@ (8006d64 <BSP_SD_Init+0x18>)
 8006d5c:	f7fe fae8 	bl	8005330 <HAL_SD_Init>
  return sd_state;
 8006d60:	e7fa      	b.n	8006d58 <BSP_SD_Init+0xc>
 8006d62:	bf00      	nop
 8006d64:	2000256c 	.word	0x2000256c

08006d68 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006d68:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8006d6a:	4b07      	ldr	r3, [pc, #28]	@ (8006d88 <SD_CheckStatus+0x20>)
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006d70:	f7ff ffcc 	bl	8006d0c <BSP_SD_GetCardState>
 8006d74:	b920      	cbnz	r0, 8006d80 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 8006d76:	4a04      	ldr	r2, [pc, #16]	@ (8006d88 <SD_CheckStatus+0x20>)
 8006d78:	7813      	ldrb	r3, [r2, #0]
 8006d7a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006d7e:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8006d80:	4b01      	ldr	r3, [pc, #4]	@ (8006d88 <SD_CheckStatus+0x20>)
 8006d82:	7818      	ldrb	r0, [r3, #0]
}
 8006d84:	bd08      	pop	{r3, pc}
 8006d86:	bf00      	nop
 8006d88:	20000040 	.word	0x20000040

08006d8c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006d8c:	b510      	push	{r4, lr}
 8006d8e:	4604      	mov	r4, r0
Stat = STA_NOINIT;
 8006d90:	4b07      	ldr	r3, [pc, #28]	@ (8006db0 <SD_initialize+0x24>)
 8006d92:	2201      	movs	r2, #1
 8006d94:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006d96:	f7ff ffd9 	bl	8006d4c <BSP_SD_Init>
 8006d9a:	b110      	cbz	r0, 8006da2 <SD_initialize+0x16>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006d9c:	4b04      	ldr	r3, [pc, #16]	@ (8006db0 <SD_initialize+0x24>)
 8006d9e:	7818      	ldrb	r0, [r3, #0]
}
 8006da0:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 8006da2:	4620      	mov	r0, r4
 8006da4:	f7ff ffe0 	bl	8006d68 <SD_CheckStatus>
 8006da8:	4b01      	ldr	r3, [pc, #4]	@ (8006db0 <SD_initialize+0x24>)
 8006daa:	7018      	strb	r0, [r3, #0]
 8006dac:	e7f6      	b.n	8006d9c <SD_initialize+0x10>
 8006dae:	bf00      	nop
 8006db0:	20000040 	.word	0x20000040

08006db4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006db4:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 8006db6:	f7ff ffd7 	bl	8006d68 <SD_CheckStatus>
}
 8006dba:	bd08      	pop	{r3, pc}

08006dbc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006dbc:	b508      	push	{r3, lr}
 8006dbe:	4608      	mov	r0, r1
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc8:	f7ff ff80 	bl	8006ccc <BSP_SD_ReadBlocks>
 8006dcc:	b930      	cbnz	r0, 8006ddc <SD_read+0x20>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006dce:	f7ff ff9d 	bl	8006d0c <BSP_SD_GetCardState>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	d1fa      	bne.n	8006dce <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e7fb      	b.n	8006dd8 <SD_read+0x1c>

08006de0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006de0:	b508      	push	{r3, lr}
 8006de2:	4608      	mov	r0, r1
 8006de4:	4611      	mov	r1, r2
 8006de6:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006de8:	f04f 33ff 	mov.w	r3, #4294967295
 8006dec:	f7ff ff7e 	bl	8006cec <BSP_SD_WriteBlocks>
 8006df0:	b930      	cbnz	r0, 8006e00 <SD_write+0x20>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006df2:	f7ff ff8b 	bl	8006d0c <BSP_SD_GetCardState>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d1fa      	bne.n	8006df2 <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e7fb      	b.n	8006dfc <SD_write+0x1c>

08006e04 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006e04:	b530      	push	{r4, r5, lr}
 8006e06:	b089      	sub	sp, #36	@ 0x24
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006e08:	4b13      	ldr	r3, [pc, #76]	@ (8006e58 <SD_ioctl+0x54>)
 8006e0a:	7818      	ldrb	r0, [r3, #0]
 8006e0c:	f010 0401 	ands.w	r4, r0, #1
 8006e10:	d11b      	bne.n	8006e4a <SD_ioctl+0x46>
 8006e12:	4615      	mov	r5, r2

  switch (cmd)
 8006e14:	2903      	cmp	r1, #3
 8006e16:	d81c      	bhi.n	8006e52 <SD_ioctl+0x4e>
 8006e18:	e8df f001 	tbb	[pc, r1]
 8006e1c:	100a0402 	.word	0x100a0402
 8006e20:	460c      	mov	r4, r1
 8006e22:	e013      	b.n	8006e4c <SD_ioctl+0x48>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006e24:	4668      	mov	r0, sp
 8006e26:	f7ff ff7b 	bl	8006d20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006e2a:	9b06      	ldr	r3, [sp, #24]
 8006e2c:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8006e2e:	e00d      	b.n	8006e4c <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006e30:	4668      	mov	r0, sp
 8006e32:	f7ff ff75 	bl	8006d20 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006e36:	9b07      	ldr	r3, [sp, #28]
 8006e38:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 8006e3a:	e007      	b.n	8006e4c <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006e3c:	4668      	mov	r0, sp
 8006e3e:	f7ff ff6f 	bl	8006d20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006e42:	9b07      	ldr	r3, [sp, #28]
 8006e44:	0a5b      	lsrs	r3, r3, #9
 8006e46:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8006e48:	e000      	b.n	8006e4c <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006e4a:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	b009      	add	sp, #36	@ 0x24
 8006e50:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 8006e52:	2404      	movs	r4, #4
 8006e54:	e7fa      	b.n	8006e4c <SD_ioctl+0x48>
 8006e56:	bf00      	nop
 8006e58:	20000040 	.word	0x20000040

08006e5c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006e5c:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006e5e:	4b04      	ldr	r3, [pc, #16]	@ (8006e70 <disk_status+0x14>)
 8006e60:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8006e64:	6852      	ldr	r2, [r2, #4]
 8006e66:	6852      	ldr	r2, [r2, #4]
 8006e68:	4403      	add	r3, r0
 8006e6a:	7a18      	ldrb	r0, [r3, #8]
 8006e6c:	4790      	blx	r2
  return stat;
}
 8006e6e:	bd08      	pop	{r3, pc}
 8006e70:	20002758 	.word	0x20002758

08006e74 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8006e74:	4b09      	ldr	r3, [pc, #36]	@ (8006e9c <disk_initialize+0x28>)
 8006e76:	5c1b      	ldrb	r3, [r3, r0]
 8006e78:	b973      	cbnz	r3, 8006e98 <disk_initialize+0x24>
{
 8006e7a:	b510      	push	{r4, lr}
 8006e7c:	4604      	mov	r4, r0
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006e7e:	4b07      	ldr	r3, [pc, #28]	@ (8006e9c <disk_initialize+0x28>)
 8006e80:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8006e84:	6852      	ldr	r2, [r2, #4]
 8006e86:	6812      	ldr	r2, [r2, #0]
 8006e88:	4403      	add	r3, r0
 8006e8a:	7a18      	ldrb	r0, [r3, #8]
 8006e8c:	4790      	blx	r2
    if(stat == RES_OK)
 8006e8e:	b910      	cbnz	r0, 8006e96 <disk_initialize+0x22>
    {
      disk.is_initialized[pdrv] = 1;
 8006e90:	4b02      	ldr	r3, [pc, #8]	@ (8006e9c <disk_initialize+0x28>)
 8006e92:	2201      	movs	r2, #1
 8006e94:	551a      	strb	r2, [r3, r4]
    }
  }
  return stat;
}
 8006e96:	bd10      	pop	{r4, pc}
  DSTATUS stat = RES_OK;
 8006e98:	2000      	movs	r0, #0
}
 8006e9a:	4770      	bx	lr
 8006e9c:	20002758 	.word	0x20002758

08006ea0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006ea0:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006ea2:	4c04      	ldr	r4, [pc, #16]	@ (8006eb4 <disk_read+0x14>)
 8006ea4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8006ea8:	686d      	ldr	r5, [r5, #4]
 8006eaa:	68ad      	ldr	r5, [r5, #8]
 8006eac:	4404      	add	r4, r0
 8006eae:	7a20      	ldrb	r0, [r4, #8]
 8006eb0:	47a8      	blx	r5
  return res;
}
 8006eb2:	bd38      	pop	{r3, r4, r5, pc}
 8006eb4:	20002758 	.word	0x20002758

08006eb8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006eb8:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006eba:	4c04      	ldr	r4, [pc, #16]	@ (8006ecc <disk_write+0x14>)
 8006ebc:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8006ec0:	686d      	ldr	r5, [r5, #4]
 8006ec2:	68ed      	ldr	r5, [r5, #12]
 8006ec4:	4404      	add	r4, r0
 8006ec6:	7a20      	ldrb	r0, [r4, #8]
 8006ec8:	47a8      	blx	r5
  return res;
}
 8006eca:	bd38      	pop	{r3, r4, r5, pc}
 8006ecc:	20002758 	.word	0x20002758

08006ed0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006ed0:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006ed2:	4b04      	ldr	r3, [pc, #16]	@ (8006ee4 <disk_ioctl+0x14>)
 8006ed4:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8006ed8:	6864      	ldr	r4, [r4, #4]
 8006eda:	6924      	ldr	r4, [r4, #16]
 8006edc:	4403      	add	r3, r0
 8006ede:	7a18      	ldrb	r0, [r3, #8]
 8006ee0:	47a0      	blx	r4
  return res;
}
 8006ee2:	bd10      	pop	{r4, pc}
 8006ee4:	20002758 	.word	0x20002758

08006ee8 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 8006ee8:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 8006eea:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8006eec:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8006ef0:	4770      	bx	lr

08006ef2 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 8006ef2:	78c3      	ldrb	r3, [r0, #3]
	rv = rv << 8 | ptr[2];
 8006ef4:	7882      	ldrb	r2, [r0, #2]
 8006ef6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	rv = rv << 8 | ptr[1];
 8006efa:	7843      	ldrb	r3, [r0, #1]
 8006efc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8006f00:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8006f02:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8006f06:	4770      	bx	lr

08006f08 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8006f08:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 8006f0a:	0a09      	lsrs	r1, r1, #8
 8006f0c:	7041      	strb	r1, [r0, #1]
}
 8006f0e:	4770      	bx	lr

08006f10 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8006f10:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f12:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8006f16:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f18:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8006f1c:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8006f1e:	0e09      	lsrs	r1, r1, #24
 8006f20:	70c1      	strb	r1, [r0, #3]
}
 8006f22:	4770      	bx	lr

08006f24 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 8006f24:	4694      	mov	ip, r2
 8006f26:	b132      	cbz	r2, 8006f36 <mem_cpy+0x12>
		do {
			*d++ = *s++;
 8006f28:	780a      	ldrb	r2, [r1, #0]
 8006f2a:	3101      	adds	r1, #1
 8006f2c:	7002      	strb	r2, [r0, #0]
 8006f2e:	3001      	adds	r0, #1
		} while (--cnt);
 8006f30:	f1bc 0c01 	subs.w	ip, ip, #1
 8006f34:	d1f8      	bne.n	8006f28 <mem_cpy+0x4>
	}
}
 8006f36:	4770      	bx	lr

08006f38 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8006f38:	7001      	strb	r1, [r0, #0]
 8006f3a:	3001      	adds	r0, #1
	} while (--cnt);
 8006f3c:	3a01      	subs	r2, #1
 8006f3e:	d1fb      	bne.n	8006f38 <mem_set>
}
 8006f40:	4770      	bx	lr

08006f42 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006f42:	4684      	mov	ip, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 8006f44:	f89c 0000 	ldrb.w	r0, [ip]
 8006f48:	f10c 0c01 	add.w	ip, ip, #1
 8006f4c:	780b      	ldrb	r3, [r1, #0]
 8006f4e:	3101      	adds	r1, #1
 8006f50:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 8006f52:	3a01      	subs	r2, #1
 8006f54:	d001      	beq.n	8006f5a <mem_cmp+0x18>
 8006f56:	2800      	cmp	r0, #0
 8006f58:	d0f4      	beq.n	8006f44 <mem_cmp+0x2>

	return r;
}
 8006f5a:	4770      	bx	lr

08006f5c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006f5c:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 8006f5e:	e000      	b.n	8006f62 <chk_chr+0x6>
 8006f60:	3301      	adds	r3, #1
 8006f62:	7818      	ldrb	r0, [r3, #0]
 8006f64:	b108      	cbz	r0, 8006f6a <chk_chr+0xe>
 8006f66:	4288      	cmp	r0, r1
 8006f68:	d1fa      	bne.n	8006f60 <chk_chr+0x4>
	return *str;
}
 8006f6a:	4770      	bx	lr

08006f6c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006f6c:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f6e:	2500      	movs	r5, #0
 8006f70:	462b      	mov	r3, r5
 8006f72:	e001      	b.n	8006f78 <chk_lock+0xc>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8006f74:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f76:	3301      	adds	r3, #1
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d815      	bhi.n	8006fa8 <chk_lock+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 8006f7c:	011a      	lsls	r2, r3, #4
 8006f7e:	4c17      	ldr	r4, [pc, #92]	@ (8006fdc <chk_lock+0x70>)
 8006f80:	58a2      	ldr	r2, [r4, r2]
 8006f82:	2a00      	cmp	r2, #0
 8006f84:	d0f6      	beq.n	8006f74 <chk_lock+0x8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006f86:	6804      	ldr	r4, [r0, #0]
 8006f88:	42a2      	cmp	r2, r4
 8006f8a:	d1f4      	bne.n	8006f76 <chk_lock+0xa>
				Files[i].clu == dp->obj.sclust &&
 8006f8c:	4a13      	ldr	r2, [pc, #76]	@ (8006fdc <chk_lock+0x70>)
 8006f8e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8006f92:	6854      	ldr	r4, [r2, #4]
 8006f94:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006f96:	4294      	cmp	r4, r2
 8006f98:	d1ed      	bne.n	8006f76 <chk_lock+0xa>
				Files[i].ofs == dp->dptr) break;
 8006f9a:	4a10      	ldr	r2, [pc, #64]	@ (8006fdc <chk_lock+0x70>)
 8006f9c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8006fa0:	6894      	ldr	r4, [r2, #8]
 8006fa2:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 8006fa4:	4294      	cmp	r4, r2
 8006fa6:	d1e6      	bne.n	8006f76 <chk_lock+0xa>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d00a      	beq.n	8006fc2 <chk_lock+0x56>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006fac:	b9a1      	cbnz	r1, 8006fd8 <chk_lock+0x6c>
 8006fae:	4a0b      	ldr	r2, [pc, #44]	@ (8006fdc <chk_lock+0x70>)
 8006fb0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8006fb4:	899b      	ldrh	r3, [r3, #12]
 8006fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fba:	d00b      	beq.n	8006fd4 <chk_lock+0x68>
 8006fbc:	2000      	movs	r0, #0
}
 8006fbe:	bc30      	pop	{r4, r5}
 8006fc0:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006fc2:	b92d      	cbnz	r5, 8006fd0 <chk_lock+0x64>
 8006fc4:	2902      	cmp	r1, #2
 8006fc6:	d001      	beq.n	8006fcc <chk_lock+0x60>
 8006fc8:	2012      	movs	r0, #18
 8006fca:	e7f8      	b.n	8006fbe <chk_lock+0x52>
 8006fcc:	2000      	movs	r0, #0
 8006fce:	e7f6      	b.n	8006fbe <chk_lock+0x52>
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	e7f4      	b.n	8006fbe <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006fd4:	2010      	movs	r0, #16
 8006fd6:	e7f2      	b.n	8006fbe <chk_lock+0x52>
 8006fd8:	2010      	movs	r0, #16
 8006fda:	e7f0      	b.n	8006fbe <chk_lock+0x52>
 8006fdc:	20002730 	.word	0x20002730

08006fe0 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	e000      	b.n	8006fe6 <enq_lock+0x6>
 8006fe4:	3001      	adds	r0, #1
 8006fe6:	2801      	cmp	r0, #1
 8006fe8:	d804      	bhi.n	8006ff4 <enq_lock+0x14>
 8006fea:	0103      	lsls	r3, r0, #4
 8006fec:	4a03      	ldr	r2, [pc, #12]	@ (8006ffc <enq_lock+0x1c>)
 8006fee:	58d3      	ldr	r3, [r2, r3]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1f7      	bne.n	8006fe4 <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 8006ff4:	3802      	subs	r0, #2
 8006ff6:	bf18      	it	ne
 8006ff8:	2001      	movne	r0, #1
 8006ffa:	4770      	bx	lr
 8006ffc:	20002730 	.word	0x20002730

08007000 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007000:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007002:	2300      	movs	r3, #0
 8007004:	e000      	b.n	8007008 <inc_lock+0x8>
 8007006:	3301      	adds	r3, #1
 8007008:	2b01      	cmp	r3, #1
 800700a:	d813      	bhi.n	8007034 <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 800700c:	011a      	lsls	r2, r3, #4
 800700e:	4c23      	ldr	r4, [pc, #140]	@ (800709c <inc_lock+0x9c>)
 8007010:	58a4      	ldr	r4, [r4, r2]
 8007012:	6802      	ldr	r2, [r0, #0]
 8007014:	4294      	cmp	r4, r2
 8007016:	d1f6      	bne.n	8007006 <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 8007018:	4a20      	ldr	r2, [pc, #128]	@ (800709c <inc_lock+0x9c>)
 800701a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800701e:	6854      	ldr	r4, [r2, #4]
 8007020:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007022:	4294      	cmp	r4, r2
 8007024:	d1ef      	bne.n	8007006 <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 8007026:	4a1d      	ldr	r2, [pc, #116]	@ (800709c <inc_lock+0x9c>)
 8007028:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800702c:	6894      	ldr	r4, [r2, #8]
 800702e:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 8007030:	4294      	cmp	r4, r2
 8007032:	d1e8      	bne.n	8007006 <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007034:	2b02      	cmp	r3, #2
 8007036:	d008      	beq.n	800704a <inc_lock+0x4a>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007038:	b1f9      	cbz	r1, 800707a <inc_lock+0x7a>
 800703a:	4a18      	ldr	r2, [pc, #96]	@ (800709c <inc_lock+0x9c>)
 800703c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8007040:	8992      	ldrh	r2, [r2, #12]
 8007042:	bb4a      	cbnz	r2, 8007098 <inc_lock+0x98>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007044:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007048:	e01d      	b.n	8007086 <inc_lock+0x86>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800704a:	2300      	movs	r3, #0
 800704c:	2b01      	cmp	r3, #1
 800704e:	d805      	bhi.n	800705c <inc_lock+0x5c>
 8007050:	011a      	lsls	r2, r3, #4
 8007052:	4c12      	ldr	r4, [pc, #72]	@ (800709c <inc_lock+0x9c>)
 8007054:	58a2      	ldr	r2, [r4, r2]
 8007056:	b10a      	cbz	r2, 800705c <inc_lock+0x5c>
 8007058:	3301      	adds	r3, #1
 800705a:	e7f7      	b.n	800704c <inc_lock+0x4c>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800705c:	2b02      	cmp	r3, #2
 800705e:	d019      	beq.n	8007094 <inc_lock+0x94>
		Files[i].fs = dp->obj.fs;
 8007060:	4d0e      	ldr	r5, [pc, #56]	@ (800709c <inc_lock+0x9c>)
 8007062:	011c      	lsls	r4, r3, #4
 8007064:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 8007068:	6806      	ldr	r6, [r0, #0]
 800706a:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 800706c:	6884      	ldr	r4, [r0, #8]
 800706e:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 8007070:	6940      	ldr	r0, [r0, #20]
 8007072:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8007074:	2000      	movs	r0, #0
 8007076:	8190      	strh	r0, [r2, #12]
 8007078:	e7de      	b.n	8007038 <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800707a:	4a08      	ldr	r2, [pc, #32]	@ (800709c <inc_lock+0x9c>)
 800707c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8007080:	8992      	ldrh	r2, [r2, #12]
 8007082:	3201      	adds	r2, #1
 8007084:	b292      	uxth	r2, r2
 8007086:	4905      	ldr	r1, [pc, #20]	@ (800709c <inc_lock+0x9c>)
 8007088:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800708c:	818a      	strh	r2, [r1, #12]

	return i + 1;
 800708e:	1c58      	adds	r0, r3, #1
}
 8007090:	bc70      	pop	{r4, r5, r6}
 8007092:	4770      	bx	lr
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007094:	2000      	movs	r0, #0
 8007096:	e7fb      	b.n	8007090 <inc_lock+0x90>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007098:	2000      	movs	r0, #0
 800709a:	e7f9      	b.n	8007090 <inc_lock+0x90>
 800709c:	20002730 	.word	0x20002730

080070a0 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80070a0:	3801      	subs	r0, #1
 80070a2:	2801      	cmp	r0, #1
 80070a4:	d815      	bhi.n	80070d2 <dec_lock+0x32>
		n = Files[i].ctr;
 80070a6:	4b0d      	ldr	r3, [pc, #52]	@ (80070dc <dec_lock+0x3c>)
 80070a8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80070ac:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80070ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070b2:	d003      	beq.n	80070bc <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 80070b4:	b143      	cbz	r3, 80070c8 <dec_lock+0x28>
 80070b6:	3b01      	subs	r3, #1
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	e000      	b.n	80070be <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80070bc:	2300      	movs	r3, #0
		Files[i].ctr = n;
 80070be:	4a07      	ldr	r2, [pc, #28]	@ (80070dc <dec_lock+0x3c>)
 80070c0:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80070c4:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80070c6:	b933      	cbnz	r3, 80070d6 <dec_lock+0x36>
 80070c8:	0103      	lsls	r3, r0, #4
 80070ca:	2000      	movs	r0, #0
 80070cc:	4a03      	ldr	r2, [pc, #12]	@ (80070dc <dec_lock+0x3c>)
 80070ce:	50d0      	str	r0, [r2, r3]
 80070d0:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80070d2:	2002      	movs	r0, #2
 80070d4:	4770      	bx	lr
		res = FR_OK;
 80070d6:	2000      	movs	r0, #0
	}
	return res;
}
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	20002730 	.word	0x20002730

080070e0 <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80070e0:	2300      	movs	r3, #0
 80070e2:	e003      	b.n	80070ec <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 80070e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070e8:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 80070ea:	3301      	adds	r3, #1
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d811      	bhi.n	8007114 <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80070f0:	011a      	lsls	r2, r3, #4
 80070f2:	4909      	ldr	r1, [pc, #36]	@ (8007118 <clear_lock+0x38>)
 80070f4:	588a      	ldr	r2, [r1, r2]
 80070f6:	4282      	cmp	r2, r0
 80070f8:	d1f7      	bne.n	80070ea <clear_lock+0xa>
{
 80070fa:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 80070fc:	011a      	lsls	r2, r3, #4
 80070fe:	2400      	movs	r4, #0
 8007100:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 8007102:	3301      	adds	r3, #1
 8007104:	2b01      	cmp	r3, #1
 8007106:	d8ed      	bhi.n	80070e4 <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007108:	011a      	lsls	r2, r3, #4
 800710a:	4903      	ldr	r1, [pc, #12]	@ (8007118 <clear_lock+0x38>)
 800710c:	588a      	ldr	r2, [r1, r2]
 800710e:	4282      	cmp	r2, r0
 8007110:	d1f7      	bne.n	8007102 <clear_lock+0x22>
 8007112:	e7f3      	b.n	80070fc <clear_lock+0x1c>
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	20002730 	.word	0x20002730

0800711c <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 800711c:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800711e:	6983      	ldr	r3, [r0, #24]
 8007120:	3b02      	subs	r3, #2
 8007122:	428b      	cmp	r3, r1
 8007124:	d904      	bls.n	8007130 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8007126:	8943      	ldrh	r3, [r0, #10]
 8007128:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 800712a:	fb01 0003 	mla	r0, r1, r3, r0
 800712e:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007130:	2000      	movs	r0, #0
}
 8007132:	4770      	bx	lr

08007134 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007134:	b570      	push	{r4, r5, r6, lr}
 8007136:	4606      	mov	r6, r0
 8007138:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800713a:	f101 001a 	add.w	r0, r1, #26
 800713e:	f7ff fed3 	bl	8006ee8 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 8007142:	7833      	ldrb	r3, [r6, #0]
 8007144:	2b03      	cmp	r3, #3
 8007146:	d000      	beq.n	800714a <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 8007148:	bd70      	pop	{r4, r5, r6, pc}
 800714a:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800714c:	f105 0014 	add.w	r0, r5, #20
 8007150:	f7ff feca 	bl	8006ee8 <ld_word>
 8007154:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 8007158:	e7f6      	b.n	8007148 <ld_clust+0x14>

0800715a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800715a:	b570      	push	{r4, r5, r6, lr}
 800715c:	4606      	mov	r6, r0
 800715e:	460c      	mov	r4, r1
 8007160:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007162:	b291      	uxth	r1, r2
 8007164:	f104 001a 	add.w	r0, r4, #26
 8007168:	f7ff fece 	bl	8006f08 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800716c:	7833      	ldrb	r3, [r6, #0]
 800716e:	2b03      	cmp	r3, #3
 8007170:	d000      	beq.n	8007174 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 8007172:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007174:	0c29      	lsrs	r1, r5, #16
 8007176:	f104 0014 	add.w	r0, r4, #20
 800717a:	f7ff fec5 	bl	8006f08 <st_word>
}
 800717e:	e7f8      	b.n	8007172 <st_clust+0x18>

08007180 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007184:	4681      	mov	r9, r0
 8007186:	468a      	mov	sl, r1
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007188:	680f      	ldr	r7, [r1, #0]
 800718a:	f100 0b24 	add.w	fp, r0, #36	@ 0x24
	mem_set(sfn, ' ', 11);
 800718e:	220b      	movs	r2, #11
 8007190:	2120      	movs	r1, #32
 8007192:	4658      	mov	r0, fp
 8007194:	f7ff fed0 	bl	8006f38 <mem_set>
	si = i = 0; ni = 8;
 8007198:	2600      	movs	r6, #0
 800719a:	4633      	mov	r3, r6
 800719c:	f04f 0808 	mov.w	r8, #8
 80071a0:	e02c      	b.n	80071fc <create_name+0x7c>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ') break; 			/* Break if end of the path name */
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80071a2:	3501      	adds	r5, #1
 80071a4:	5d7b      	ldrb	r3, [r7, r5]
 80071a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80071a8:	d0fb      	beq.n	80071a2 <create_name+0x22>
 80071aa:	2b5c      	cmp	r3, #92	@ 0x5c
 80071ac:	d0f9      	beq.n	80071a2 <create_name+0x22>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80071ae:	442f      	add	r7, r5
 80071b0:	f8ca 7000 	str.w	r7, [sl]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80071b4:	2e00      	cmp	r6, #0
 80071b6:	d043      	beq.n	8007240 <create_name+0xc0>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80071b8:	f899 3024 	ldrb.w	r3, [r9, #36]	@ 0x24
 80071bc:	2be5      	cmp	r3, #229	@ 0xe5
 80071be:	d035      	beq.n	800722c <create_name+0xac>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80071c0:	2c20      	cmp	r4, #32
 80071c2:	d837      	bhi.n	8007234 <create_name+0xb4>
 80071c4:	2304      	movs	r3, #4
 80071c6:	f889 302f 	strb.w	r3, [r9, #47]	@ 0x2f

	return FR_OK;
 80071ca:	2000      	movs	r0, #0
 80071cc:	e028      	b.n	8007220 <create_name+0xa0>
			i = 8; ni = 11;				/* Goto extension */
 80071ce:	2608      	movs	r6, #8
 80071d0:	f04f 080b 	mov.w	r8, #11
 80071d4:	e011      	b.n	80071fa <create_name+0x7a>
		if (c >= 0x80) {				/* Extended character? */
 80071d6:	f014 0f80 	tst.w	r4, #128	@ 0x80
 80071da:	d123      	bne.n	8007224 <create_name+0xa4>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80071dc:	4621      	mov	r1, r4
 80071de:	4819      	ldr	r0, [pc, #100]	@ (8007244 <create_name+0xc4>)
 80071e0:	f7ff febc 	bl	8006f5c <chk_chr>
 80071e4:	bb50      	cbnz	r0, 800723c <create_name+0xbc>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80071e6:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b19      	cmp	r3, #25
 80071ee:	d801      	bhi.n	80071f4 <create_name+0x74>
 80071f0:	3c20      	subs	r4, #32
 80071f2:	b2e4      	uxtb	r4, r4
			sfn[i++] = c;
 80071f4:	f80b 4006 	strb.w	r4, [fp, r6]
 80071f8:	3601      	adds	r6, #1
 80071fa:	462b      	mov	r3, r5
		c = (BYTE)p[si++];
 80071fc:	1c5d      	adds	r5, r3, #1
 80071fe:	5cfc      	ldrb	r4, [r7, r3]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007200:	2c20      	cmp	r4, #32
 8007202:	d9d4      	bls.n	80071ae <create_name+0x2e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007204:	2c2f      	cmp	r4, #47	@ 0x2f
 8007206:	d0cd      	beq.n	80071a4 <create_name+0x24>
 8007208:	2c5c      	cmp	r4, #92	@ 0x5c
 800720a:	d0cb      	beq.n	80071a4 <create_name+0x24>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800720c:	2c2e      	cmp	r4, #46	@ 0x2e
 800720e:	d001      	beq.n	8007214 <create_name+0x94>
 8007210:	45b0      	cmp	r8, r6
 8007212:	d8e0      	bhi.n	80071d6 <create_name+0x56>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007214:	f1b8 0f0b 	cmp.w	r8, #11
 8007218:	d00e      	beq.n	8007238 <create_name+0xb8>
 800721a:	2c2e      	cmp	r4, #46	@ 0x2e
 800721c:	d0d7      	beq.n	80071ce <create_name+0x4e>
 800721e:	2006      	movs	r0, #6
#endif /* _USE_LFN != 0 */
}
 8007220:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007224:	3c80      	subs	r4, #128	@ 0x80
 8007226:	4b08      	ldr	r3, [pc, #32]	@ (8007248 <create_name+0xc8>)
 8007228:	5d1c      	ldrb	r4, [r3, r4]
 800722a:	e7d7      	b.n	80071dc <create_name+0x5c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800722c:	2305      	movs	r3, #5
 800722e:	f889 3024 	strb.w	r3, [r9, #36]	@ 0x24
 8007232:	e7c5      	b.n	80071c0 <create_name+0x40>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007234:	2300      	movs	r3, #0
 8007236:	e7c6      	b.n	80071c6 <create_name+0x46>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007238:	2006      	movs	r0, #6
 800723a:	e7f1      	b.n	8007220 <create_name+0xa0>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800723c:	2006      	movs	r0, #6
 800723e:	e7ef      	b.n	8007220 <create_name+0xa0>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007240:	2006      	movs	r0, #6
 8007242:	e7ed      	b.n	8007220 <create_name+0xa0>
 8007244:	08011e24 	.word	0x08011e24
 8007248:	08011e34 	.word	0x08011e34

0800724c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800724c:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800724e:	6800      	ldr	r0, [r0, #0]
 8007250:	b138      	cbz	r0, 8007262 <get_ldnumber+0x16>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007252:	4602      	mov	r2, r0
 8007254:	7813      	ldrb	r3, [r2, #0]
 8007256:	2b20      	cmp	r3, #32
 8007258:	d906      	bls.n	8007268 <get_ldnumber+0x1c>
 800725a:	2b3a      	cmp	r3, #58	@ 0x3a
 800725c:	d004      	beq.n	8007268 <get_ldnumber+0x1c>
 800725e:	3201      	adds	r2, #1
 8007260:	e7f8      	b.n	8007254 <get_ldnumber+0x8>
	int vol = -1;
 8007262:	f04f 30ff 	mov.w	r0, #4294967295
 8007266:	4770      	bx	lr
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007268:	2b3a      	cmp	r3, #58	@ 0x3a
 800726a:	d001      	beq.n	8007270 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800726c:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 800726e:	4770      	bx	lr
{
 8007270:	b410      	push	{r4}
			i = *tp++ - '0';
 8007272:	4603      	mov	r3, r0
 8007274:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007278:	3830      	subs	r0, #48	@ 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800727a:	2809      	cmp	r0, #9
 800727c:	d808      	bhi.n	8007290 <get_ldnumber+0x44>
 800727e:	429a      	cmp	r2, r3
 8007280:	d002      	beq.n	8007288 <get_ldnumber+0x3c>
	int vol = -1;
 8007282:	f04f 30ff 	mov.w	r0, #4294967295
 8007286:	e005      	b.n	8007294 <get_ldnumber+0x48>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007288:	b938      	cbnz	r0, 800729a <get_ldnumber+0x4e>
					*path = ++tt;
 800728a:	3201      	adds	r2, #1
 800728c:	600a      	str	r2, [r1, #0]
 800728e:	e001      	b.n	8007294 <get_ldnumber+0x48>
	int vol = -1;
 8007290:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007294:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007298:	4770      	bx	lr
	int vol = -1;
 800729a:	f04f 30ff 	mov.w	r0, #4294967295
			return vol;
 800729e:	e7f9      	b.n	8007294 <get_ldnumber+0x48>

080072a0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80072a4:	4604      	mov	r4, r0
 80072a6:	b198      	cbz	r0, 80072d0 <validate+0x30>
 80072a8:	6803      	ldr	r3, [r0, #0]
 80072aa:	b19b      	cbz	r3, 80072d4 <validate+0x34>
 80072ac:	781a      	ldrb	r2, [r3, #0]
 80072ae:	b1a2      	cbz	r2, 80072da <validate+0x3a>
 80072b0:	8881      	ldrh	r1, [r0, #4]
 80072b2:	88da      	ldrh	r2, [r3, #6]
 80072b4:	4291      	cmp	r1, r2
 80072b6:	d003      	beq.n	80072c0 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 80072b8:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80072ba:	2400      	movs	r4, #0
 80072bc:	602c      	str	r4, [r5, #0]
	return res;
}
 80072be:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80072c0:	7858      	ldrb	r0, [r3, #1]
 80072c2:	f7ff fdcb 	bl	8006e5c <disk_status>
 80072c6:	f010 0001 	ands.w	r0, r0, #1
 80072ca:	d109      	bne.n	80072e0 <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80072cc:	6824      	ldr	r4, [r4, #0]
 80072ce:	e7f5      	b.n	80072bc <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 80072d0:	2009      	movs	r0, #9
 80072d2:	e7f3      	b.n	80072bc <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80072d4:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 80072d6:	2009      	movs	r0, #9
 80072d8:	e7f0      	b.n	80072bc <validate+0x1c>
 80072da:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80072dc:	2400      	movs	r4, #0
 80072de:	e7ed      	b.n	80072bc <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 80072e0:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80072e2:	2400      	movs	r4, #0
 80072e4:	e7ea      	b.n	80072bc <validate+0x1c>

080072e6 <sync_window>:
{
 80072e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80072ea:	78c5      	ldrb	r5, [r0, #3]
 80072ec:	b915      	cbnz	r5, 80072f4 <sync_window+0xe>
}
 80072ee:	4628      	mov	r0, r5
 80072f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f4:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 80072f6:	6b07      	ldr	r7, [r0, #48]	@ 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80072f8:	f100 0834 	add.w	r8, r0, #52	@ 0x34
 80072fc:	2301      	movs	r3, #1
 80072fe:	463a      	mov	r2, r7
 8007300:	4641      	mov	r1, r8
 8007302:	7840      	ldrb	r0, [r0, #1]
 8007304:	f7ff fdd8 	bl	8006eb8 <disk_write>
 8007308:	4605      	mov	r5, r0
 800730a:	b9a0      	cbnz	r0, 8007336 <sync_window+0x50>
			fs->wflag = 0;
 800730c:	2300      	movs	r3, #0
 800730e:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007310:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007312:	1afb      	subs	r3, r7, r3
 8007314:	69e2      	ldr	r2, [r4, #28]
 8007316:	4293      	cmp	r3, r2
 8007318:	d2e9      	bcs.n	80072ee <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800731a:	78a6      	ldrb	r6, [r4, #2]
 800731c:	e008      	b.n	8007330 <sync_window+0x4a>
					wsect += fs->fsize;
 800731e:	69e3      	ldr	r3, [r4, #28]
 8007320:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8007322:	2301      	movs	r3, #1
 8007324:	463a      	mov	r2, r7
 8007326:	4641      	mov	r1, r8
 8007328:	7860      	ldrb	r0, [r4, #1]
 800732a:	f7ff fdc5 	bl	8006eb8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800732e:	3e01      	subs	r6, #1
 8007330:	2e01      	cmp	r6, #1
 8007332:	d8f4      	bhi.n	800731e <sync_window+0x38>
 8007334:	e7db      	b.n	80072ee <sync_window+0x8>
			res = FR_DISK_ERR;
 8007336:	2501      	movs	r5, #1
 8007338:	e7d9      	b.n	80072ee <sync_window+0x8>

0800733a <move_window>:
{
 800733a:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800733c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800733e:	428b      	cmp	r3, r1
 8007340:	d102      	bne.n	8007348 <move_window+0xe>
	FRESULT res = FR_OK;
 8007342:	2600      	movs	r6, #0
}
 8007344:	4630      	mov	r0, r6
 8007346:	bd70      	pop	{r4, r5, r6, pc}
 8007348:	4604      	mov	r4, r0
 800734a:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 800734c:	f7ff ffcb 	bl	80072e6 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007350:	4606      	mov	r6, r0
 8007352:	2800      	cmp	r0, #0
 8007354:	d1f6      	bne.n	8007344 <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007356:	2301      	movs	r3, #1
 8007358:	462a      	mov	r2, r5
 800735a:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 800735e:	7860      	ldrb	r0, [r4, #1]
 8007360:	f7ff fd9e 	bl	8006ea0 <disk_read>
 8007364:	b110      	cbz	r0, 800736c <move_window+0x32>
				res = FR_DISK_ERR;
 8007366:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007368:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 800736c:	6325      	str	r5, [r4, #48]	@ 0x30
 800736e:	e7e9      	b.n	8007344 <move_window+0xa>

08007370 <check_fs>:
{
 8007370:	b538      	push	{r3, r4, r5, lr}
 8007372:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007374:	2300      	movs	r3, #0
 8007376:	70c3      	strb	r3, [r0, #3]
 8007378:	f04f 33ff 	mov.w	r3, #4294967295
 800737c:	6303      	str	r3, [r0, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800737e:	f7ff ffdc 	bl	800733a <move_window>
 8007382:	bb30      	cbnz	r0, 80073d2 <check_fs+0x62>
 8007384:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007386:	f204 2032 	addw	r0, r4, #562	@ 0x232
 800738a:	f7ff fdad 	bl	8006ee8 <ld_word>
 800738e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007392:	4298      	cmp	r0, r3
 8007394:	d11f      	bne.n	80073d6 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007396:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 800739a:	2be9      	cmp	r3, #233	@ 0xe9
 800739c:	d007      	beq.n	80073ae <check_fs+0x3e>
 800739e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80073a0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80073a4:	4a0d      	ldr	r2, [pc, #52]	@ (80073dc <check_fs+0x6c>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d001      	beq.n	80073ae <check_fs+0x3e>
	return 2;
 80073aa:	2502      	movs	r5, #2
 80073ac:	e014      	b.n	80073d8 <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80073ae:	f104 006a 	add.w	r0, r4, #106	@ 0x6a
 80073b2:	f7ff fd9e 	bl	8006ef2 <ld_dword>
 80073b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80073ba:	4b09      	ldr	r3, [pc, #36]	@ (80073e0 <check_fs+0x70>)
 80073bc:	4298      	cmp	r0, r3
 80073be:	d00b      	beq.n	80073d8 <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80073c0:	f104 0086 	add.w	r0, r4, #134	@ 0x86
 80073c4:	f7ff fd95 	bl	8006ef2 <ld_dword>
 80073c8:	4b06      	ldr	r3, [pc, #24]	@ (80073e4 <check_fs+0x74>)
 80073ca:	4298      	cmp	r0, r3
 80073cc:	d004      	beq.n	80073d8 <check_fs+0x68>
	return 2;
 80073ce:	2502      	movs	r5, #2
 80073d0:	e002      	b.n	80073d8 <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80073d2:	2504      	movs	r5, #4
 80073d4:	e000      	b.n	80073d8 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80073d6:	2503      	movs	r5, #3
}
 80073d8:	4628      	mov	r0, r5
 80073da:	bd38      	pop	{r3, r4, r5, pc}
 80073dc:	009000eb 	.word	0x009000eb
 80073e0:	00544146 	.word	0x00544146
 80073e4:	33544146 	.word	0x33544146

080073e8 <find_volume>:
{
 80073e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ec:	b087      	sub	sp, #28
 80073ee:	460d      	mov	r5, r1
 80073f0:	4616      	mov	r6, r2
	*rfs = 0;
 80073f2:	2300      	movs	r3, #0
 80073f4:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 80073f6:	f7ff ff29 	bl	800724c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80073fa:	1e07      	subs	r7, r0, #0
 80073fc:	f2c0 8167 	blt.w	80076ce <find_volume+0x2e6>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007400:	4bbe      	ldr	r3, [pc, #760]	@ (80076fc <find_volume+0x314>)
 8007402:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007406:	2c00      	cmp	r4, #0
 8007408:	f000 8166 	beq.w	80076d8 <find_volume+0x2f0>
	*rfs = fs;							/* Return pointer to the file system object */
 800740c:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800740e:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007412:	7823      	ldrb	r3, [r4, #0]
 8007414:	b173      	cbz	r3, 8007434 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8007416:	7860      	ldrb	r0, [r4, #1]
 8007418:	f7ff fd20 	bl	8006e5c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800741c:	f010 0501 	ands.w	r5, r0, #1
 8007420:	d108      	bne.n	8007434 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007422:	2e00      	cmp	r6, #0
 8007424:	f000 8154 	beq.w	80076d0 <find_volume+0x2e8>
 8007428:	f010 0f04 	tst.w	r0, #4
 800742c:	f000 8150 	beq.w	80076d0 <find_volume+0x2e8>
				return FR_WRITE_PROTECTED;
 8007430:	250a      	movs	r5, #10
 8007432:	e14d      	b.n	80076d0 <find_volume+0x2e8>
	fs->fs_type = 0;					/* Clear the file system object */
 8007434:	2300      	movs	r3, #0
 8007436:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007438:	b2f8      	uxtb	r0, r7
 800743a:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800743c:	f7ff fd1a 	bl	8006e74 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007440:	f010 0f01 	tst.w	r0, #1
 8007444:	f040 814a 	bne.w	80076dc <find_volume+0x2f4>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007448:	b11e      	cbz	r6, 8007452 <find_volume+0x6a>
 800744a:	f010 0f04 	tst.w	r0, #4
 800744e:	f040 8147 	bne.w	80076e0 <find_volume+0x2f8>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007452:	f104 020c 	add.w	r2, r4, #12
 8007456:	2102      	movs	r1, #2
 8007458:	7860      	ldrb	r0, [r4, #1]
 800745a:	f7ff fd39 	bl	8006ed0 <disk_ioctl>
 800745e:	4605      	mov	r5, r0
 8007460:	2800      	cmp	r0, #0
 8007462:	f040 813f 	bne.w	80076e4 <find_volume+0x2fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007466:	89a2      	ldrh	r2, [r4, #12]
 8007468:	f5a2 7300 	sub.w	r3, r2, #512	@ 0x200
 800746c:	b29b      	uxth	r3, r3
 800746e:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8007472:	f200 8139 	bhi.w	80076e8 <find_volume+0x300>
 8007476:	1e53      	subs	r3, r2, #1
 8007478:	421a      	tst	r2, r3
 800747a:	d001      	beq.n	8007480 <find_volume+0x98>
 800747c:	2501      	movs	r5, #1
 800747e:	e127      	b.n	80076d0 <find_volume+0x2e8>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007480:	2100      	movs	r1, #0
 8007482:	4620      	mov	r0, r4
 8007484:	f7ff ff74 	bl	8007370 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007488:	2802      	cmp	r0, #2
 800748a:	f000 8088 	beq.w	800759e <find_volume+0x1b6>
	bsect = 0;
 800748e:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007490:	2804      	cmp	r0, #4
 8007492:	f000 812b 	beq.w	80076ec <find_volume+0x304>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007496:	2801      	cmp	r0, #1
 8007498:	f200 812a 	bhi.w	80076f0 <find_volume+0x308>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800749c:	f104 003f 	add.w	r0, r4, #63	@ 0x3f
 80074a0:	f7ff fd22 	bl	8006ee8 <ld_word>
 80074a4:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 80074a8:	4540      	cmp	r0, r8
 80074aa:	f040 8123 	bne.w	80076f4 <find_volume+0x30c>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80074ae:	f104 004a 	add.w	r0, r4, #74	@ 0x4a
 80074b2:	f7ff fd19 	bl	8006ee8 <ld_word>
 80074b6:	4607      	mov	r7, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80074b8:	b920      	cbnz	r0, 80074c4 <find_volume+0xdc>
 80074ba:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80074be:	f7ff fd18 	bl	8006ef2 <ld_dword>
 80074c2:	4607      	mov	r7, r0
		fs->fsize = fasize;
 80074c4:	61e7      	str	r7, [r4, #28]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80074c6:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80074ca:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80074cc:	1e53      	subs	r3, r2, #1
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	f200 8111 	bhi.w	80076f8 <find_volume+0x310>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80074d6:	fb07 f302 	mul.w	r3, r7, r2
 80074da:	9300      	str	r3, [sp, #0]
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80074dc:	f894 9041 	ldrb.w	r9, [r4, #65]	@ 0x41
 80074e0:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80074e4:	f1b9 0f00 	cmp.w	r9, #0
 80074e8:	f000 8110 	beq.w	800770c <find_volume+0x324>
 80074ec:	f109 33ff 	add.w	r3, r9, #4294967295
 80074f0:	ea19 0f03 	tst.w	r9, r3
 80074f4:	f040 810c 	bne.w	8007710 <find_volume+0x328>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80074f8:	f104 0045 	add.w	r0, r4, #69	@ 0x45
 80074fc:	f7ff fcf4 	bl	8006ee8 <ld_word>
 8007500:	4682      	mov	sl, r0
 8007502:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007504:	ea4f 1b58 	mov.w	fp, r8, lsr #5
 8007508:	fbb0 f3fb 	udiv	r3, r0, fp
 800750c:	fb0b 0313 	mls	r3, fp, r3, r0
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	f040 80fe 	bne.w	8007714 <find_volume+0x32c>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007518:	f104 0047 	add.w	r0, r4, #71	@ 0x47
 800751c:	f7ff fce4 	bl	8006ee8 <ld_word>
 8007520:	9001      	str	r0, [sp, #4]
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007522:	b920      	cbnz	r0, 800752e <find_volume+0x146>
 8007524:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8007528:	f7ff fce3 	bl	8006ef2 <ld_dword>
 800752c:	9001      	str	r0, [sp, #4]
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800752e:	f104 0042 	add.w	r0, r4, #66	@ 0x42
 8007532:	f7ff fcd9 	bl	8006ee8 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007536:	4601      	mov	r1, r0
 8007538:	2800      	cmp	r0, #0
 800753a:	f000 80ed 	beq.w	8007718 <find_volume+0x330>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800753e:	9b00      	ldr	r3, [sp, #0]
 8007540:	18c3      	adds	r3, r0, r3
 8007542:	fbba fbfb 	udiv	fp, sl, fp
 8007546:	445b      	add	r3, fp
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007548:	9a01      	ldr	r2, [sp, #4]
 800754a:	429a      	cmp	r2, r3
 800754c:	f0c0 80e6 	bcc.w	800771c <find_volume+0x334>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007550:	1ad2      	subs	r2, r2, r3
 8007552:	fbb2 f0f9 	udiv	r0, r2, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007556:	454a      	cmp	r2, r9
 8007558:	f0c0 80e2 	bcc.w	8007720 <find_volume+0x338>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800755c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007560:	4290      	cmp	r0, r2
 8007562:	d834      	bhi.n	80075ce <find_volume+0x1e6>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007564:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007568:	4290      	cmp	r0, r2
 800756a:	d96a      	bls.n	8007642 <find_volume+0x25a>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800756c:	f04f 0b02 	mov.w	fp, #2
 8007570:	e02f      	b.n	80075d2 <find_volume+0x1ea>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007572:	2000      	movs	r0, #0
 8007574:	ab06      	add	r3, sp, #24
 8007576:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800757a:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800757e:	3601      	adds	r6, #1
 8007580:	2e03      	cmp	r6, #3
 8007582:	d80e      	bhi.n	80075a2 <find_volume+0x1ba>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007584:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8007588:	0133      	lsls	r3, r6, #4
 800758a:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800758e:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007590:	7903      	ldrb	r3, [r0, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d0ed      	beq.n	8007572 <find_volume+0x18a>
 8007596:	3008      	adds	r0, #8
 8007598:	f7ff fcab 	bl	8006ef2 <ld_dword>
 800759c:	e7ea      	b.n	8007574 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800759e:	2600      	movs	r6, #0
 80075a0:	e7ee      	b.n	8007580 <find_volume+0x198>
 80075a2:	2700      	movs	r7, #0
 80075a4:	e00a      	b.n	80075bc <find_volume+0x1d4>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80075a6:	4631      	mov	r1, r6
 80075a8:	4620      	mov	r0, r4
 80075aa:	f7ff fee1 	bl	8007370 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80075ae:	2801      	cmp	r0, #1
 80075b0:	f67f af6e 	bls.w	8007490 <find_volume+0xa8>
 80075b4:	3701      	adds	r7, #1
 80075b6:	2f03      	cmp	r7, #3
 80075b8:	f63f af6a 	bhi.w	8007490 <find_volume+0xa8>
			bsect = br[i];
 80075bc:	ab06      	add	r3, sp, #24
 80075be:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80075c2:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80075c6:	2e00      	cmp	r6, #0
 80075c8:	d1ed      	bne.n	80075a6 <find_volume+0x1be>
 80075ca:	2003      	movs	r0, #3
 80075cc:	e7f2      	b.n	80075b4 <find_volume+0x1cc>
		fmt = FS_FAT32;
 80075ce:	f04f 0b03 	mov.w	fp, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80075d2:	f100 0902 	add.w	r9, r0, #2
 80075d6:	f8c4 9018 	str.w	r9, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80075da:	6226      	str	r6, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80075dc:	198a      	adds	r2, r1, r6
 80075de:	6262      	str	r2, [r4, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80075e0:	4433      	add	r3, r6
 80075e2:	62e3      	str	r3, [r4, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 80075e4:	f1bb 0f03 	cmp.w	fp, #3
 80075e8:	d02e      	beq.n	8007648 <find_volume+0x260>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80075ea:	f1ba 0f00 	cmp.w	sl, #0
 80075ee:	f000 809d 	beq.w	800772c <find_volume+0x344>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80075f2:	9b00      	ldr	r3, [sp, #0]
 80075f4:	441a      	add	r2, r3
 80075f6:	62a2      	str	r2, [r4, #40]	@ 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80075f8:	f1bb 0f02 	cmp.w	fp, #2
 80075fc:	d035      	beq.n	800766a <find_volume+0x282>
 80075fe:	eb09 0249 	add.w	r2, r9, r9, lsl #1
 8007602:	f009 0301 	and.w	r3, r9, #1
 8007606:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800760a:	4443      	add	r3, r8
 800760c:	3b01      	subs	r3, #1
 800760e:	fbb3 f3f8 	udiv	r3, r3, r8
 8007612:	42bb      	cmp	r3, r7
 8007614:	f200 808c 	bhi.w	8007730 <find_volume+0x348>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007618:	f04f 33ff 	mov.w	r3, #4294967295
 800761c:	6163      	str	r3, [r4, #20]
 800761e:	6123      	str	r3, [r4, #16]
		fs->fsi_flag = 0x80;
 8007620:	2380      	movs	r3, #128	@ 0x80
 8007622:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007624:	f1bb 0f03 	cmp.w	fp, #3
 8007628:	d022      	beq.n	8007670 <find_volume+0x288>
	fs->fs_type = fmt;		/* FAT sub-type */
 800762a:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 800762e:	4a34      	ldr	r2, [pc, #208]	@ (8007700 <find_volume+0x318>)
 8007630:	8813      	ldrh	r3, [r2, #0]
 8007632:	3301      	adds	r3, #1
 8007634:	b29b      	uxth	r3, r3
 8007636:	8013      	strh	r3, [r2, #0]
 8007638:	80e3      	strh	r3, [r4, #6]
	clear_lock(fs);
 800763a:	4620      	mov	r0, r4
 800763c:	f7ff fd50 	bl	80070e0 <clear_lock>
	return FR_OK;
 8007640:	e046      	b.n	80076d0 <find_volume+0x2e8>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007642:	f04f 0b01 	mov.w	fp, #1
 8007646:	e7c4      	b.n	80075d2 <find_volume+0x1ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007648:	f104 005e 	add.w	r0, r4, #94	@ 0x5e
 800764c:	f7ff fc4c 	bl	8006ee8 <ld_word>
 8007650:	2800      	cmp	r0, #0
 8007652:	d167      	bne.n	8007724 <find_volume+0x33c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007654:	f1ba 0f00 	cmp.w	sl, #0
 8007658:	d166      	bne.n	8007728 <find_volume+0x340>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800765a:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 800765e:	f7ff fc48 	bl	8006ef2 <ld_dword>
 8007662:	62a0      	str	r0, [r4, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007664:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8007668:	e7cf      	b.n	800760a <find_volume+0x222>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800766a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800766e:	e7cc      	b.n	800760a <find_volume+0x222>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007670:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8007674:	f7ff fc38 	bl	8006ee8 <ld_word>
 8007678:	2801      	cmp	r0, #1
 800767a:	d1d6      	bne.n	800762a <find_volume+0x242>
			&& move_window(fs, bsect + 1) == FR_OK)
 800767c:	1c71      	adds	r1, r6, #1
 800767e:	4620      	mov	r0, r4
 8007680:	f7ff fe5b 	bl	800733a <move_window>
 8007684:	2800      	cmp	r0, #0
 8007686:	d1d0      	bne.n	800762a <find_volume+0x242>
			fs->fsi_flag = 0;
 8007688:	2300      	movs	r3, #0
 800768a:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800768c:	f204 2032 	addw	r0, r4, #562	@ 0x232
 8007690:	f7ff fc2a 	bl	8006ee8 <ld_word>
 8007694:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007698:	4298      	cmp	r0, r3
 800769a:	d1c6      	bne.n	800762a <find_volume+0x242>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800769c:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80076a0:	f7ff fc27 	bl	8006ef2 <ld_dword>
 80076a4:	4b17      	ldr	r3, [pc, #92]	@ (8007704 <find_volume+0x31c>)
 80076a6:	4298      	cmp	r0, r3
 80076a8:	d1bf      	bne.n	800762a <find_volume+0x242>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80076aa:	f504 7006 	add.w	r0, r4, #536	@ 0x218
 80076ae:	f7ff fc20 	bl	8006ef2 <ld_dword>
 80076b2:	4b15      	ldr	r3, [pc, #84]	@ (8007708 <find_volume+0x320>)
 80076b4:	4298      	cmp	r0, r3
 80076b6:	d1b8      	bne.n	800762a <find_volume+0x242>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80076b8:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 80076bc:	f7ff fc19 	bl	8006ef2 <ld_dword>
 80076c0:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80076c2:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 80076c6:	f7ff fc14 	bl	8006ef2 <ld_dword>
 80076ca:	6120      	str	r0, [r4, #16]
 80076cc:	e7ad      	b.n	800762a <find_volume+0x242>
	if (vol < 0) return FR_INVALID_DRIVE;
 80076ce:	250b      	movs	r5, #11
}
 80076d0:	4628      	mov	r0, r5
 80076d2:	b007      	add	sp, #28
 80076d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80076d8:	250c      	movs	r5, #12
 80076da:	e7f9      	b.n	80076d0 <find_volume+0x2e8>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80076dc:	2503      	movs	r5, #3
 80076de:	e7f7      	b.n	80076d0 <find_volume+0x2e8>
		return FR_WRITE_PROTECTED;
 80076e0:	250a      	movs	r5, #10
 80076e2:	e7f5      	b.n	80076d0 <find_volume+0x2e8>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80076e4:	2501      	movs	r5, #1
 80076e6:	e7f3      	b.n	80076d0 <find_volume+0x2e8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80076e8:	2501      	movs	r5, #1
 80076ea:	e7f1      	b.n	80076d0 <find_volume+0x2e8>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80076ec:	2501      	movs	r5, #1
 80076ee:	e7ef      	b.n	80076d0 <find_volume+0x2e8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80076f0:	250d      	movs	r5, #13
 80076f2:	e7ed      	b.n	80076d0 <find_volume+0x2e8>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80076f4:	250d      	movs	r5, #13
 80076f6:	e7eb      	b.n	80076d0 <find_volume+0x2e8>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80076f8:	250d      	movs	r5, #13
 80076fa:	e7e9      	b.n	80076d0 <find_volume+0x2e8>
 80076fc:	20002754 	.word	0x20002754
 8007700:	20002750 	.word	0x20002750
 8007704:	41615252 	.word	0x41615252
 8007708:	61417272 	.word	0x61417272
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800770c:	250d      	movs	r5, #13
 800770e:	e7df      	b.n	80076d0 <find_volume+0x2e8>
 8007710:	250d      	movs	r5, #13
 8007712:	e7dd      	b.n	80076d0 <find_volume+0x2e8>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007714:	250d      	movs	r5, #13
 8007716:	e7db      	b.n	80076d0 <find_volume+0x2e8>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007718:	250d      	movs	r5, #13
 800771a:	e7d9      	b.n	80076d0 <find_volume+0x2e8>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800771c:	250d      	movs	r5, #13
 800771e:	e7d7      	b.n	80076d0 <find_volume+0x2e8>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007720:	250d      	movs	r5, #13
 8007722:	e7d5      	b.n	80076d0 <find_volume+0x2e8>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007724:	250d      	movs	r5, #13
 8007726:	e7d3      	b.n	80076d0 <find_volume+0x2e8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007728:	250d      	movs	r5, #13
 800772a:	e7d1      	b.n	80076d0 <find_volume+0x2e8>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800772c:	250d      	movs	r5, #13
 800772e:	e7cf      	b.n	80076d0 <find_volume+0x2e8>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007730:	250d      	movs	r5, #13
 8007732:	e7cd      	b.n	80076d0 <find_volume+0x2e8>

08007734 <put_fat>:
{
 8007734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007738:	2901      	cmp	r1, #1
 800773a:	f240 8095 	bls.w	8007868 <put_fat+0x134>
 800773e:	4604      	mov	r4, r0
 8007740:	460d      	mov	r5, r1
 8007742:	4617      	mov	r7, r2
 8007744:	6983      	ldr	r3, [r0, #24]
 8007746:	428b      	cmp	r3, r1
 8007748:	f240 8090 	bls.w	800786c <put_fat+0x138>
		switch (fs->fs_type) {
 800774c:	7803      	ldrb	r3, [r0, #0]
 800774e:	2b02      	cmp	r3, #2
 8007750:	d04e      	beq.n	80077f0 <put_fat+0xbc>
 8007752:	2b03      	cmp	r3, #3
 8007754:	d066      	beq.n	8007824 <put_fat+0xf0>
 8007756:	2b01      	cmp	r3, #1
 8007758:	d003      	beq.n	8007762 <put_fat+0x2e>
 800775a:	2602      	movs	r6, #2
}
 800775c:	4630      	mov	r0, r6
 800775e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 8007762:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007766:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8007768:	8983      	ldrh	r3, [r0, #12]
 800776a:	fbb8 f3f3 	udiv	r3, r8, r3
 800776e:	4419      	add	r1, r3
 8007770:	f7ff fde3 	bl	800733a <move_window>
			if (res != FR_OK) break;
 8007774:	4606      	mov	r6, r0
 8007776:	2800      	cmp	r0, #0
 8007778:	d1f0      	bne.n	800775c <put_fat+0x28>
			p = fs->win + bc++ % SS(fs);
 800777a:	f104 0a34 	add.w	sl, r4, #52	@ 0x34
 800777e:	f108 0901 	add.w	r9, r8, #1
 8007782:	89a3      	ldrh	r3, [r4, #12]
 8007784:	fbb8 f2f3 	udiv	r2, r8, r3
 8007788:	fb03 8812 	mls	r8, r3, r2, r8
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800778c:	f015 0501 	ands.w	r5, r5, #1
 8007790:	d024      	beq.n	80077dc <put_fat+0xa8>
 8007792:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8007796:	013a      	lsls	r2, r7, #4
 8007798:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 800779c:	f003 030f 	and.w	r3, r3, #15
 80077a0:	4313      	orrs	r3, r2
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 80077a8:	2301      	movs	r3, #1
 80077aa:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80077ac:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	fbb9 f3f3 	udiv	r3, r9, r3
 80077b4:	4419      	add	r1, r3
 80077b6:	4620      	mov	r0, r4
 80077b8:	f7ff fdbf 	bl	800733a <move_window>
			if (res != FR_OK) break;
 80077bc:	4606      	mov	r6, r0
 80077be:	2800      	cmp	r0, #0
 80077c0:	d1cc      	bne.n	800775c <put_fat+0x28>
			p = fs->win + bc % SS(fs);
 80077c2:	89a3      	ldrh	r3, [r4, #12]
 80077c4:	fbb9 f2f3 	udiv	r2, r9, r3
 80077c8:	fb03 9912 	mls	r9, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80077cc:	b145      	cbz	r5, 80077e0 <put_fat+0xac>
 80077ce:	f3c7 1307 	ubfx	r3, r7, #4, #8
 80077d2:	f80a 3009 	strb.w	r3, [sl, r9]
			fs->wflag = 1;
 80077d6:	2301      	movs	r3, #1
 80077d8:	70e3      	strb	r3, [r4, #3]
			break;
 80077da:	e7bf      	b.n	800775c <put_fat+0x28>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80077dc:	b2fb      	uxtb	r3, r7
 80077de:	e7e1      	b.n	80077a4 <put_fat+0x70>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80077e0:	f81a 3009 	ldrb.w	r3, [sl, r9]
 80077e4:	f3c7 2203 	ubfx	r2, r7, #8, #4
 80077e8:	f023 030f 	bic.w	r3, r3, #15
 80077ec:	4313      	orrs	r3, r2
 80077ee:	e7f0      	b.n	80077d2 <put_fat+0x9e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80077f0:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80077f2:	8983      	ldrh	r3, [r0, #12]
 80077f4:	085b      	lsrs	r3, r3, #1
 80077f6:	fbb5 f3f3 	udiv	r3, r5, r3
 80077fa:	4419      	add	r1, r3
 80077fc:	f7ff fd9d 	bl	800733a <move_window>
			if (res != FR_OK) break;
 8007800:	4606      	mov	r6, r0
 8007802:	2800      	cmp	r0, #0
 8007804:	d1aa      	bne.n	800775c <put_fat+0x28>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007806:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800780a:	006d      	lsls	r5, r5, #1
 800780c:	89a3      	ldrh	r3, [r4, #12]
 800780e:	fbb5 f2f3 	udiv	r2, r5, r3
 8007812:	fb03 5512 	mls	r5, r3, r2, r5
 8007816:	b2b9      	uxth	r1, r7
 8007818:	4428      	add	r0, r5
 800781a:	f7ff fb75 	bl	8006f08 <st_word>
			fs->wflag = 1;
 800781e:	2301      	movs	r3, #1
 8007820:	70e3      	strb	r3, [r4, #3]
			break;
 8007822:	e79b      	b.n	800775c <put_fat+0x28>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007824:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8007826:	8983      	ldrh	r3, [r0, #12]
 8007828:	089b      	lsrs	r3, r3, #2
 800782a:	fbb5 f3f3 	udiv	r3, r5, r3
 800782e:	4419      	add	r1, r3
 8007830:	f7ff fd83 	bl	800733a <move_window>
			if (res != FR_OK) break;
 8007834:	4606      	mov	r6, r0
 8007836:	2800      	cmp	r0, #0
 8007838:	d190      	bne.n	800775c <put_fat+0x28>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800783a:	f027 4770 	bic.w	r7, r7, #4026531840	@ 0xf0000000
 800783e:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8007842:	00ad      	lsls	r5, r5, #2
 8007844:	89a2      	ldrh	r2, [r4, #12]
 8007846:	fbb5 f1f2 	udiv	r1, r5, r2
 800784a:	fb02 5511 	mls	r5, r2, r1, r5
 800784e:	441d      	add	r5, r3
 8007850:	4628      	mov	r0, r5
 8007852:	f7ff fb4e 	bl	8006ef2 <ld_dword>
 8007856:	f000 4170 	and.w	r1, r0, #4026531840	@ 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800785a:	4339      	orrs	r1, r7
 800785c:	4628      	mov	r0, r5
 800785e:	f7ff fb57 	bl	8006f10 <st_dword>
			fs->wflag = 1;
 8007862:	2301      	movs	r3, #1
 8007864:	70e3      	strb	r3, [r4, #3]
			break;
 8007866:	e779      	b.n	800775c <put_fat+0x28>
	FRESULT res = FR_INT_ERR;
 8007868:	2602      	movs	r6, #2
 800786a:	e777      	b.n	800775c <put_fat+0x28>
 800786c:	2602      	movs	r6, #2
 800786e:	e775      	b.n	800775c <put_fat+0x28>

08007870 <get_fat>:
{
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8007872:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007874:	2901      	cmp	r1, #1
 8007876:	d96c      	bls.n	8007952 <get_fat+0xe2>
 8007878:	460c      	mov	r4, r1
 800787a:	69ab      	ldr	r3, [r5, #24]
 800787c:	428b      	cmp	r3, r1
 800787e:	d96a      	bls.n	8007956 <get_fat+0xe6>
		switch (fs->fs_type) {
 8007880:	782b      	ldrb	r3, [r5, #0]
 8007882:	2b02      	cmp	r3, #2
 8007884:	d037      	beq.n	80078f6 <get_fat+0x86>
 8007886:	2b03      	cmp	r3, #3
 8007888:	d04b      	beq.n	8007922 <get_fat+0xb2>
 800788a:	2b01      	cmp	r3, #1
 800788c:	d001      	beq.n	8007892 <get_fat+0x22>
 800788e:	2001      	movs	r0, #1
 8007890:	e060      	b.n	8007954 <get_fat+0xe4>
			bc = (UINT)clst; bc += bc / 2;
 8007892:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007896:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8007898:	89ab      	ldrh	r3, [r5, #12]
 800789a:	fbb6 f3f3 	udiv	r3, r6, r3
 800789e:	4419      	add	r1, r3
 80078a0:	4628      	mov	r0, r5
 80078a2:	f7ff fd4a 	bl	800733a <move_window>
 80078a6:	b110      	cbz	r0, 80078ae <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80078a8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ac:	e052      	b.n	8007954 <get_fat+0xe4>
			wc = fs->win[bc++ % SS(fs)];
 80078ae:	1c77      	adds	r7, r6, #1
 80078b0:	89ab      	ldrh	r3, [r5, #12]
 80078b2:	fbb6 f2f3 	udiv	r2, r6, r3
 80078b6:	fb03 6612 	mls	r6, r3, r2, r6
 80078ba:	442e      	add	r6, r5
 80078bc:	f896 6034 	ldrb.w	r6, [r6, #52]	@ 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078c0:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80078c2:	fbb7 f3f3 	udiv	r3, r7, r3
 80078c6:	4419      	add	r1, r3
 80078c8:	4628      	mov	r0, r5
 80078ca:	f7ff fd36 	bl	800733a <move_window>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	d143      	bne.n	800795a <get_fat+0xea>
			wc |= fs->win[bc % SS(fs)] << 8;
 80078d2:	89ab      	ldrh	r3, [r5, #12]
 80078d4:	fbb7 f2f3 	udiv	r2, r7, r3
 80078d8:	fb03 7712 	mls	r7, r3, r2, r7
 80078dc:	442f      	add	r7, r5
 80078de:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80078e2:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80078e6:	f014 0f01 	tst.w	r4, #1
 80078ea:	d001      	beq.n	80078f0 <get_fat+0x80>
 80078ec:	0900      	lsrs	r0, r0, #4
 80078ee:	e031      	b.n	8007954 <get_fat+0xe4>
 80078f0:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80078f4:	e02e      	b.n	8007954 <get_fat+0xe4>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80078f6:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80078f8:	89ab      	ldrh	r3, [r5, #12]
 80078fa:	085b      	lsrs	r3, r3, #1
 80078fc:	fbb4 f3f3 	udiv	r3, r4, r3
 8007900:	4419      	add	r1, r3
 8007902:	4628      	mov	r0, r5
 8007904:	f7ff fd19 	bl	800733a <move_window>
 8007908:	bb50      	cbnz	r0, 8007960 <get_fat+0xf0>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800790a:	f105 0034 	add.w	r0, r5, #52	@ 0x34
 800790e:	0064      	lsls	r4, r4, #1
 8007910:	89ab      	ldrh	r3, [r5, #12]
 8007912:	fbb4 f2f3 	udiv	r2, r4, r3
 8007916:	fb03 4412 	mls	r4, r3, r2, r4
 800791a:	4420      	add	r0, r4
 800791c:	f7ff fae4 	bl	8006ee8 <ld_word>
			break;
 8007920:	e018      	b.n	8007954 <get_fat+0xe4>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007922:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8007924:	89ab      	ldrh	r3, [r5, #12]
 8007926:	089b      	lsrs	r3, r3, #2
 8007928:	fbb4 f3f3 	udiv	r3, r4, r3
 800792c:	4419      	add	r1, r3
 800792e:	4628      	mov	r0, r5
 8007930:	f7ff fd03 	bl	800733a <move_window>
 8007934:	b9b8      	cbnz	r0, 8007966 <get_fat+0xf6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007936:	f105 0034 	add.w	r0, r5, #52	@ 0x34
 800793a:	00a4      	lsls	r4, r4, #2
 800793c:	89ab      	ldrh	r3, [r5, #12]
 800793e:	fbb4 f2f3 	udiv	r2, r4, r3
 8007942:	fb03 4412 	mls	r4, r3, r2, r4
 8007946:	4420      	add	r0, r4
 8007948:	f7ff fad3 	bl	8006ef2 <ld_dword>
 800794c:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
			break;
 8007950:	e000      	b.n	8007954 <get_fat+0xe4>
		val = 1;	/* Internal error */
 8007952:	2001      	movs	r0, #1
}
 8007954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8007956:	2001      	movs	r0, #1
 8007958:	e7fc      	b.n	8007954 <get_fat+0xe4>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800795a:	f04f 30ff 	mov.w	r0, #4294967295
 800795e:	e7f9      	b.n	8007954 <get_fat+0xe4>
 8007960:	f04f 30ff 	mov.w	r0, #4294967295
 8007964:	e7f6      	b.n	8007954 <get_fat+0xe4>
 8007966:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 800796a:	e7f3      	b.n	8007954 <get_fat+0xe4>

0800796c <dir_sdi>:
{
 800796c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8007970:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007974:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8007978:	d249      	bcs.n	8007a0e <dir_sdi+0xa2>
 800797a:	4607      	mov	r7, r0
 800797c:	460e      	mov	r6, r1
 800797e:	f011 0f1f 	tst.w	r1, #31
 8007982:	d147      	bne.n	8007a14 <dir_sdi+0xa8>
	dp->dptr = ofs;				/* Set current offset */
 8007984:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007986:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007988:	bb1c      	cbnz	r4, 80079d2 <dir_sdi+0x66>
 800798a:	f898 3000 	ldrb.w	r3, [r8]
 800798e:	2b02      	cmp	r3, #2
 8007990:	d901      	bls.n	8007996 <dir_sdi+0x2a>
		clst = fs->dirbase;
 8007992:	f8d8 4028 	ldr.w	r4, [r8, #40]	@ 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007996:	b9e4      	cbnz	r4, 80079d2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007998:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800799c:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 80079a0:	d93a      	bls.n	8007a18 <dir_sdi+0xac>
		dp->sect = fs->dirbase;
 80079a2:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
 80079a6:	61fb      	str	r3, [r7, #28]
	dp->clust = clst;					/* Current cluster# */
 80079a8:	61bc      	str	r4, [r7, #24]
	if (!dp->sect) return FR_INT_ERR;
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	b3e3      	cbz	r3, 8007a28 <dir_sdi+0xbc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80079ae:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 80079b2:	fbb6 f2f2 	udiv	r2, r6, r2
 80079b6:	4413      	add	r3, r2
 80079b8:	61fb      	str	r3, [r7, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80079ba:	f108 0334 	add.w	r3, r8, #52	@ 0x34
 80079be:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 80079c2:	fbb6 f1f2 	udiv	r1, r6, r2
 80079c6:	fb02 6111 	mls	r1, r2, r1, r6
 80079ca:	440b      	add	r3, r1
 80079cc:	623b      	str	r3, [r7, #32]
	return FR_OK;
 80079ce:	2000      	movs	r0, #0
 80079d0:	e01e      	b.n	8007a10 <dir_sdi+0xa4>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80079d2:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 80079d6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80079da:	fb03 f505 	mul.w	r5, r3, r5
		while (ofs >= csz) {				/* Follow cluster chain */
 80079de:	42ae      	cmp	r6, r5
 80079e0:	d30f      	bcc.n	8007a02 <dir_sdi+0x96>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80079e2:	4621      	mov	r1, r4
 80079e4:	4638      	mov	r0, r7
 80079e6:	f7ff ff43 	bl	8007870 <get_fat>
 80079ea:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80079ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80079f0:	d014      	beq.n	8007a1c <dir_sdi+0xb0>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80079f2:	2801      	cmp	r0, #1
 80079f4:	d914      	bls.n	8007a20 <dir_sdi+0xb4>
 80079f6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80079fa:	4283      	cmp	r3, r0
 80079fc:	d912      	bls.n	8007a24 <dir_sdi+0xb8>
			ofs -= csz;
 80079fe:	1b76      	subs	r6, r6, r5
 8007a00:	e7ed      	b.n	80079de <dir_sdi+0x72>
		dp->sect = clust2sect(fs, clst);
 8007a02:	4621      	mov	r1, r4
 8007a04:	4640      	mov	r0, r8
 8007a06:	f7ff fb89 	bl	800711c <clust2sect>
 8007a0a:	61f8      	str	r0, [r7, #28]
 8007a0c:	e7cc      	b.n	80079a8 <dir_sdi+0x3c>
		return FR_INT_ERR;
 8007a0e:	2002      	movs	r0, #2
}
 8007a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
 8007a14:	2002      	movs	r0, #2
 8007a16:	e7fb      	b.n	8007a10 <dir_sdi+0xa4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007a18:	2002      	movs	r0, #2
 8007a1a:	e7f9      	b.n	8007a10 <dir_sdi+0xa4>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007a1c:	2001      	movs	r0, #1
 8007a1e:	e7f7      	b.n	8007a10 <dir_sdi+0xa4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007a20:	2002      	movs	r0, #2
 8007a22:	e7f5      	b.n	8007a10 <dir_sdi+0xa4>
 8007a24:	2002      	movs	r0, #2
 8007a26:	e7f3      	b.n	8007a10 <dir_sdi+0xa4>
	if (!dp->sect) return FR_INT_ERR;
 8007a28:	2002      	movs	r0, #2
 8007a2a:	e7f1      	b.n	8007a10 <dir_sdi+0xa4>

08007a2c <create_chain>:
{
 8007a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a30:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
 8007a32:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8007a34:	460f      	mov	r7, r1
 8007a36:	b951      	cbnz	r1, 8007a4e <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007a38:	f8d6 8010 	ldr.w	r8, [r6, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007a3c:	f1b8 0f00 	cmp.w	r8, #0
 8007a40:	d012      	beq.n	8007a68 <create_chain+0x3c>
 8007a42:	69b3      	ldr	r3, [r6, #24]
 8007a44:	4543      	cmp	r3, r8
 8007a46:	d811      	bhi.n	8007a6c <create_chain+0x40>
 8007a48:	f04f 0801 	mov.w	r8, #1
 8007a4c:	e00e      	b.n	8007a6c <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007a4e:	f7ff ff0f 	bl	8007870 <get_fat>
 8007a52:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007a54:	2801      	cmp	r0, #1
 8007a56:	d947      	bls.n	8007ae8 <create_chain+0xbc>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007a58:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007a5c:	d049      	beq.n	8007af2 <create_chain+0xc6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007a5e:	69b2      	ldr	r2, [r6, #24]
 8007a60:	4282      	cmp	r2, r0
 8007a62:	d846      	bhi.n	8007af2 <create_chain+0xc6>
		scl = clst;
 8007a64:	46b8      	mov	r8, r7
 8007a66:	e001      	b.n	8007a6c <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007a68:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
 8007a6c:	4644      	mov	r4, r8
 8007a6e:	e00c      	b.n	8007a8a <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007a70:	4621      	mov	r1, r4
 8007a72:	4628      	mov	r0, r5
 8007a74:	f7ff fefc 	bl	8007870 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8007a78:	4603      	mov	r3, r0
 8007a7a:	b178      	cbz	r0, 8007a9c <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007a7c:	2801      	cmp	r0, #1
 8007a7e:	d038      	beq.n	8007af2 <create_chain+0xc6>
 8007a80:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007a84:	d035      	beq.n	8007af2 <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 8007a86:	4544      	cmp	r4, r8
 8007a88:	d032      	beq.n	8007af0 <create_chain+0xc4>
			ncl++;							/* Next cluster */
 8007a8a:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007a8c:	69b3      	ldr	r3, [r6, #24]
 8007a8e:	42a3      	cmp	r3, r4
 8007a90:	d8ee      	bhi.n	8007a70 <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
 8007a92:	f1b8 0f01 	cmp.w	r8, #1
 8007a96:	d929      	bls.n	8007aec <create_chain+0xc0>
				ncl = 2;
 8007a98:	2402      	movs	r4, #2
 8007a9a:	e7e9      	b.n	8007a70 <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa0:	4621      	mov	r1, r4
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	f7ff fe46 	bl	8007734 <put_fat>
		if (res == FR_OK && clst != 0) {
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	b9b0      	cbnz	r0, 8007ada <create_chain+0xae>
 8007aac:	b977      	cbnz	r7, 8007acc <create_chain+0xa0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007aae:	b9a3      	cbnz	r3, 8007ada <create_chain+0xae>
		fs->last_clst = ncl;
 8007ab0:	6134      	str	r4, [r6, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007ab2:	6972      	ldr	r2, [r6, #20]
 8007ab4:	69b3      	ldr	r3, [r6, #24]
 8007ab6:	3b02      	subs	r3, #2
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d801      	bhi.n	8007ac0 <create_chain+0x94>
 8007abc:	3a01      	subs	r2, #1
 8007abe:	6172      	str	r2, [r6, #20]
		fs->fsi_flag |= 1;
 8007ac0:	7933      	ldrb	r3, [r6, #4]
 8007ac2:	f043 0301 	orr.w	r3, r3, #1
 8007ac6:	7133      	strb	r3, [r6, #4]
 8007ac8:	4623      	mov	r3, r4
 8007aca:	e012      	b.n	8007af2 <create_chain+0xc6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007acc:	4622      	mov	r2, r4
 8007ace:	4639      	mov	r1, r7
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	f7ff fe2f 	bl	8007734 <put_fat>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	e7e9      	b.n	8007aae <create_chain+0x82>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d001      	beq.n	8007ae2 <create_chain+0xb6>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e007      	b.n	8007af2 <create_chain+0xc6>
 8007ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae6:	e004      	b.n	8007af2 <create_chain+0xc6>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e002      	b.n	8007af2 <create_chain+0xc6>
				if (ncl > scl) return 0;	/* No free cluster */
 8007aec:	2300      	movs	r3, #0
 8007aee:	e000      	b.n	8007af2 <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007af8 <remove_chain>:
{
 8007af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afa:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 8007afc:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007afe:	2901      	cmp	r1, #1
 8007b00:	d92e      	bls.n	8007b60 <remove_chain+0x68>
 8007b02:	4606      	mov	r6, r0
 8007b04:	4611      	mov	r1, r2
 8007b06:	69ab      	ldr	r3, [r5, #24]
 8007b08:	42a3      	cmp	r3, r4
 8007b0a:	d92b      	bls.n	8007b64 <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007b0c:	b14a      	cbz	r2, 8007b22 <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b12:	4628      	mov	r0, r5
 8007b14:	f7ff fe0e 	bl	8007734 <put_fat>
		if (res != FR_OK) return res;
 8007b18:	4607      	mov	r7, r0
 8007b1a:	b110      	cbz	r0, 8007b22 <remove_chain+0x2a>
 8007b1c:	e023      	b.n	8007b66 <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007b1e:	42a2      	cmp	r2, r4
 8007b20:	d921      	bls.n	8007b66 <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007b22:	4627      	mov	r7, r4
 8007b24:	4621      	mov	r1, r4
 8007b26:	4630      	mov	r0, r6
 8007b28:	f7ff fea2 	bl	8007870 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 8007b2c:	4604      	mov	r4, r0
 8007b2e:	b1e0      	cbz	r0, 8007b6a <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007b30:	2801      	cmp	r0, #1
 8007b32:	d01c      	beq.n	8007b6e <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007b34:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007b38:	d01b      	beq.n	8007b72 <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	4639      	mov	r1, r7
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f7ff fdf8 	bl	8007734 <put_fat>
			if (res != FR_OK) return res;
 8007b44:	4607      	mov	r7, r0
 8007b46:	b970      	cbnz	r0, 8007b66 <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007b48:	696b      	ldr	r3, [r5, #20]
 8007b4a:	69aa      	ldr	r2, [r5, #24]
 8007b4c:	1e91      	subs	r1, r2, #2
 8007b4e:	428b      	cmp	r3, r1
 8007b50:	d2e5      	bcs.n	8007b1e <remove_chain+0x26>
			fs->free_clst++;
 8007b52:	3301      	adds	r3, #1
 8007b54:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 8007b56:	792b      	ldrb	r3, [r5, #4]
 8007b58:	f043 0301 	orr.w	r3, r3, #1
 8007b5c:	712b      	strb	r3, [r5, #4]
 8007b5e:	e7de      	b.n	8007b1e <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007b60:	2702      	movs	r7, #2
 8007b62:	e000      	b.n	8007b66 <remove_chain+0x6e>
 8007b64:	2702      	movs	r7, #2
}
 8007b66:	4638      	mov	r0, r7
 8007b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 8007b6a:	2700      	movs	r7, #0
 8007b6c:	e7fb      	b.n	8007b66 <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007b6e:	2702      	movs	r7, #2
 8007b70:	e7f9      	b.n	8007b66 <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007b72:	2701      	movs	r7, #1
 8007b74:	e7f7      	b.n	8007b66 <remove_chain+0x6e>

08007b76 <dir_next>:
{
 8007b76:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 8007b7a:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007b7c:	6944      	ldr	r4, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007b7e:	69c3      	ldr	r3, [r0, #28]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d074      	beq.n	8007c6e <dir_next+0xf8>
 8007b84:	4605      	mov	r5, r0
 8007b86:	460f      	mov	r7, r1
 8007b88:	3420      	adds	r4, #32
 8007b8a:	f5b4 1f00 	cmp.w	r4, #2097152	@ 0x200000
 8007b8e:	d270      	bcs.n	8007c72 <dir_next+0xfc>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007b90:	89b1      	ldrh	r1, [r6, #12]
 8007b92:	fbb4 f2f1 	udiv	r2, r4, r1
 8007b96:	fb01 4212 	mls	r2, r1, r2, r4
 8007b9a:	b93a      	cbnz	r2, 8007bac <dir_next+0x36>
		dp->sect++;				/* Next sector */
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8007ba0:	6981      	ldr	r1, [r0, #24]
 8007ba2:	b9a1      	cbnz	r1, 8007bce <dir_next+0x58>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007ba4:	8933      	ldrh	r3, [r6, #8]
 8007ba6:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8007baa:	d90c      	bls.n	8007bc6 <dir_next+0x50>
	dp->dptr = ofs;						/* Current entry */
 8007bac:	616c      	str	r4, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007bae:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8007bb2:	89b2      	ldrh	r2, [r6, #12]
 8007bb4:	fbb4 f1f2 	udiv	r1, r4, r2
 8007bb8:	fb02 4411 	mls	r4, r2, r1, r4
 8007bbc:	4423      	add	r3, r4
 8007bbe:	622b      	str	r3, [r5, #32]
	return FR_OK;
 8007bc0:	2000      	movs	r0, #0
}
 8007bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				dp->sect = 0; return FR_NO_FILE;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	61c3      	str	r3, [r0, #28]
 8007bca:	2004      	movs	r0, #4
 8007bcc:	e7f9      	b.n	8007bc2 <dir_next+0x4c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007bce:	89b2      	ldrh	r2, [r6, #12]
 8007bd0:	fbb4 f2f2 	udiv	r2, r4, r2
 8007bd4:	8973      	ldrh	r3, [r6, #10]
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	ea12 0803 	ands.w	r8, r2, r3
 8007bdc:	d1e6      	bne.n	8007bac <dir_next+0x36>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007bde:	f7ff fe47 	bl	8007870 <get_fat>
 8007be2:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007be4:	2801      	cmp	r0, #1
 8007be6:	d946      	bls.n	8007c76 <dir_next+0x100>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007be8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007bec:	d045      	beq.n	8007c7a <dir_next+0x104>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007bee:	69b3      	ldr	r3, [r6, #24]
 8007bf0:	4283      	cmp	r3, r0
 8007bf2:	d834      	bhi.n	8007c5e <dir_next+0xe8>
					if (!stretch) {								/* If no stretch, report EOT */
 8007bf4:	b18f      	cbz	r7, 8007c1a <dir_next+0xa4>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007bf6:	69a9      	ldr	r1, [r5, #24]
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	f7ff ff17 	bl	8007a2c <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007bfe:	4681      	mov	r9, r0
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d03c      	beq.n	8007c7e <dir_next+0x108>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007c04:	2801      	cmp	r0, #1
 8007c06:	d03c      	beq.n	8007c82 <dir_next+0x10c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007c08:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007c0c:	d03b      	beq.n	8007c86 <dir_next+0x110>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007c0e:	4630      	mov	r0, r6
 8007c10:	f7ff fb69 	bl	80072e6 <sync_window>
 8007c14:	b128      	cbz	r0, 8007c22 <dir_next+0xac>
 8007c16:	2001      	movs	r0, #1
 8007c18:	e7d3      	b.n	8007bc2 <dir_next+0x4c>
						dp->sect = 0; return FR_NO_FILE;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	61eb      	str	r3, [r5, #28]
 8007c1e:	2004      	movs	r0, #4
 8007c20:	e7cf      	b.n	8007bc2 <dir_next+0x4c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007c22:	89b2      	ldrh	r2, [r6, #12]
 8007c24:	2100      	movs	r1, #0
 8007c26:	f106 0034 	add.w	r0, r6, #52	@ 0x34
 8007c2a:	f7ff f985 	bl	8006f38 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007c2e:	4649      	mov	r1, r9
 8007c30:	4630      	mov	r0, r6
 8007c32:	f7ff fa73 	bl	800711c <clust2sect>
 8007c36:	6330      	str	r0, [r6, #48]	@ 0x30
 8007c38:	8973      	ldrh	r3, [r6, #10]
 8007c3a:	4598      	cmp	r8, r3
 8007c3c:	d20b      	bcs.n	8007c56 <dir_next+0xe0>
						fs->wflag = 1;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007c42:	4630      	mov	r0, r6
 8007c44:	f7ff fb4f 	bl	80072e6 <sync_window>
 8007c48:	b9f8      	cbnz	r0, 8007c8a <dir_next+0x114>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007c4a:	f108 0801 	add.w	r8, r8, #1
 8007c4e:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8007c50:	3301      	adds	r3, #1
 8007c52:	6333      	str	r3, [r6, #48]	@ 0x30
 8007c54:	e7f0      	b.n	8007c38 <dir_next+0xc2>
					fs->winsect -= n;							/* Restore window offset */
 8007c56:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8007c58:	eba3 0308 	sub.w	r3, r3, r8
 8007c5c:	6333      	str	r3, [r6, #48]	@ 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 8007c5e:	f8c5 9018 	str.w	r9, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8007c62:	4649      	mov	r1, r9
 8007c64:	4630      	mov	r0, r6
 8007c66:	f7ff fa59 	bl	800711c <clust2sect>
 8007c6a:	61e8      	str	r0, [r5, #28]
 8007c6c:	e79e      	b.n	8007bac <dir_next+0x36>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007c6e:	2004      	movs	r0, #4
 8007c70:	e7a7      	b.n	8007bc2 <dir_next+0x4c>
 8007c72:	2004      	movs	r0, #4
 8007c74:	e7a5      	b.n	8007bc2 <dir_next+0x4c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007c76:	2002      	movs	r0, #2
 8007c78:	e7a3      	b.n	8007bc2 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007c7a:	2001      	movs	r0, #1
 8007c7c:	e7a1      	b.n	8007bc2 <dir_next+0x4c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007c7e:	2007      	movs	r0, #7
 8007c80:	e79f      	b.n	8007bc2 <dir_next+0x4c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007c82:	2002      	movs	r0, #2
 8007c84:	e79d      	b.n	8007bc2 <dir_next+0x4c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007c86:	2001      	movs	r0, #1
 8007c88:	e79b      	b.n	8007bc2 <dir_next+0x4c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007c8a:	2001      	movs	r0, #1
 8007c8c:	e799      	b.n	8007bc2 <dir_next+0x4c>

08007c8e <dir_find>:
{
 8007c8e:	b570      	push	{r4, r5, r6, lr}
 8007c90:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8007c92:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007c94:	2100      	movs	r1, #0
 8007c96:	f7ff fe69 	bl	800796c <dir_sdi>
	if (res != FR_OK) return res;
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	b140      	cbz	r0, 8007cb0 <dir_find+0x22>
}
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	bd70      	pop	{r4, r5, r6, pc}
		res = dir_next(dp, 0);	/* Next entry */
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f7ff ff66 	bl	8007b76 <dir_next>
	} while (res == FR_OK);
 8007caa:	4605      	mov	r5, r0
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d1f6      	bne.n	8007c9e <dir_find+0x10>
		res = move_window(fs, dp->sect);
 8007cb0:	69e1      	ldr	r1, [r4, #28]
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f7ff fb41 	bl	800733a <move_window>
		if (res != FR_OK) break;
 8007cb8:	4605      	mov	r5, r0
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	d1ef      	bne.n	8007c9e <dir_find+0x10>
		c = dp->dir[DIR_Name];
 8007cbe:	6a20      	ldr	r0, [r4, #32]
 8007cc0:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007cc2:	b17b      	cbz	r3, 8007ce4 <dir_find+0x56>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007cc4:	7ac3      	ldrb	r3, [r0, #11]
 8007cc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cca:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007ccc:	7ac3      	ldrb	r3, [r0, #11]
 8007cce:	f013 0f08 	tst.w	r3, #8
 8007cd2:	d1e6      	bne.n	8007ca2 <dir_find+0x14>
 8007cd4:	220b      	movs	r2, #11
 8007cd6:	f104 0124 	add.w	r1, r4, #36	@ 0x24
 8007cda:	f7ff f932 	bl	8006f42 <mem_cmp>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d1df      	bne.n	8007ca2 <dir_find+0x14>
 8007ce2:	e7dc      	b.n	8007c9e <dir_find+0x10>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007ce4:	2504      	movs	r5, #4
 8007ce6:	e7da      	b.n	8007c9e <dir_find+0x10>

08007ce8 <follow_path>:
{
 8007ce8:	b530      	push	{r4, r5, lr}
 8007cea:	b083      	sub	sp, #12
 8007cec:	4604      	mov	r4, r0
 8007cee:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 8007cf0:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007cf2:	e001      	b.n	8007cf8 <follow_path+0x10>
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	9301      	str	r3, [sp, #4]
 8007cf8:	9b01      	ldr	r3, [sp, #4]
 8007cfa:	781a      	ldrb	r2, [r3, #0]
 8007cfc:	2a2f      	cmp	r2, #47	@ 0x2f
 8007cfe:	d0f9      	beq.n	8007cf4 <follow_path+0xc>
 8007d00:	2a5c      	cmp	r2, #92	@ 0x5c
 8007d02:	d0f7      	beq.n	8007cf4 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8007d04:	2200      	movs	r2, #0
 8007d06:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	2b1f      	cmp	r3, #31
 8007d0c:	d921      	bls.n	8007d52 <follow_path+0x6a>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007d0e:	a901      	add	r1, sp, #4
 8007d10:	4620      	mov	r0, r4
 8007d12:	f7ff fa35 	bl	8007180 <create_name>
			if (res != FR_OK) break;
 8007d16:	4603      	mov	r3, r0
 8007d18:	bb18      	cbnz	r0, 8007d62 <follow_path+0x7a>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f7ff ffb7 	bl	8007c8e <dir_find>
			ns = dp->fn[NSFLAG];
 8007d20:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8007d24:	4603      	mov	r3, r0
 8007d26:	b9f8      	cbnz	r0, 8007d68 <follow_path+0x80>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007d28:	f012 0f04 	tst.w	r2, #4
 8007d2c:	d119      	bne.n	8007d62 <follow_path+0x7a>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007d2e:	79a3      	ldrb	r3, [r4, #6]
 8007d30:	f013 0f10 	tst.w	r3, #16
 8007d34:	d01f      	beq.n	8007d76 <follow_path+0x8e>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007d36:	f105 0134 	add.w	r1, r5, #52	@ 0x34
 8007d3a:	6963      	ldr	r3, [r4, #20]
 8007d3c:	89aa      	ldrh	r2, [r5, #12]
 8007d3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d42:	fb02 3310 	mls	r3, r2, r0, r3
 8007d46:	4419      	add	r1, r3
 8007d48:	4628      	mov	r0, r5
 8007d4a:	f7ff f9f3 	bl	8007134 <ld_clust>
 8007d4e:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007d50:	e7dd      	b.n	8007d0e <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
 8007d52:	2380      	movs	r3, #128	@ 0x80
 8007d54:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007d58:	4611      	mov	r1, r2
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f7ff fe06 	bl	800796c <dir_sdi>
 8007d60:	4603      	mov	r3, r0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	b003      	add	sp, #12
 8007d66:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007d68:	2804      	cmp	r0, #4
 8007d6a:	d1fa      	bne.n	8007d62 <follow_path+0x7a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007d6c:	f012 0f04 	tst.w	r2, #4
 8007d70:	d1f7      	bne.n	8007d62 <follow_path+0x7a>
 8007d72:	2305      	movs	r3, #5
 8007d74:	e7f5      	b.n	8007d62 <follow_path+0x7a>
				res = FR_NO_PATH; break;
 8007d76:	2305      	movs	r3, #5
 8007d78:	e7f3      	b.n	8007d62 <follow_path+0x7a>

08007d7a <dir_alloc>:
{
 8007d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 8007d80:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 8007d82:	2100      	movs	r1, #0
 8007d84:	f7ff fdf2 	bl	800796c <dir_sdi>
	if (res == FR_OK) {
 8007d88:	4602      	mov	r2, r0
 8007d8a:	b9c0      	cbnz	r0, 8007dbe <dir_alloc+0x44>
		n = 0;
 8007d8c:	2500      	movs	r5, #0
 8007d8e:	e008      	b.n	8007da2 <dir_alloc+0x28>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007d90:	3501      	adds	r5, #1
 8007d92:	42b5      	cmp	r5, r6
 8007d94:	d013      	beq.n	8007dbe <dir_alloc+0x44>
			res = dir_next(dp, 1);
 8007d96:	2101      	movs	r1, #1
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f7ff feec 	bl	8007b76 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007d9e:	4602      	mov	r2, r0
 8007da0:	b968      	cbnz	r0, 8007dbe <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
 8007da2:	69e1      	ldr	r1, [r4, #28]
 8007da4:	4638      	mov	r0, r7
 8007da6:	f7ff fac8 	bl	800733a <move_window>
			if (res != FR_OK) break;
 8007daa:	4602      	mov	r2, r0
 8007dac:	b938      	cbnz	r0, 8007dbe <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007dae:	6a23      	ldr	r3, [r4, #32]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	2be5      	cmp	r3, #229	@ 0xe5
 8007db4:	d0ec      	beq.n	8007d90 <dir_alloc+0x16>
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d0ea      	beq.n	8007d90 <dir_alloc+0x16>
				n = 0;					/* Not a blank entry. Restart to search */
 8007dba:	2500      	movs	r5, #0
 8007dbc:	e7eb      	b.n	8007d96 <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007dbe:	2a04      	cmp	r2, #4
 8007dc0:	d001      	beq.n	8007dc6 <dir_alloc+0x4c>
}
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007dc6:	2207      	movs	r2, #7
 8007dc8:	e7fb      	b.n	8007dc2 <dir_alloc+0x48>

08007dca <dir_register>:
{
 8007dca:	b570      	push	{r4, r5, r6, lr}
 8007dcc:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8007dce:	6806      	ldr	r6, [r0, #0]
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	f7ff ffd2 	bl	8007d7a <dir_alloc>
	if (res == FR_OK) {
 8007dd6:	4605      	mov	r5, r0
 8007dd8:	b108      	cbz	r0, 8007dde <dir_register+0x14>
}
 8007dda:	4628      	mov	r0, r5
 8007ddc:	bd70      	pop	{r4, r5, r6, pc}
		res = move_window(fs, dp->sect);
 8007dde:	69e1      	ldr	r1, [r4, #28]
 8007de0:	4630      	mov	r0, r6
 8007de2:	f7ff faaa 	bl	800733a <move_window>
		if (res == FR_OK) {
 8007de6:	4605      	mov	r5, r0
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d1f6      	bne.n	8007dda <dir_register+0x10>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007dec:	2220      	movs	r2, #32
 8007dee:	2100      	movs	r1, #0
 8007df0:	6a20      	ldr	r0, [r4, #32]
 8007df2:	f7ff f8a1 	bl	8006f38 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007df6:	220b      	movs	r2, #11
 8007df8:	f104 0124 	add.w	r1, r4, #36	@ 0x24
 8007dfc:	6a20      	ldr	r0, [r4, #32]
 8007dfe:	f7ff f891 	bl	8006f24 <mem_cpy>
			fs->wflag = 1;
 8007e02:	2301      	movs	r3, #1
 8007e04:	70f3      	strb	r3, [r6, #3]
 8007e06:	e7e8      	b.n	8007dda <dir_register+0x10>

08007e08 <sync_fs>:
{
 8007e08:	b570      	push	{r4, r5, r6, lr}
 8007e0a:	4604      	mov	r4, r0
	res = sync_window(fs);
 8007e0c:	f7ff fa6b 	bl	80072e6 <sync_window>
	if (res == FR_OK) {
 8007e10:	4605      	mov	r5, r0
 8007e12:	b948      	cbnz	r0, 8007e28 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007e14:	7823      	ldrb	r3, [r4, #0]
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d008      	beq.n	8007e2c <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	4611      	mov	r1, r2
 8007e1e:	7860      	ldrb	r0, [r4, #1]
 8007e20:	f7ff f856 	bl	8006ed0 <disk_ioctl>
 8007e24:	b100      	cbz	r0, 8007e28 <sync_fs+0x20>
 8007e26:	2501      	movs	r5, #1
}
 8007e28:	4628      	mov	r0, r5
 8007e2a:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007e2c:	7923      	ldrb	r3, [r4, #4]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d1f3      	bne.n	8007e1a <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 8007e32:	f104 0634 	add.w	r6, r4, #52	@ 0x34
 8007e36:	89a2      	ldrh	r2, [r4, #12]
 8007e38:	2100      	movs	r1, #0
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	f7ff f87c 	bl	8006f38 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007e40:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007e44:	f204 2032 	addw	r0, r4, #562	@ 0x232
 8007e48:	f7ff f85e 	bl	8006f08 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007e4c:	490e      	ldr	r1, [pc, #56]	@ (8007e88 <sync_fs+0x80>)
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f7ff f85e 	bl	8006f10 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007e54:	490d      	ldr	r1, [pc, #52]	@ (8007e8c <sync_fs+0x84>)
 8007e56:	f504 7006 	add.w	r0, r4, #536	@ 0x218
 8007e5a:	f7ff f859 	bl	8006f10 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007e5e:	6961      	ldr	r1, [r4, #20]
 8007e60:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 8007e64:	f7ff f854 	bl	8006f10 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007e68:	6921      	ldr	r1, [r4, #16]
 8007e6a:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 8007e6e:	f7ff f84f 	bl	8006f10 <st_dword>
			fs->winsect = fs->volbase + 1;
 8007e72:	6a22      	ldr	r2, [r4, #32]
 8007e74:	3201      	adds	r2, #1
 8007e76:	6322      	str	r2, [r4, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007e78:	2301      	movs	r3, #1
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	7860      	ldrb	r0, [r4, #1]
 8007e7e:	f7ff f81b 	bl	8006eb8 <disk_write>
			fs->fsi_flag = 0;
 8007e82:	2300      	movs	r3, #0
 8007e84:	7123      	strb	r3, [r4, #4]
 8007e86:	e7c8      	b.n	8007e1a <sync_fs+0x12>
 8007e88:	41615252 	.word	0x41615252
 8007e8c:	61417272 	.word	0x61417272

08007e90 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007e90:	b570      	push	{r4, r5, r6, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	9001      	str	r0, [sp, #4]
 8007e96:	9100      	str	r1, [sp, #0]
 8007e98:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007e9a:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007e9c:	a803      	add	r0, sp, #12
 8007e9e:	f7ff f9d5 	bl	800724c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ea2:	1e04      	subs	r4, r0, #0
 8007ea4:	db1c      	blt.n	8007ee0 <f_mount+0x50>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007ea6:	4b10      	ldr	r3, [pc, #64]	@ (8007ee8 <f_mount+0x58>)
 8007ea8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]

	if (cfs) {
 8007eac:	b125      	cbz	r5, 8007eb8 <f_mount+0x28>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f7ff f916 	bl	80070e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	702b      	strb	r3, [r5, #0]
	}

	if (fs) {
 8007eb8:	9b01      	ldr	r3, [sp, #4]
 8007eba:	b10b      	cbz	r3, 8007ec0 <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007ec0:	9b01      	ldr	r3, [sp, #4]
 8007ec2:	4a09      	ldr	r2, [pc, #36]	@ (8007ee8 <f_mount+0x58>)
 8007ec4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007ec8:	b163      	cbz	r3, 8007ee4 <f_mount+0x54>
 8007eca:	2e01      	cmp	r6, #1
 8007ecc:	d002      	beq.n	8007ed4 <f_mount+0x44>
 8007ece:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8007ed0:	b004      	add	sp, #16
 8007ed2:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	a901      	add	r1, sp, #4
 8007ed8:	4668      	mov	r0, sp
 8007eda:	f7ff fa85 	bl	80073e8 <find_volume>
	LEAVE_FF(fs, res);
 8007ede:	e7f7      	b.n	8007ed0 <f_mount+0x40>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ee0:	200b      	movs	r0, #11
 8007ee2:	e7f5      	b.n	8007ed0 <f_mount+0x40>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	e7f3      	b.n	8007ed0 <f_mount+0x40>
 8007ee8:	20002754 	.word	0x20002754

08007eec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ef0:	b091      	sub	sp, #68	@ 0x44
 8007ef2:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	f000 810c 	beq.w	8008112 <f_open+0x226>
 8007efa:	4614      	mov	r4, r2
 8007efc:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007efe:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 8007f02:	463a      	mov	r2, r7
 8007f04:	a903      	add	r1, sp, #12
 8007f06:	a801      	add	r0, sp, #4
 8007f08:	f7ff fa6e 	bl	80073e8 <find_volume>
	if (res == FR_OK) {
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	b128      	cbz	r0, 8007f1c <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007f10:	2300      	movs	r3, #0
 8007f12:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 8007f14:	4628      	mov	r0, r5
 8007f16:	b011      	add	sp, #68	@ 0x44
 8007f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 8007f1c:	9b03      	ldr	r3, [sp, #12]
 8007f1e:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007f20:	9901      	ldr	r1, [sp, #4]
 8007f22:	a804      	add	r0, sp, #16
 8007f24:	f7ff fee0 	bl	8007ce8 <follow_path>
		if (res == FR_OK) {
 8007f28:	4605      	mov	r5, r0
 8007f2a:	b960      	cbnz	r0, 8007f46 <f_open+0x5a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007f2c:	f99d 303f 	ldrsb.w	r3, [sp, #63]	@ 0x3f
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	db52      	blt.n	8007fda <f_open+0xee>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007f34:	f014 0f3e 	tst.w	r4, #62	@ 0x3e
 8007f38:	bf14      	ite	ne
 8007f3a:	2101      	movne	r1, #1
 8007f3c:	2100      	moveq	r1, #0
 8007f3e:	a804      	add	r0, sp, #16
 8007f40:	f7ff f814 	bl	8006f6c <chk_lock>
 8007f44:	4605      	mov	r5, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007f46:	f014 0f1c 	tst.w	r4, #28
 8007f4a:	d05c      	beq.n	8008006 <f_open+0x11a>
			if (res != FR_OK) {					/* No file, create new */
 8007f4c:	2d00      	cmp	r5, #0
 8007f4e:	d050      	beq.n	8007ff2 <f_open+0x106>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007f50:	2d04      	cmp	r5, #4
 8007f52:	d044      	beq.n	8007fde <f_open+0xf2>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007f54:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007f58:	2d00      	cmp	r5, #0
 8007f5a:	d1d9      	bne.n	8007f10 <f_open+0x24>
 8007f5c:	f017 0f08 	tst.w	r7, #8
 8007f60:	d061      	beq.n	8008026 <f_open+0x13a>
				dw = GET_FATTIME();
 8007f62:	f7fe feb1 	bl	8006cc8 <get_fattime>
 8007f66:	4604      	mov	r4, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007f68:	4601      	mov	r1, r0
 8007f6a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8007f6c:	300e      	adds	r0, #14
 8007f6e:	f7fe ffcf 	bl	8006f10 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007f72:	4621      	mov	r1, r4
 8007f74:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8007f76:	3016      	adds	r0, #22
 8007f78:	f7fe ffca 	bl	8006f10 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007f7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f7e:	2220      	movs	r2, #32
 8007f80:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007f82:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007f86:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8007f8a:	4649      	mov	r1, r9
 8007f8c:	4640      	mov	r0, r8
 8007f8e:	f7ff f8d1 	bl	8007134 <ld_clust>
 8007f92:	4604      	mov	r4, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007f94:	2200      	movs	r2, #0
 8007f96:	4649      	mov	r1, r9
 8007f98:	4640      	mov	r0, r8
 8007f9a:	f7ff f8de 	bl	800715a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8007fa2:	301c      	adds	r0, #28
 8007fa4:	f7fe ffb4 	bl	8006f10 <st_dword>
					fs->wflag = 1;
 8007fa8:	9b03      	ldr	r3, [sp, #12]
 8007faa:	2201      	movs	r2, #1
 8007fac:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8007fae:	2c00      	cmp	r4, #0
 8007fb0:	d039      	beq.n	8008026 <f_open+0x13a>
						dw = fs->winsect;
 8007fb2:	9b03      	ldr	r3, [sp, #12]
 8007fb4:	f8d3 8030 	ldr.w	r8, [r3, #48]	@ 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8007fb8:	2200      	movs	r2, #0
 8007fba:	4621      	mov	r1, r4
 8007fbc:	a804      	add	r0, sp, #16
 8007fbe:	f7ff fd9b 	bl	8007af8 <remove_chain>
						if (res == FR_OK) {
 8007fc2:	4605      	mov	r5, r0
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d1a3      	bne.n	8007f10 <f_open+0x24>
							res = move_window(fs, dw);
 8007fc8:	4641      	mov	r1, r8
 8007fca:	9803      	ldr	r0, [sp, #12]
 8007fcc:	f7ff f9b5 	bl	800733a <move_window>
 8007fd0:	4605      	mov	r5, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007fd2:	3c01      	subs	r4, #1
 8007fd4:	9b03      	ldr	r3, [sp, #12]
 8007fd6:	611c      	str	r4, [r3, #16]
 8007fd8:	e025      	b.n	8008026 <f_open+0x13a>
				res = FR_INVALID_NAME;
 8007fda:	2506      	movs	r5, #6
 8007fdc:	e7b3      	b.n	8007f46 <f_open+0x5a>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007fde:	f7fe ffff 	bl	8006fe0 <enq_lock>
 8007fe2:	b908      	cbnz	r0, 8007fe8 <f_open+0xfc>
 8007fe4:	2512      	movs	r5, #18
 8007fe6:	e7b5      	b.n	8007f54 <f_open+0x68>
 8007fe8:	a804      	add	r0, sp, #16
 8007fea:	f7ff feee 	bl	8007dca <dir_register>
 8007fee:	4605      	mov	r5, r0
 8007ff0:	e7b0      	b.n	8007f54 <f_open+0x68>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007ff2:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8007ff6:	f013 0f11 	tst.w	r3, #17
 8007ffa:	d113      	bne.n	8008024 <f_open+0x138>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007ffc:	f014 0f04 	tst.w	r4, #4
 8008000:	d0aa      	beq.n	8007f58 <f_open+0x6c>
 8008002:	2508      	movs	r5, #8
 8008004:	e784      	b.n	8007f10 <f_open+0x24>
			if (res == FR_OK) {					/* Following succeeded */
 8008006:	2d00      	cmp	r5, #0
 8008008:	d182      	bne.n	8007f10 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800800a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800800e:	f013 0f10 	tst.w	r3, #16
 8008012:	d17a      	bne.n	800810a <f_open+0x21e>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008014:	f014 0f02 	tst.w	r4, #2
 8008018:	d005      	beq.n	8008026 <f_open+0x13a>
 800801a:	f013 0f01 	tst.w	r3, #1
 800801e:	d002      	beq.n	8008026 <f_open+0x13a>
						res = FR_DENIED;
 8008020:	2507      	movs	r5, #7
 8008022:	e775      	b.n	8007f10 <f_open+0x24>
					res = FR_DENIED;
 8008024:	2507      	movs	r5, #7
		if (res == FR_OK) {
 8008026:	2d00      	cmp	r5, #0
 8008028:	f47f af72 	bne.w	8007f10 <f_open+0x24>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800802c:	f017 0f08 	tst.w	r7, #8
 8008030:	d001      	beq.n	8008036 <f_open+0x14a>
				mode |= FA_MODIFIED;
 8008032:	f047 0740 	orr.w	r7, r7, #64	@ 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008036:	9b03      	ldr	r3, [sp, #12]
 8008038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800803a:	6273      	str	r3, [r6, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800803c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800803e:	62b3      	str	r3, [r6, #40]	@ 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008040:	2f01      	cmp	r7, #1
 8008042:	bf94      	ite	ls
 8008044:	2100      	movls	r1, #0
 8008046:	2101      	movhi	r1, #1
 8008048:	a804      	add	r0, sp, #16
 800804a:	f7fe ffd9 	bl	8007000 <inc_lock>
 800804e:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008050:	b908      	cbnz	r0, 8008056 <f_open+0x16a>
 8008052:	2502      	movs	r5, #2
 8008054:	e75c      	b.n	8007f10 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008056:	9c03      	ldr	r4, [sp, #12]
 8008058:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800805c:	4641      	mov	r1, r8
 800805e:	4620      	mov	r0, r4
 8008060:	f7ff f868 	bl	8007134 <ld_clust>
 8008064:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008066:	f108 001c 	add.w	r0, r8, #28
 800806a:	f7fe ff42 	bl	8006ef2 <ld_dword>
 800806e:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008070:	2100      	movs	r1, #0
 8008072:	62f1      	str	r1, [r6, #44]	@ 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008074:	6034      	str	r4, [r6, #0]
			fp->obj.id = fs->id;
 8008076:	88e3      	ldrh	r3, [r4, #6]
 8008078:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 800807a:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 800807c:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800807e:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008080:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008082:	f106 0830 	add.w	r8, r6, #48	@ 0x30
 8008086:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800808a:	4640      	mov	r0, r8
 800808c:	f7fe ff54 	bl	8006f38 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008090:	f017 0f20 	tst.w	r7, #32
 8008094:	d035      	beq.n	8008102 <f_open+0x216>
 8008096:	68f4      	ldr	r4, [r6, #12]
 8008098:	b39c      	cbz	r4, 8008102 <f_open+0x216>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800809a:	61b4      	str	r4, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800809c:	9b03      	ldr	r3, [sp, #12]
 800809e:	895f      	ldrh	r7, [r3, #10]
 80080a0:	899b      	ldrh	r3, [r3, #12]
 80080a2:	fb03 f707 	mul.w	r7, r3, r7
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80080a6:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80080a8:	e001      	b.n	80080ae <f_open+0x1c2>
					if (clst <= 1) res = FR_INT_ERR;
 80080aa:	2502      	movs	r5, #2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80080ac:	1be4      	subs	r4, r4, r7
 80080ae:	b965      	cbnz	r5, 80080ca <f_open+0x1de>
 80080b0:	42bc      	cmp	r4, r7
 80080b2:	d90a      	bls.n	80080ca <f_open+0x1de>
					clst = get_fat(&fp->obj, clst);
 80080b4:	4630      	mov	r0, r6
 80080b6:	f7ff fbdb 	bl	8007870 <get_fat>
 80080ba:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 80080bc:	2801      	cmp	r0, #1
 80080be:	d9f4      	bls.n	80080aa <f_open+0x1be>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80080c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80080c4:	d1f2      	bne.n	80080ac <f_open+0x1c0>
 80080c6:	2501      	movs	r5, #1
 80080c8:	e7f0      	b.n	80080ac <f_open+0x1c0>
				fp->clust = clst;
 80080ca:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80080cc:	2d00      	cmp	r5, #0
 80080ce:	f47f af1f 	bne.w	8007f10 <f_open+0x24>
 80080d2:	9f03      	ldr	r7, [sp, #12]
 80080d4:	f8b7 900c 	ldrh.w	r9, [r7, #12]
 80080d8:	fbb4 f3f9 	udiv	r3, r4, r9
 80080dc:	fb09 4313 	mls	r3, r9, r3, r4
 80080e0:	b17b      	cbz	r3, 8008102 <f_open+0x216>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80080e2:	4638      	mov	r0, r7
 80080e4:	f7ff f81a 	bl	800711c <clust2sect>
 80080e8:	b908      	cbnz	r0, 80080ee <f_open+0x202>
						res = FR_INT_ERR;
 80080ea:	2502      	movs	r5, #2
 80080ec:	e710      	b.n	8007f10 <f_open+0x24>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80080ee:	fbb4 f2f9 	udiv	r2, r4, r9
 80080f2:	4402      	add	r2, r0
 80080f4:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	4641      	mov	r1, r8
 80080fa:	7878      	ldrb	r0, [r7, #1]
 80080fc:	f7fe fed0 	bl	8006ea0 <disk_read>
 8008100:	b928      	cbnz	r0, 800810e <f_open+0x222>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008102:	2d00      	cmp	r5, #0
 8008104:	f43f af06 	beq.w	8007f14 <f_open+0x28>
 8008108:	e702      	b.n	8007f10 <f_open+0x24>
					res = FR_NO_FILE;
 800810a:	2504      	movs	r5, #4
 800810c:	e700      	b.n	8007f10 <f_open+0x24>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800810e:	2501      	movs	r5, #1
 8008110:	e6fe      	b.n	8007f10 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8008112:	2509      	movs	r5, #9
 8008114:	e6fe      	b.n	8007f14 <f_open+0x28>

08008116 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008116:	b570      	push	{r4, r5, r6, lr}
 8008118:	b082      	sub	sp, #8
 800811a:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800811c:	a901      	add	r1, sp, #4
 800811e:	f7ff f8bf 	bl	80072a0 <validate>
	if (res == FR_OK) {
 8008122:	b970      	cbnz	r0, 8008142 <f_sync+0x2c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008124:	7d23      	ldrb	r3, [r4, #20]
 8008126:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800812a:	d00a      	beq.n	8008142 <f_sync+0x2c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800812c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008130:	d109      	bne.n	8008146 <f_sync+0x30>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008132:	f7fe fdc9 	bl	8006cc8 <get_fattime>
 8008136:	4605      	mov	r5, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008138:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800813a:	9801      	ldr	r0, [sp, #4]
 800813c:	f7ff f8fd 	bl	800733a <move_window>
				if (res == FR_OK) {
 8008140:	b178      	cbz	r0, 8008162 <f_sync+0x4c>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8008142:	b002      	add	sp, #8
 8008144:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008146:	2301      	movs	r3, #1
 8008148:	6a22      	ldr	r2, [r4, #32]
 800814a:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800814e:	9801      	ldr	r0, [sp, #4]
 8008150:	7840      	ldrb	r0, [r0, #1]
 8008152:	f7fe feb1 	bl	8006eb8 <disk_write>
 8008156:	bb40      	cbnz	r0, 80081aa <f_sync+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008158:	7d23      	ldrb	r3, [r4, #20]
 800815a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800815e:	7523      	strb	r3, [r4, #20]
 8008160:	e7e7      	b.n	8008132 <f_sync+0x1c>
					dir = fp->dir_ptr;
 8008162:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008164:	7af3      	ldrb	r3, [r6, #11]
 8008166:	f043 0320 	orr.w	r3, r3, #32
 800816a:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800816c:	68a2      	ldr	r2, [r4, #8]
 800816e:	4631      	mov	r1, r6
 8008170:	6820      	ldr	r0, [r4, #0]
 8008172:	f7fe fff2 	bl	800715a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008176:	68e1      	ldr	r1, [r4, #12]
 8008178:	f106 001c 	add.w	r0, r6, #28
 800817c:	f7fe fec8 	bl	8006f10 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008180:	4629      	mov	r1, r5
 8008182:	f106 0016 	add.w	r0, r6, #22
 8008186:	f7fe fec3 	bl	8006f10 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800818a:	2100      	movs	r1, #0
 800818c:	f106 0012 	add.w	r0, r6, #18
 8008190:	f7fe feba 	bl	8006f08 <st_word>
					fs->wflag = 1;
 8008194:	9b01      	ldr	r3, [sp, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800819a:	9801      	ldr	r0, [sp, #4]
 800819c:	f7ff fe34 	bl	8007e08 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80081a0:	7d23      	ldrb	r3, [r4, #20]
 80081a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081a6:	7523      	strb	r3, [r4, #20]
 80081a8:	e7cb      	b.n	8008142 <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80081aa:	2001      	movs	r0, #1
 80081ac:	e7c9      	b.n	8008142 <f_sync+0x2c>

080081ae <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80081ae:	b510      	push	{r4, lr}
 80081b0:	b082      	sub	sp, #8
 80081b2:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80081b4:	f7ff ffaf 	bl	8008116 <f_sync>
	if (res == FR_OK)
 80081b8:	b108      	cbz	r0, 80081be <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80081ba:	b002      	add	sp, #8
 80081bc:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80081be:	a901      	add	r1, sp, #4
 80081c0:	4620      	mov	r0, r4
 80081c2:	f7ff f86d 	bl	80072a0 <validate>
		if (res == FR_OK) {
 80081c6:	2800      	cmp	r0, #0
 80081c8:	d1f7      	bne.n	80081ba <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80081ca:	6920      	ldr	r0, [r4, #16]
 80081cc:	f7fe ff68 	bl	80070a0 <dec_lock>
			if (res == FR_OK)
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d1f2      	bne.n	80081ba <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 80081d4:	6020      	str	r0, [r4, #0]
 80081d6:	e7f0      	b.n	80081ba <f_close+0xc>

080081d8 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80081d8:	4b13      	ldr	r3, [pc, #76]	@ (8008228 <FATFS_LinkDriverEx+0x50>)
 80081da:	7a5b      	ldrb	r3, [r3, #9]
 80081dc:	bb13      	cbnz	r3, 8008224 <FATFS_LinkDriverEx+0x4c>
{
 80081de:	b510      	push	{r4, lr}
 80081e0:	4604      	mov	r4, r0
 80081e2:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 80081e6:	4b10      	ldr	r3, [pc, #64]	@ (8008228 <FATFS_LinkDriverEx+0x50>)
 80081e8:	f893 c009 	ldrb.w	ip, [r3, #9]
 80081ec:	fa5f fc8c 	uxtb.w	ip, ip
 80081f0:	f04f 0e00 	mov.w	lr, #0
 80081f4:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 80081f8:	f893 c009 	ldrb.w	ip, [r3, #9]
 80081fc:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8008200:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 8008204:	7a5c      	ldrb	r4, [r3, #9]
 8008206:	441c      	add	r4, r3
 8008208:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800820a:	7a5a      	ldrb	r2, [r3, #9]
 800820c:	1c54      	adds	r4, r2, #1
 800820e:	b2e4      	uxtb	r4, r4
 8008210:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8008212:	3230      	adds	r2, #48	@ 0x30
 8008214:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8008216:	233a      	movs	r3, #58	@ 0x3a
 8008218:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800821a:	232f      	movs	r3, #47	@ 0x2f
 800821c:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800821e:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8008222:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 8008224:	2001      	movs	r0, #1
}
 8008226:	4770      	bx	lr
 8008228:	20002758 	.word	0x20002758

0800822c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800822c:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800822e:	2200      	movs	r2, #0
 8008230:	f7ff ffd2 	bl	80081d8 <FATFS_LinkDriverEx>
}
 8008234:	bd08      	pop	{r3, pc}

08008236 <atof>:
 8008236:	2100      	movs	r1, #0
 8008238:	f000 be08 	b.w	8008e4c <strtod>

0800823c <sulp>:
 800823c:	b570      	push	{r4, r5, r6, lr}
 800823e:	4604      	mov	r4, r0
 8008240:	460d      	mov	r5, r1
 8008242:	ec45 4b10 	vmov	d0, r4, r5
 8008246:	4616      	mov	r6, r2
 8008248:	f003 fd0a 	bl	800bc60 <__ulp>
 800824c:	ec51 0b10 	vmov	r0, r1, d0
 8008250:	b17e      	cbz	r6, 8008272 <sulp+0x36>
 8008252:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008256:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800825a:	2b00      	cmp	r3, #0
 800825c:	dd09      	ble.n	8008272 <sulp+0x36>
 800825e:	051b      	lsls	r3, r3, #20
 8008260:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008264:	2400      	movs	r4, #0
 8008266:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800826a:	4622      	mov	r2, r4
 800826c:	462b      	mov	r3, r5
 800826e:	f7f8 f9c3 	bl	80005f8 <__aeabi_dmul>
 8008272:	ec41 0b10 	vmov	d0, r0, r1
 8008276:	bd70      	pop	{r4, r5, r6, pc}

08008278 <_strtod_l>:
 8008278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827c:	b09f      	sub	sp, #124	@ 0x7c
 800827e:	460c      	mov	r4, r1
 8008280:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008282:	2200      	movs	r2, #0
 8008284:	921a      	str	r2, [sp, #104]	@ 0x68
 8008286:	9005      	str	r0, [sp, #20]
 8008288:	f04f 0a00 	mov.w	sl, #0
 800828c:	f04f 0b00 	mov.w	fp, #0
 8008290:	460a      	mov	r2, r1
 8008292:	9219      	str	r2, [sp, #100]	@ 0x64
 8008294:	7811      	ldrb	r1, [r2, #0]
 8008296:	292b      	cmp	r1, #43	@ 0x2b
 8008298:	d04a      	beq.n	8008330 <_strtod_l+0xb8>
 800829a:	d838      	bhi.n	800830e <_strtod_l+0x96>
 800829c:	290d      	cmp	r1, #13
 800829e:	d832      	bhi.n	8008306 <_strtod_l+0x8e>
 80082a0:	2908      	cmp	r1, #8
 80082a2:	d832      	bhi.n	800830a <_strtod_l+0x92>
 80082a4:	2900      	cmp	r1, #0
 80082a6:	d03b      	beq.n	8008320 <_strtod_l+0xa8>
 80082a8:	2200      	movs	r2, #0
 80082aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80082ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80082ae:	782a      	ldrb	r2, [r5, #0]
 80082b0:	2a30      	cmp	r2, #48	@ 0x30
 80082b2:	f040 80b3 	bne.w	800841c <_strtod_l+0x1a4>
 80082b6:	786a      	ldrb	r2, [r5, #1]
 80082b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80082bc:	2a58      	cmp	r2, #88	@ 0x58
 80082be:	d16e      	bne.n	800839e <_strtod_l+0x126>
 80082c0:	9302      	str	r3, [sp, #8]
 80082c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082c4:	9301      	str	r3, [sp, #4]
 80082c6:	ab1a      	add	r3, sp, #104	@ 0x68
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	4a8e      	ldr	r2, [pc, #568]	@ (8008504 <_strtod_l+0x28c>)
 80082cc:	9805      	ldr	r0, [sp, #20]
 80082ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80082d0:	a919      	add	r1, sp, #100	@ 0x64
 80082d2:	f002 fdb7 	bl	800ae44 <__gethex>
 80082d6:	f010 060f 	ands.w	r6, r0, #15
 80082da:	4604      	mov	r4, r0
 80082dc:	d005      	beq.n	80082ea <_strtod_l+0x72>
 80082de:	2e06      	cmp	r6, #6
 80082e0:	d128      	bne.n	8008334 <_strtod_l+0xbc>
 80082e2:	3501      	adds	r5, #1
 80082e4:	2300      	movs	r3, #0
 80082e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80082e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f040 858e 	bne.w	8008e0e <_strtod_l+0xb96>
 80082f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082f4:	b1cb      	cbz	r3, 800832a <_strtod_l+0xb2>
 80082f6:	4652      	mov	r2, sl
 80082f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80082fc:	ec43 2b10 	vmov	d0, r2, r3
 8008300:	b01f      	add	sp, #124	@ 0x7c
 8008302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008306:	2920      	cmp	r1, #32
 8008308:	d1ce      	bne.n	80082a8 <_strtod_l+0x30>
 800830a:	3201      	adds	r2, #1
 800830c:	e7c1      	b.n	8008292 <_strtod_l+0x1a>
 800830e:	292d      	cmp	r1, #45	@ 0x2d
 8008310:	d1ca      	bne.n	80082a8 <_strtod_l+0x30>
 8008312:	2101      	movs	r1, #1
 8008314:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008316:	1c51      	adds	r1, r2, #1
 8008318:	9119      	str	r1, [sp, #100]	@ 0x64
 800831a:	7852      	ldrb	r2, [r2, #1]
 800831c:	2a00      	cmp	r2, #0
 800831e:	d1c5      	bne.n	80082ac <_strtod_l+0x34>
 8008320:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008322:	9419      	str	r4, [sp, #100]	@ 0x64
 8008324:	2b00      	cmp	r3, #0
 8008326:	f040 8570 	bne.w	8008e0a <_strtod_l+0xb92>
 800832a:	4652      	mov	r2, sl
 800832c:	465b      	mov	r3, fp
 800832e:	e7e5      	b.n	80082fc <_strtod_l+0x84>
 8008330:	2100      	movs	r1, #0
 8008332:	e7ef      	b.n	8008314 <_strtod_l+0x9c>
 8008334:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008336:	b13a      	cbz	r2, 8008348 <_strtod_l+0xd0>
 8008338:	2135      	movs	r1, #53	@ 0x35
 800833a:	a81c      	add	r0, sp, #112	@ 0x70
 800833c:	f003 fd8a 	bl	800be54 <__copybits>
 8008340:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008342:	9805      	ldr	r0, [sp, #20]
 8008344:	f003 f958 	bl	800b5f8 <_Bfree>
 8008348:	3e01      	subs	r6, #1
 800834a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800834c:	2e04      	cmp	r6, #4
 800834e:	d806      	bhi.n	800835e <_strtod_l+0xe6>
 8008350:	e8df f006 	tbb	[pc, r6]
 8008354:	201d0314 	.word	0x201d0314
 8008358:	14          	.byte	0x14
 8008359:	00          	.byte	0x00
 800835a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800835e:	05e1      	lsls	r1, r4, #23
 8008360:	bf48      	it	mi
 8008362:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008366:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800836a:	0d1b      	lsrs	r3, r3, #20
 800836c:	051b      	lsls	r3, r3, #20
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1bb      	bne.n	80082ea <_strtod_l+0x72>
 8008372:	f001 fdf7 	bl	8009f64 <__errno>
 8008376:	2322      	movs	r3, #34	@ 0x22
 8008378:	6003      	str	r3, [r0, #0]
 800837a:	e7b6      	b.n	80082ea <_strtod_l+0x72>
 800837c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008380:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008384:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008388:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800838c:	e7e7      	b.n	800835e <_strtod_l+0xe6>
 800838e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800850c <_strtod_l+0x294>
 8008392:	e7e4      	b.n	800835e <_strtod_l+0xe6>
 8008394:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008398:	f04f 3aff 	mov.w	sl, #4294967295
 800839c:	e7df      	b.n	800835e <_strtod_l+0xe6>
 800839e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083a0:	1c5a      	adds	r2, r3, #1
 80083a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80083a4:	785b      	ldrb	r3, [r3, #1]
 80083a6:	2b30      	cmp	r3, #48	@ 0x30
 80083a8:	d0f9      	beq.n	800839e <_strtod_l+0x126>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d09d      	beq.n	80082ea <_strtod_l+0x72>
 80083ae:	2301      	movs	r3, #1
 80083b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80083b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80083b6:	2300      	movs	r3, #0
 80083b8:	9308      	str	r3, [sp, #32]
 80083ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80083bc:	461f      	mov	r7, r3
 80083be:	220a      	movs	r2, #10
 80083c0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80083c2:	7805      	ldrb	r5, [r0, #0]
 80083c4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80083c8:	b2d9      	uxtb	r1, r3
 80083ca:	2909      	cmp	r1, #9
 80083cc:	d928      	bls.n	8008420 <_strtod_l+0x1a8>
 80083ce:	494e      	ldr	r1, [pc, #312]	@ (8008508 <_strtod_l+0x290>)
 80083d0:	2201      	movs	r2, #1
 80083d2:	f001 fd0e 	bl	8009df2 <strncmp>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	d032      	beq.n	8008440 <_strtod_l+0x1c8>
 80083da:	2000      	movs	r0, #0
 80083dc:	462a      	mov	r2, r5
 80083de:	4681      	mov	r9, r0
 80083e0:	463d      	mov	r5, r7
 80083e2:	4603      	mov	r3, r0
 80083e4:	2a65      	cmp	r2, #101	@ 0x65
 80083e6:	d001      	beq.n	80083ec <_strtod_l+0x174>
 80083e8:	2a45      	cmp	r2, #69	@ 0x45
 80083ea:	d114      	bne.n	8008416 <_strtod_l+0x19e>
 80083ec:	b91d      	cbnz	r5, 80083f6 <_strtod_l+0x17e>
 80083ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083f0:	4302      	orrs	r2, r0
 80083f2:	d095      	beq.n	8008320 <_strtod_l+0xa8>
 80083f4:	2500      	movs	r5, #0
 80083f6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80083f8:	1c62      	adds	r2, r4, #1
 80083fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80083fc:	7862      	ldrb	r2, [r4, #1]
 80083fe:	2a2b      	cmp	r2, #43	@ 0x2b
 8008400:	d077      	beq.n	80084f2 <_strtod_l+0x27a>
 8008402:	2a2d      	cmp	r2, #45	@ 0x2d
 8008404:	d07b      	beq.n	80084fe <_strtod_l+0x286>
 8008406:	f04f 0c00 	mov.w	ip, #0
 800840a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800840e:	2909      	cmp	r1, #9
 8008410:	f240 8082 	bls.w	8008518 <_strtod_l+0x2a0>
 8008414:	9419      	str	r4, [sp, #100]	@ 0x64
 8008416:	f04f 0800 	mov.w	r8, #0
 800841a:	e0a2      	b.n	8008562 <_strtod_l+0x2ea>
 800841c:	2300      	movs	r3, #0
 800841e:	e7c7      	b.n	80083b0 <_strtod_l+0x138>
 8008420:	2f08      	cmp	r7, #8
 8008422:	bfd5      	itete	le
 8008424:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008426:	9908      	ldrgt	r1, [sp, #32]
 8008428:	fb02 3301 	mlale	r3, r2, r1, r3
 800842c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008430:	f100 0001 	add.w	r0, r0, #1
 8008434:	bfd4      	ite	le
 8008436:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008438:	9308      	strgt	r3, [sp, #32]
 800843a:	3701      	adds	r7, #1
 800843c:	9019      	str	r0, [sp, #100]	@ 0x64
 800843e:	e7bf      	b.n	80083c0 <_strtod_l+0x148>
 8008440:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008442:	1c5a      	adds	r2, r3, #1
 8008444:	9219      	str	r2, [sp, #100]	@ 0x64
 8008446:	785a      	ldrb	r2, [r3, #1]
 8008448:	b37f      	cbz	r7, 80084aa <_strtod_l+0x232>
 800844a:	4681      	mov	r9, r0
 800844c:	463d      	mov	r5, r7
 800844e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008452:	2b09      	cmp	r3, #9
 8008454:	d912      	bls.n	800847c <_strtod_l+0x204>
 8008456:	2301      	movs	r3, #1
 8008458:	e7c4      	b.n	80083e4 <_strtod_l+0x16c>
 800845a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800845c:	1c5a      	adds	r2, r3, #1
 800845e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008460:	785a      	ldrb	r2, [r3, #1]
 8008462:	3001      	adds	r0, #1
 8008464:	2a30      	cmp	r2, #48	@ 0x30
 8008466:	d0f8      	beq.n	800845a <_strtod_l+0x1e2>
 8008468:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800846c:	2b08      	cmp	r3, #8
 800846e:	f200 84d3 	bhi.w	8008e18 <_strtod_l+0xba0>
 8008472:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008474:	930c      	str	r3, [sp, #48]	@ 0x30
 8008476:	4681      	mov	r9, r0
 8008478:	2000      	movs	r0, #0
 800847a:	4605      	mov	r5, r0
 800847c:	3a30      	subs	r2, #48	@ 0x30
 800847e:	f100 0301 	add.w	r3, r0, #1
 8008482:	d02a      	beq.n	80084da <_strtod_l+0x262>
 8008484:	4499      	add	r9, r3
 8008486:	eb00 0c05 	add.w	ip, r0, r5
 800848a:	462b      	mov	r3, r5
 800848c:	210a      	movs	r1, #10
 800848e:	4563      	cmp	r3, ip
 8008490:	d10d      	bne.n	80084ae <_strtod_l+0x236>
 8008492:	1c69      	adds	r1, r5, #1
 8008494:	4401      	add	r1, r0
 8008496:	4428      	add	r0, r5
 8008498:	2808      	cmp	r0, #8
 800849a:	dc16      	bgt.n	80084ca <_strtod_l+0x252>
 800849c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800849e:	230a      	movs	r3, #10
 80084a0:	fb03 2300 	mla	r3, r3, r0, r2
 80084a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80084a6:	2300      	movs	r3, #0
 80084a8:	e018      	b.n	80084dc <_strtod_l+0x264>
 80084aa:	4638      	mov	r0, r7
 80084ac:	e7da      	b.n	8008464 <_strtod_l+0x1ec>
 80084ae:	2b08      	cmp	r3, #8
 80084b0:	f103 0301 	add.w	r3, r3, #1
 80084b4:	dc03      	bgt.n	80084be <_strtod_l+0x246>
 80084b6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80084b8:	434e      	muls	r6, r1
 80084ba:	960a      	str	r6, [sp, #40]	@ 0x28
 80084bc:	e7e7      	b.n	800848e <_strtod_l+0x216>
 80084be:	2b10      	cmp	r3, #16
 80084c0:	bfde      	ittt	le
 80084c2:	9e08      	ldrle	r6, [sp, #32]
 80084c4:	434e      	mulle	r6, r1
 80084c6:	9608      	strle	r6, [sp, #32]
 80084c8:	e7e1      	b.n	800848e <_strtod_l+0x216>
 80084ca:	280f      	cmp	r0, #15
 80084cc:	dceb      	bgt.n	80084a6 <_strtod_l+0x22e>
 80084ce:	9808      	ldr	r0, [sp, #32]
 80084d0:	230a      	movs	r3, #10
 80084d2:	fb03 2300 	mla	r3, r3, r0, r2
 80084d6:	9308      	str	r3, [sp, #32]
 80084d8:	e7e5      	b.n	80084a6 <_strtod_l+0x22e>
 80084da:	4629      	mov	r1, r5
 80084dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084de:	1c50      	adds	r0, r2, #1
 80084e0:	9019      	str	r0, [sp, #100]	@ 0x64
 80084e2:	7852      	ldrb	r2, [r2, #1]
 80084e4:	4618      	mov	r0, r3
 80084e6:	460d      	mov	r5, r1
 80084e8:	e7b1      	b.n	800844e <_strtod_l+0x1d6>
 80084ea:	f04f 0900 	mov.w	r9, #0
 80084ee:	2301      	movs	r3, #1
 80084f0:	e77d      	b.n	80083ee <_strtod_l+0x176>
 80084f2:	f04f 0c00 	mov.w	ip, #0
 80084f6:	1ca2      	adds	r2, r4, #2
 80084f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80084fa:	78a2      	ldrb	r2, [r4, #2]
 80084fc:	e785      	b.n	800840a <_strtod_l+0x192>
 80084fe:	f04f 0c01 	mov.w	ip, #1
 8008502:	e7f8      	b.n	80084f6 <_strtod_l+0x27e>
 8008504:	08011ecc 	.word	0x08011ecc
 8008508:	08011eb4 	.word	0x08011eb4
 800850c:	7ff00000 	.word	0x7ff00000
 8008510:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008512:	1c51      	adds	r1, r2, #1
 8008514:	9119      	str	r1, [sp, #100]	@ 0x64
 8008516:	7852      	ldrb	r2, [r2, #1]
 8008518:	2a30      	cmp	r2, #48	@ 0x30
 800851a:	d0f9      	beq.n	8008510 <_strtod_l+0x298>
 800851c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008520:	2908      	cmp	r1, #8
 8008522:	f63f af78 	bhi.w	8008416 <_strtod_l+0x19e>
 8008526:	3a30      	subs	r2, #48	@ 0x30
 8008528:	920e      	str	r2, [sp, #56]	@ 0x38
 800852a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800852c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800852e:	f04f 080a 	mov.w	r8, #10
 8008532:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008534:	1c56      	adds	r6, r2, #1
 8008536:	9619      	str	r6, [sp, #100]	@ 0x64
 8008538:	7852      	ldrb	r2, [r2, #1]
 800853a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800853e:	f1be 0f09 	cmp.w	lr, #9
 8008542:	d939      	bls.n	80085b8 <_strtod_l+0x340>
 8008544:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008546:	1a76      	subs	r6, r6, r1
 8008548:	2e08      	cmp	r6, #8
 800854a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800854e:	dc03      	bgt.n	8008558 <_strtod_l+0x2e0>
 8008550:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008552:	4588      	cmp	r8, r1
 8008554:	bfa8      	it	ge
 8008556:	4688      	movge	r8, r1
 8008558:	f1bc 0f00 	cmp.w	ip, #0
 800855c:	d001      	beq.n	8008562 <_strtod_l+0x2ea>
 800855e:	f1c8 0800 	rsb	r8, r8, #0
 8008562:	2d00      	cmp	r5, #0
 8008564:	d14e      	bne.n	8008604 <_strtod_l+0x38c>
 8008566:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008568:	4308      	orrs	r0, r1
 800856a:	f47f aebe 	bne.w	80082ea <_strtod_l+0x72>
 800856e:	2b00      	cmp	r3, #0
 8008570:	f47f aed6 	bne.w	8008320 <_strtod_l+0xa8>
 8008574:	2a69      	cmp	r2, #105	@ 0x69
 8008576:	d028      	beq.n	80085ca <_strtod_l+0x352>
 8008578:	dc25      	bgt.n	80085c6 <_strtod_l+0x34e>
 800857a:	2a49      	cmp	r2, #73	@ 0x49
 800857c:	d025      	beq.n	80085ca <_strtod_l+0x352>
 800857e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008580:	f47f aece 	bne.w	8008320 <_strtod_l+0xa8>
 8008584:	499b      	ldr	r1, [pc, #620]	@ (80087f4 <_strtod_l+0x57c>)
 8008586:	a819      	add	r0, sp, #100	@ 0x64
 8008588:	f002 fe7e 	bl	800b288 <__match>
 800858c:	2800      	cmp	r0, #0
 800858e:	f43f aec7 	beq.w	8008320 <_strtod_l+0xa8>
 8008592:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	2b28      	cmp	r3, #40	@ 0x28
 8008598:	d12e      	bne.n	80085f8 <_strtod_l+0x380>
 800859a:	4997      	ldr	r1, [pc, #604]	@ (80087f8 <_strtod_l+0x580>)
 800859c:	aa1c      	add	r2, sp, #112	@ 0x70
 800859e:	a819      	add	r0, sp, #100	@ 0x64
 80085a0:	f002 fe86 	bl	800b2b0 <__hexnan>
 80085a4:	2805      	cmp	r0, #5
 80085a6:	d127      	bne.n	80085f8 <_strtod_l+0x380>
 80085a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80085aa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80085ae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80085b2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80085b6:	e698      	b.n	80082ea <_strtod_l+0x72>
 80085b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80085ba:	fb08 2101 	mla	r1, r8, r1, r2
 80085be:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80085c2:	920e      	str	r2, [sp, #56]	@ 0x38
 80085c4:	e7b5      	b.n	8008532 <_strtod_l+0x2ba>
 80085c6:	2a6e      	cmp	r2, #110	@ 0x6e
 80085c8:	e7da      	b.n	8008580 <_strtod_l+0x308>
 80085ca:	498c      	ldr	r1, [pc, #560]	@ (80087fc <_strtod_l+0x584>)
 80085cc:	a819      	add	r0, sp, #100	@ 0x64
 80085ce:	f002 fe5b 	bl	800b288 <__match>
 80085d2:	2800      	cmp	r0, #0
 80085d4:	f43f aea4 	beq.w	8008320 <_strtod_l+0xa8>
 80085d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085da:	4989      	ldr	r1, [pc, #548]	@ (8008800 <_strtod_l+0x588>)
 80085dc:	3b01      	subs	r3, #1
 80085de:	a819      	add	r0, sp, #100	@ 0x64
 80085e0:	9319      	str	r3, [sp, #100]	@ 0x64
 80085e2:	f002 fe51 	bl	800b288 <__match>
 80085e6:	b910      	cbnz	r0, 80085ee <_strtod_l+0x376>
 80085e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085ea:	3301      	adds	r3, #1
 80085ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80085ee:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008810 <_strtod_l+0x598>
 80085f2:	f04f 0a00 	mov.w	sl, #0
 80085f6:	e678      	b.n	80082ea <_strtod_l+0x72>
 80085f8:	4882      	ldr	r0, [pc, #520]	@ (8008804 <_strtod_l+0x58c>)
 80085fa:	f001 fcf9 	bl	8009ff0 <nan>
 80085fe:	ec5b ab10 	vmov	sl, fp, d0
 8008602:	e672      	b.n	80082ea <_strtod_l+0x72>
 8008604:	eba8 0309 	sub.w	r3, r8, r9
 8008608:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800860a:	9309      	str	r3, [sp, #36]	@ 0x24
 800860c:	2f00      	cmp	r7, #0
 800860e:	bf08      	it	eq
 8008610:	462f      	moveq	r7, r5
 8008612:	2d10      	cmp	r5, #16
 8008614:	462c      	mov	r4, r5
 8008616:	bfa8      	it	ge
 8008618:	2410      	movge	r4, #16
 800861a:	f7f7 ff73 	bl	8000504 <__aeabi_ui2d>
 800861e:	2d09      	cmp	r5, #9
 8008620:	4682      	mov	sl, r0
 8008622:	468b      	mov	fp, r1
 8008624:	dc13      	bgt.n	800864e <_strtod_l+0x3d6>
 8008626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008628:	2b00      	cmp	r3, #0
 800862a:	f43f ae5e 	beq.w	80082ea <_strtod_l+0x72>
 800862e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008630:	dd78      	ble.n	8008724 <_strtod_l+0x4ac>
 8008632:	2b16      	cmp	r3, #22
 8008634:	dc5f      	bgt.n	80086f6 <_strtod_l+0x47e>
 8008636:	4974      	ldr	r1, [pc, #464]	@ (8008808 <_strtod_l+0x590>)
 8008638:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800863c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008640:	4652      	mov	r2, sl
 8008642:	465b      	mov	r3, fp
 8008644:	f7f7 ffd8 	bl	80005f8 <__aeabi_dmul>
 8008648:	4682      	mov	sl, r0
 800864a:	468b      	mov	fp, r1
 800864c:	e64d      	b.n	80082ea <_strtod_l+0x72>
 800864e:	4b6e      	ldr	r3, [pc, #440]	@ (8008808 <_strtod_l+0x590>)
 8008650:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008654:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008658:	f7f7 ffce 	bl	80005f8 <__aeabi_dmul>
 800865c:	4682      	mov	sl, r0
 800865e:	9808      	ldr	r0, [sp, #32]
 8008660:	468b      	mov	fp, r1
 8008662:	f7f7 ff4f 	bl	8000504 <__aeabi_ui2d>
 8008666:	4602      	mov	r2, r0
 8008668:	460b      	mov	r3, r1
 800866a:	4650      	mov	r0, sl
 800866c:	4659      	mov	r1, fp
 800866e:	f7f7 fe0d 	bl	800028c <__adddf3>
 8008672:	2d0f      	cmp	r5, #15
 8008674:	4682      	mov	sl, r0
 8008676:	468b      	mov	fp, r1
 8008678:	ddd5      	ble.n	8008626 <_strtod_l+0x3ae>
 800867a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800867c:	1b2c      	subs	r4, r5, r4
 800867e:	441c      	add	r4, r3
 8008680:	2c00      	cmp	r4, #0
 8008682:	f340 8096 	ble.w	80087b2 <_strtod_l+0x53a>
 8008686:	f014 030f 	ands.w	r3, r4, #15
 800868a:	d00a      	beq.n	80086a2 <_strtod_l+0x42a>
 800868c:	495e      	ldr	r1, [pc, #376]	@ (8008808 <_strtod_l+0x590>)
 800868e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008692:	4652      	mov	r2, sl
 8008694:	465b      	mov	r3, fp
 8008696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800869a:	f7f7 ffad 	bl	80005f8 <__aeabi_dmul>
 800869e:	4682      	mov	sl, r0
 80086a0:	468b      	mov	fp, r1
 80086a2:	f034 040f 	bics.w	r4, r4, #15
 80086a6:	d073      	beq.n	8008790 <_strtod_l+0x518>
 80086a8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80086ac:	dd48      	ble.n	8008740 <_strtod_l+0x4c8>
 80086ae:	2400      	movs	r4, #0
 80086b0:	46a0      	mov	r8, r4
 80086b2:	940a      	str	r4, [sp, #40]	@ 0x28
 80086b4:	46a1      	mov	r9, r4
 80086b6:	9a05      	ldr	r2, [sp, #20]
 80086b8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008810 <_strtod_l+0x598>
 80086bc:	2322      	movs	r3, #34	@ 0x22
 80086be:	6013      	str	r3, [r2, #0]
 80086c0:	f04f 0a00 	mov.w	sl, #0
 80086c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	f43f ae0f 	beq.w	80082ea <_strtod_l+0x72>
 80086cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80086ce:	9805      	ldr	r0, [sp, #20]
 80086d0:	f002 ff92 	bl	800b5f8 <_Bfree>
 80086d4:	9805      	ldr	r0, [sp, #20]
 80086d6:	4649      	mov	r1, r9
 80086d8:	f002 ff8e 	bl	800b5f8 <_Bfree>
 80086dc:	9805      	ldr	r0, [sp, #20]
 80086de:	4641      	mov	r1, r8
 80086e0:	f002 ff8a 	bl	800b5f8 <_Bfree>
 80086e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086e6:	9805      	ldr	r0, [sp, #20]
 80086e8:	f002 ff86 	bl	800b5f8 <_Bfree>
 80086ec:	9805      	ldr	r0, [sp, #20]
 80086ee:	4621      	mov	r1, r4
 80086f0:	f002 ff82 	bl	800b5f8 <_Bfree>
 80086f4:	e5f9      	b.n	80082ea <_strtod_l+0x72>
 80086f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086f8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80086fc:	4293      	cmp	r3, r2
 80086fe:	dbbc      	blt.n	800867a <_strtod_l+0x402>
 8008700:	4c41      	ldr	r4, [pc, #260]	@ (8008808 <_strtod_l+0x590>)
 8008702:	f1c5 050f 	rsb	r5, r5, #15
 8008706:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800870a:	4652      	mov	r2, sl
 800870c:	465b      	mov	r3, fp
 800870e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008712:	f7f7 ff71 	bl	80005f8 <__aeabi_dmul>
 8008716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008718:	1b5d      	subs	r5, r3, r5
 800871a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800871e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008722:	e78f      	b.n	8008644 <_strtod_l+0x3cc>
 8008724:	3316      	adds	r3, #22
 8008726:	dba8      	blt.n	800867a <_strtod_l+0x402>
 8008728:	4b37      	ldr	r3, [pc, #220]	@ (8008808 <_strtod_l+0x590>)
 800872a:	eba9 0808 	sub.w	r8, r9, r8
 800872e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008732:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008736:	4650      	mov	r0, sl
 8008738:	4659      	mov	r1, fp
 800873a:	f7f8 f887 	bl	800084c <__aeabi_ddiv>
 800873e:	e783      	b.n	8008648 <_strtod_l+0x3d0>
 8008740:	4b32      	ldr	r3, [pc, #200]	@ (800880c <_strtod_l+0x594>)
 8008742:	9308      	str	r3, [sp, #32]
 8008744:	2300      	movs	r3, #0
 8008746:	1124      	asrs	r4, r4, #4
 8008748:	4650      	mov	r0, sl
 800874a:	4659      	mov	r1, fp
 800874c:	461e      	mov	r6, r3
 800874e:	2c01      	cmp	r4, #1
 8008750:	dc21      	bgt.n	8008796 <_strtod_l+0x51e>
 8008752:	b10b      	cbz	r3, 8008758 <_strtod_l+0x4e0>
 8008754:	4682      	mov	sl, r0
 8008756:	468b      	mov	fp, r1
 8008758:	492c      	ldr	r1, [pc, #176]	@ (800880c <_strtod_l+0x594>)
 800875a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800875e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008762:	4652      	mov	r2, sl
 8008764:	465b      	mov	r3, fp
 8008766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800876a:	f7f7 ff45 	bl	80005f8 <__aeabi_dmul>
 800876e:	4b28      	ldr	r3, [pc, #160]	@ (8008810 <_strtod_l+0x598>)
 8008770:	460a      	mov	r2, r1
 8008772:	400b      	ands	r3, r1
 8008774:	4927      	ldr	r1, [pc, #156]	@ (8008814 <_strtod_l+0x59c>)
 8008776:	428b      	cmp	r3, r1
 8008778:	4682      	mov	sl, r0
 800877a:	d898      	bhi.n	80086ae <_strtod_l+0x436>
 800877c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008780:	428b      	cmp	r3, r1
 8008782:	bf86      	itte	hi
 8008784:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008818 <_strtod_l+0x5a0>
 8008788:	f04f 3aff 	movhi.w	sl, #4294967295
 800878c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008790:	2300      	movs	r3, #0
 8008792:	9308      	str	r3, [sp, #32]
 8008794:	e07a      	b.n	800888c <_strtod_l+0x614>
 8008796:	07e2      	lsls	r2, r4, #31
 8008798:	d505      	bpl.n	80087a6 <_strtod_l+0x52e>
 800879a:	9b08      	ldr	r3, [sp, #32]
 800879c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a0:	f7f7 ff2a 	bl	80005f8 <__aeabi_dmul>
 80087a4:	2301      	movs	r3, #1
 80087a6:	9a08      	ldr	r2, [sp, #32]
 80087a8:	3208      	adds	r2, #8
 80087aa:	3601      	adds	r6, #1
 80087ac:	1064      	asrs	r4, r4, #1
 80087ae:	9208      	str	r2, [sp, #32]
 80087b0:	e7cd      	b.n	800874e <_strtod_l+0x4d6>
 80087b2:	d0ed      	beq.n	8008790 <_strtod_l+0x518>
 80087b4:	4264      	negs	r4, r4
 80087b6:	f014 020f 	ands.w	r2, r4, #15
 80087ba:	d00a      	beq.n	80087d2 <_strtod_l+0x55a>
 80087bc:	4b12      	ldr	r3, [pc, #72]	@ (8008808 <_strtod_l+0x590>)
 80087be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087c2:	4650      	mov	r0, sl
 80087c4:	4659      	mov	r1, fp
 80087c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ca:	f7f8 f83f 	bl	800084c <__aeabi_ddiv>
 80087ce:	4682      	mov	sl, r0
 80087d0:	468b      	mov	fp, r1
 80087d2:	1124      	asrs	r4, r4, #4
 80087d4:	d0dc      	beq.n	8008790 <_strtod_l+0x518>
 80087d6:	2c1f      	cmp	r4, #31
 80087d8:	dd20      	ble.n	800881c <_strtod_l+0x5a4>
 80087da:	2400      	movs	r4, #0
 80087dc:	46a0      	mov	r8, r4
 80087de:	940a      	str	r4, [sp, #40]	@ 0x28
 80087e0:	46a1      	mov	r9, r4
 80087e2:	9a05      	ldr	r2, [sp, #20]
 80087e4:	2322      	movs	r3, #34	@ 0x22
 80087e6:	f04f 0a00 	mov.w	sl, #0
 80087ea:	f04f 0b00 	mov.w	fp, #0
 80087ee:	6013      	str	r3, [r2, #0]
 80087f0:	e768      	b.n	80086c4 <_strtod_l+0x44c>
 80087f2:	bf00      	nop
 80087f4:	08011f15 	.word	0x08011f15
 80087f8:	08011eb8 	.word	0x08011eb8
 80087fc:	08011f0d 	.word	0x08011f0d
 8008800:	08011ff9 	.word	0x08011ff9
 8008804:	08011ff5 	.word	0x08011ff5
 8008808:	08012160 	.word	0x08012160
 800880c:	08012138 	.word	0x08012138
 8008810:	7ff00000 	.word	0x7ff00000
 8008814:	7ca00000 	.word	0x7ca00000
 8008818:	7fefffff 	.word	0x7fefffff
 800881c:	f014 0310 	ands.w	r3, r4, #16
 8008820:	bf18      	it	ne
 8008822:	236a      	movne	r3, #106	@ 0x6a
 8008824:	4ea9      	ldr	r6, [pc, #676]	@ (8008acc <_strtod_l+0x854>)
 8008826:	9308      	str	r3, [sp, #32]
 8008828:	4650      	mov	r0, sl
 800882a:	4659      	mov	r1, fp
 800882c:	2300      	movs	r3, #0
 800882e:	07e2      	lsls	r2, r4, #31
 8008830:	d504      	bpl.n	800883c <_strtod_l+0x5c4>
 8008832:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008836:	f7f7 fedf 	bl	80005f8 <__aeabi_dmul>
 800883a:	2301      	movs	r3, #1
 800883c:	1064      	asrs	r4, r4, #1
 800883e:	f106 0608 	add.w	r6, r6, #8
 8008842:	d1f4      	bne.n	800882e <_strtod_l+0x5b6>
 8008844:	b10b      	cbz	r3, 800884a <_strtod_l+0x5d2>
 8008846:	4682      	mov	sl, r0
 8008848:	468b      	mov	fp, r1
 800884a:	9b08      	ldr	r3, [sp, #32]
 800884c:	b1b3      	cbz	r3, 800887c <_strtod_l+0x604>
 800884e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008852:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008856:	2b00      	cmp	r3, #0
 8008858:	4659      	mov	r1, fp
 800885a:	dd0f      	ble.n	800887c <_strtod_l+0x604>
 800885c:	2b1f      	cmp	r3, #31
 800885e:	dd55      	ble.n	800890c <_strtod_l+0x694>
 8008860:	2b34      	cmp	r3, #52	@ 0x34
 8008862:	bfde      	ittt	le
 8008864:	f04f 33ff 	movle.w	r3, #4294967295
 8008868:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800886c:	4093      	lslle	r3, r2
 800886e:	f04f 0a00 	mov.w	sl, #0
 8008872:	bfcc      	ite	gt
 8008874:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008878:	ea03 0b01 	andle.w	fp, r3, r1
 800887c:	2200      	movs	r2, #0
 800887e:	2300      	movs	r3, #0
 8008880:	4650      	mov	r0, sl
 8008882:	4659      	mov	r1, fp
 8008884:	f7f8 f920 	bl	8000ac8 <__aeabi_dcmpeq>
 8008888:	2800      	cmp	r0, #0
 800888a:	d1a6      	bne.n	80087da <_strtod_l+0x562>
 800888c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008892:	9805      	ldr	r0, [sp, #20]
 8008894:	462b      	mov	r3, r5
 8008896:	463a      	mov	r2, r7
 8008898:	f002 ff16 	bl	800b6c8 <__s2b>
 800889c:	900a      	str	r0, [sp, #40]	@ 0x28
 800889e:	2800      	cmp	r0, #0
 80088a0:	f43f af05 	beq.w	80086ae <_strtod_l+0x436>
 80088a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088a6:	2a00      	cmp	r2, #0
 80088a8:	eba9 0308 	sub.w	r3, r9, r8
 80088ac:	bfa8      	it	ge
 80088ae:	2300      	movge	r3, #0
 80088b0:	9312      	str	r3, [sp, #72]	@ 0x48
 80088b2:	2400      	movs	r4, #0
 80088b4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80088b8:	9316      	str	r3, [sp, #88]	@ 0x58
 80088ba:	46a0      	mov	r8, r4
 80088bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088be:	9805      	ldr	r0, [sp, #20]
 80088c0:	6859      	ldr	r1, [r3, #4]
 80088c2:	f002 fe59 	bl	800b578 <_Balloc>
 80088c6:	4681      	mov	r9, r0
 80088c8:	2800      	cmp	r0, #0
 80088ca:	f43f aef4 	beq.w	80086b6 <_strtod_l+0x43e>
 80088ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088d0:	691a      	ldr	r2, [r3, #16]
 80088d2:	3202      	adds	r2, #2
 80088d4:	f103 010c 	add.w	r1, r3, #12
 80088d8:	0092      	lsls	r2, r2, #2
 80088da:	300c      	adds	r0, #12
 80088dc:	f001 fb77 	bl	8009fce <memcpy>
 80088e0:	ec4b ab10 	vmov	d0, sl, fp
 80088e4:	9805      	ldr	r0, [sp, #20]
 80088e6:	aa1c      	add	r2, sp, #112	@ 0x70
 80088e8:	a91b      	add	r1, sp, #108	@ 0x6c
 80088ea:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80088ee:	f003 fa27 	bl	800bd40 <__d2b>
 80088f2:	901a      	str	r0, [sp, #104]	@ 0x68
 80088f4:	2800      	cmp	r0, #0
 80088f6:	f43f aede 	beq.w	80086b6 <_strtod_l+0x43e>
 80088fa:	9805      	ldr	r0, [sp, #20]
 80088fc:	2101      	movs	r1, #1
 80088fe:	f002 ff79 	bl	800b7f4 <__i2b>
 8008902:	4680      	mov	r8, r0
 8008904:	b948      	cbnz	r0, 800891a <_strtod_l+0x6a2>
 8008906:	f04f 0800 	mov.w	r8, #0
 800890a:	e6d4      	b.n	80086b6 <_strtod_l+0x43e>
 800890c:	f04f 32ff 	mov.w	r2, #4294967295
 8008910:	fa02 f303 	lsl.w	r3, r2, r3
 8008914:	ea03 0a0a 	and.w	sl, r3, sl
 8008918:	e7b0      	b.n	800887c <_strtod_l+0x604>
 800891a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800891c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800891e:	2d00      	cmp	r5, #0
 8008920:	bfab      	itete	ge
 8008922:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008924:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008926:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008928:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800892a:	bfac      	ite	ge
 800892c:	18ef      	addge	r7, r5, r3
 800892e:	1b5e      	sublt	r6, r3, r5
 8008930:	9b08      	ldr	r3, [sp, #32]
 8008932:	1aed      	subs	r5, r5, r3
 8008934:	4415      	add	r5, r2
 8008936:	4b66      	ldr	r3, [pc, #408]	@ (8008ad0 <_strtod_l+0x858>)
 8008938:	3d01      	subs	r5, #1
 800893a:	429d      	cmp	r5, r3
 800893c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008940:	da50      	bge.n	80089e4 <_strtod_l+0x76c>
 8008942:	1b5b      	subs	r3, r3, r5
 8008944:	2b1f      	cmp	r3, #31
 8008946:	eba2 0203 	sub.w	r2, r2, r3
 800894a:	f04f 0101 	mov.w	r1, #1
 800894e:	dc3d      	bgt.n	80089cc <_strtod_l+0x754>
 8008950:	fa01 f303 	lsl.w	r3, r1, r3
 8008954:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008956:	2300      	movs	r3, #0
 8008958:	9310      	str	r3, [sp, #64]	@ 0x40
 800895a:	18bd      	adds	r5, r7, r2
 800895c:	9b08      	ldr	r3, [sp, #32]
 800895e:	42af      	cmp	r7, r5
 8008960:	4416      	add	r6, r2
 8008962:	441e      	add	r6, r3
 8008964:	463b      	mov	r3, r7
 8008966:	bfa8      	it	ge
 8008968:	462b      	movge	r3, r5
 800896a:	42b3      	cmp	r3, r6
 800896c:	bfa8      	it	ge
 800896e:	4633      	movge	r3, r6
 8008970:	2b00      	cmp	r3, #0
 8008972:	bfc2      	ittt	gt
 8008974:	1aed      	subgt	r5, r5, r3
 8008976:	1af6      	subgt	r6, r6, r3
 8008978:	1aff      	subgt	r7, r7, r3
 800897a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800897c:	2b00      	cmp	r3, #0
 800897e:	dd16      	ble.n	80089ae <_strtod_l+0x736>
 8008980:	4641      	mov	r1, r8
 8008982:	9805      	ldr	r0, [sp, #20]
 8008984:	461a      	mov	r2, r3
 8008986:	f002 fff5 	bl	800b974 <__pow5mult>
 800898a:	4680      	mov	r8, r0
 800898c:	2800      	cmp	r0, #0
 800898e:	d0ba      	beq.n	8008906 <_strtod_l+0x68e>
 8008990:	4601      	mov	r1, r0
 8008992:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008994:	9805      	ldr	r0, [sp, #20]
 8008996:	f002 ff43 	bl	800b820 <__multiply>
 800899a:	900e      	str	r0, [sp, #56]	@ 0x38
 800899c:	2800      	cmp	r0, #0
 800899e:	f43f ae8a 	beq.w	80086b6 <_strtod_l+0x43e>
 80089a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089a4:	9805      	ldr	r0, [sp, #20]
 80089a6:	f002 fe27 	bl	800b5f8 <_Bfree>
 80089aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80089ae:	2d00      	cmp	r5, #0
 80089b0:	dc1d      	bgt.n	80089ee <_strtod_l+0x776>
 80089b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	dd23      	ble.n	8008a00 <_strtod_l+0x788>
 80089b8:	4649      	mov	r1, r9
 80089ba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80089bc:	9805      	ldr	r0, [sp, #20]
 80089be:	f002 ffd9 	bl	800b974 <__pow5mult>
 80089c2:	4681      	mov	r9, r0
 80089c4:	b9e0      	cbnz	r0, 8008a00 <_strtod_l+0x788>
 80089c6:	f04f 0900 	mov.w	r9, #0
 80089ca:	e674      	b.n	80086b6 <_strtod_l+0x43e>
 80089cc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80089d0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80089d4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80089d8:	35e2      	adds	r5, #226	@ 0xe2
 80089da:	fa01 f305 	lsl.w	r3, r1, r5
 80089de:	9310      	str	r3, [sp, #64]	@ 0x40
 80089e0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80089e2:	e7ba      	b.n	800895a <_strtod_l+0x6e2>
 80089e4:	2300      	movs	r3, #0
 80089e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80089e8:	2301      	movs	r3, #1
 80089ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80089ec:	e7b5      	b.n	800895a <_strtod_l+0x6e2>
 80089ee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089f0:	9805      	ldr	r0, [sp, #20]
 80089f2:	462a      	mov	r2, r5
 80089f4:	f003 f818 	bl	800ba28 <__lshift>
 80089f8:	901a      	str	r0, [sp, #104]	@ 0x68
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d1d9      	bne.n	80089b2 <_strtod_l+0x73a>
 80089fe:	e65a      	b.n	80086b6 <_strtod_l+0x43e>
 8008a00:	2e00      	cmp	r6, #0
 8008a02:	dd07      	ble.n	8008a14 <_strtod_l+0x79c>
 8008a04:	4649      	mov	r1, r9
 8008a06:	9805      	ldr	r0, [sp, #20]
 8008a08:	4632      	mov	r2, r6
 8008a0a:	f003 f80d 	bl	800ba28 <__lshift>
 8008a0e:	4681      	mov	r9, r0
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d0d8      	beq.n	80089c6 <_strtod_l+0x74e>
 8008a14:	2f00      	cmp	r7, #0
 8008a16:	dd08      	ble.n	8008a2a <_strtod_l+0x7b2>
 8008a18:	4641      	mov	r1, r8
 8008a1a:	9805      	ldr	r0, [sp, #20]
 8008a1c:	463a      	mov	r2, r7
 8008a1e:	f003 f803 	bl	800ba28 <__lshift>
 8008a22:	4680      	mov	r8, r0
 8008a24:	2800      	cmp	r0, #0
 8008a26:	f43f ae46 	beq.w	80086b6 <_strtod_l+0x43e>
 8008a2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a2c:	9805      	ldr	r0, [sp, #20]
 8008a2e:	464a      	mov	r2, r9
 8008a30:	f003 f882 	bl	800bb38 <__mdiff>
 8008a34:	4604      	mov	r4, r0
 8008a36:	2800      	cmp	r0, #0
 8008a38:	f43f ae3d 	beq.w	80086b6 <_strtod_l+0x43e>
 8008a3c:	68c3      	ldr	r3, [r0, #12]
 8008a3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a40:	2300      	movs	r3, #0
 8008a42:	60c3      	str	r3, [r0, #12]
 8008a44:	4641      	mov	r1, r8
 8008a46:	f003 f85b 	bl	800bb00 <__mcmp>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	da46      	bge.n	8008adc <_strtod_l+0x864>
 8008a4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a50:	ea53 030a 	orrs.w	r3, r3, sl
 8008a54:	d16c      	bne.n	8008b30 <_strtod_l+0x8b8>
 8008a56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d168      	bne.n	8008b30 <_strtod_l+0x8b8>
 8008a5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a62:	0d1b      	lsrs	r3, r3, #20
 8008a64:	051b      	lsls	r3, r3, #20
 8008a66:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008a6a:	d961      	bls.n	8008b30 <_strtod_l+0x8b8>
 8008a6c:	6963      	ldr	r3, [r4, #20]
 8008a6e:	b913      	cbnz	r3, 8008a76 <_strtod_l+0x7fe>
 8008a70:	6923      	ldr	r3, [r4, #16]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	dd5c      	ble.n	8008b30 <_strtod_l+0x8b8>
 8008a76:	4621      	mov	r1, r4
 8008a78:	2201      	movs	r2, #1
 8008a7a:	9805      	ldr	r0, [sp, #20]
 8008a7c:	f002 ffd4 	bl	800ba28 <__lshift>
 8008a80:	4641      	mov	r1, r8
 8008a82:	4604      	mov	r4, r0
 8008a84:	f003 f83c 	bl	800bb00 <__mcmp>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	dd51      	ble.n	8008b30 <_strtod_l+0x8b8>
 8008a8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a90:	9a08      	ldr	r2, [sp, #32]
 8008a92:	0d1b      	lsrs	r3, r3, #20
 8008a94:	051b      	lsls	r3, r3, #20
 8008a96:	2a00      	cmp	r2, #0
 8008a98:	d06b      	beq.n	8008b72 <_strtod_l+0x8fa>
 8008a9a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008a9e:	d868      	bhi.n	8008b72 <_strtod_l+0x8fa>
 8008aa0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008aa4:	f67f ae9d 	bls.w	80087e2 <_strtod_l+0x56a>
 8008aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad4 <_strtod_l+0x85c>)
 8008aaa:	4650      	mov	r0, sl
 8008aac:	4659      	mov	r1, fp
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f7f7 fda2 	bl	80005f8 <__aeabi_dmul>
 8008ab4:	4b08      	ldr	r3, [pc, #32]	@ (8008ad8 <_strtod_l+0x860>)
 8008ab6:	400b      	ands	r3, r1
 8008ab8:	4682      	mov	sl, r0
 8008aba:	468b      	mov	fp, r1
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f47f ae05 	bne.w	80086cc <_strtod_l+0x454>
 8008ac2:	9a05      	ldr	r2, [sp, #20]
 8008ac4:	2322      	movs	r3, #34	@ 0x22
 8008ac6:	6013      	str	r3, [r2, #0]
 8008ac8:	e600      	b.n	80086cc <_strtod_l+0x454>
 8008aca:	bf00      	nop
 8008acc:	08011ee0 	.word	0x08011ee0
 8008ad0:	fffffc02 	.word	0xfffffc02
 8008ad4:	39500000 	.word	0x39500000
 8008ad8:	7ff00000 	.word	0x7ff00000
 8008adc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008ae0:	d165      	bne.n	8008bae <_strtod_l+0x936>
 8008ae2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008ae4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ae8:	b35a      	cbz	r2, 8008b42 <_strtod_l+0x8ca>
 8008aea:	4a9f      	ldr	r2, [pc, #636]	@ (8008d68 <_strtod_l+0xaf0>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d12b      	bne.n	8008b48 <_strtod_l+0x8d0>
 8008af0:	9b08      	ldr	r3, [sp, #32]
 8008af2:	4651      	mov	r1, sl
 8008af4:	b303      	cbz	r3, 8008b38 <_strtod_l+0x8c0>
 8008af6:	4b9d      	ldr	r3, [pc, #628]	@ (8008d6c <_strtod_l+0xaf4>)
 8008af8:	465a      	mov	r2, fp
 8008afa:	4013      	ands	r3, r2
 8008afc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008b00:	f04f 32ff 	mov.w	r2, #4294967295
 8008b04:	d81b      	bhi.n	8008b3e <_strtod_l+0x8c6>
 8008b06:	0d1b      	lsrs	r3, r3, #20
 8008b08:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b10:	4299      	cmp	r1, r3
 8008b12:	d119      	bne.n	8008b48 <_strtod_l+0x8d0>
 8008b14:	4b96      	ldr	r3, [pc, #600]	@ (8008d70 <_strtod_l+0xaf8>)
 8008b16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d102      	bne.n	8008b22 <_strtod_l+0x8aa>
 8008b1c:	3101      	adds	r1, #1
 8008b1e:	f43f adca 	beq.w	80086b6 <_strtod_l+0x43e>
 8008b22:	4b92      	ldr	r3, [pc, #584]	@ (8008d6c <_strtod_l+0xaf4>)
 8008b24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b26:	401a      	ands	r2, r3
 8008b28:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008b2c:	f04f 0a00 	mov.w	sl, #0
 8008b30:	9b08      	ldr	r3, [sp, #32]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1b8      	bne.n	8008aa8 <_strtod_l+0x830>
 8008b36:	e5c9      	b.n	80086cc <_strtod_l+0x454>
 8008b38:	f04f 33ff 	mov.w	r3, #4294967295
 8008b3c:	e7e8      	b.n	8008b10 <_strtod_l+0x898>
 8008b3e:	4613      	mov	r3, r2
 8008b40:	e7e6      	b.n	8008b10 <_strtod_l+0x898>
 8008b42:	ea53 030a 	orrs.w	r3, r3, sl
 8008b46:	d0a1      	beq.n	8008a8c <_strtod_l+0x814>
 8008b48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008b4a:	b1db      	cbz	r3, 8008b84 <_strtod_l+0x90c>
 8008b4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b4e:	4213      	tst	r3, r2
 8008b50:	d0ee      	beq.n	8008b30 <_strtod_l+0x8b8>
 8008b52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b54:	9a08      	ldr	r2, [sp, #32]
 8008b56:	4650      	mov	r0, sl
 8008b58:	4659      	mov	r1, fp
 8008b5a:	b1bb      	cbz	r3, 8008b8c <_strtod_l+0x914>
 8008b5c:	f7ff fb6e 	bl	800823c <sulp>
 8008b60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b64:	ec53 2b10 	vmov	r2, r3, d0
 8008b68:	f7f7 fb90 	bl	800028c <__adddf3>
 8008b6c:	4682      	mov	sl, r0
 8008b6e:	468b      	mov	fp, r1
 8008b70:	e7de      	b.n	8008b30 <_strtod_l+0x8b8>
 8008b72:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008b76:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008b7a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008b7e:	f04f 3aff 	mov.w	sl, #4294967295
 8008b82:	e7d5      	b.n	8008b30 <_strtod_l+0x8b8>
 8008b84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008b86:	ea13 0f0a 	tst.w	r3, sl
 8008b8a:	e7e1      	b.n	8008b50 <_strtod_l+0x8d8>
 8008b8c:	f7ff fb56 	bl	800823c <sulp>
 8008b90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b94:	ec53 2b10 	vmov	r2, r3, d0
 8008b98:	f7f7 fb76 	bl	8000288 <__aeabi_dsub>
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	4682      	mov	sl, r0
 8008ba2:	468b      	mov	fp, r1
 8008ba4:	f7f7 ff90 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	d0c1      	beq.n	8008b30 <_strtod_l+0x8b8>
 8008bac:	e619      	b.n	80087e2 <_strtod_l+0x56a>
 8008bae:	4641      	mov	r1, r8
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f003 f91d 	bl	800bdf0 <__ratio>
 8008bb6:	ec57 6b10 	vmov	r6, r7, d0
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	4639      	mov	r1, r7
 8008bc4:	f7f7 ff94 	bl	8000af0 <__aeabi_dcmple>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d06f      	beq.n	8008cac <_strtod_l+0xa34>
 8008bcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d17a      	bne.n	8008cc8 <_strtod_l+0xa50>
 8008bd2:	f1ba 0f00 	cmp.w	sl, #0
 8008bd6:	d158      	bne.n	8008c8a <_strtod_l+0xa12>
 8008bd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d15a      	bne.n	8008c98 <_strtod_l+0xa20>
 8008be2:	4b64      	ldr	r3, [pc, #400]	@ (8008d74 <_strtod_l+0xafc>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	4630      	mov	r0, r6
 8008be8:	4639      	mov	r1, r7
 8008bea:	f7f7 ff77 	bl	8000adc <__aeabi_dcmplt>
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	d159      	bne.n	8008ca6 <_strtod_l+0xa2e>
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	4b60      	ldr	r3, [pc, #384]	@ (8008d78 <_strtod_l+0xb00>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f7f7 fcfd 	bl	80005f8 <__aeabi_dmul>
 8008bfe:	4606      	mov	r6, r0
 8008c00:	460f      	mov	r7, r1
 8008c02:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008c06:	9606      	str	r6, [sp, #24]
 8008c08:	9307      	str	r3, [sp, #28]
 8008c0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c0e:	4d57      	ldr	r5, [pc, #348]	@ (8008d6c <_strtod_l+0xaf4>)
 8008c10:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008c14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c16:	401d      	ands	r5, r3
 8008c18:	4b58      	ldr	r3, [pc, #352]	@ (8008d7c <_strtod_l+0xb04>)
 8008c1a:	429d      	cmp	r5, r3
 8008c1c:	f040 80b2 	bne.w	8008d84 <_strtod_l+0xb0c>
 8008c20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c22:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008c26:	ec4b ab10 	vmov	d0, sl, fp
 8008c2a:	f003 f819 	bl	800bc60 <__ulp>
 8008c2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c32:	ec51 0b10 	vmov	r0, r1, d0
 8008c36:	f7f7 fcdf 	bl	80005f8 <__aeabi_dmul>
 8008c3a:	4652      	mov	r2, sl
 8008c3c:	465b      	mov	r3, fp
 8008c3e:	f7f7 fb25 	bl	800028c <__adddf3>
 8008c42:	460b      	mov	r3, r1
 8008c44:	4949      	ldr	r1, [pc, #292]	@ (8008d6c <_strtod_l+0xaf4>)
 8008c46:	4a4e      	ldr	r2, [pc, #312]	@ (8008d80 <_strtod_l+0xb08>)
 8008c48:	4019      	ands	r1, r3
 8008c4a:	4291      	cmp	r1, r2
 8008c4c:	4682      	mov	sl, r0
 8008c4e:	d942      	bls.n	8008cd6 <_strtod_l+0xa5e>
 8008c50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008c52:	4b47      	ldr	r3, [pc, #284]	@ (8008d70 <_strtod_l+0xaf8>)
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d103      	bne.n	8008c60 <_strtod_l+0x9e8>
 8008c58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	f43f ad2b 	beq.w	80086b6 <_strtod_l+0x43e>
 8008c60:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008d70 <_strtod_l+0xaf8>
 8008c64:	f04f 3aff 	mov.w	sl, #4294967295
 8008c68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c6a:	9805      	ldr	r0, [sp, #20]
 8008c6c:	f002 fcc4 	bl	800b5f8 <_Bfree>
 8008c70:	9805      	ldr	r0, [sp, #20]
 8008c72:	4649      	mov	r1, r9
 8008c74:	f002 fcc0 	bl	800b5f8 <_Bfree>
 8008c78:	9805      	ldr	r0, [sp, #20]
 8008c7a:	4641      	mov	r1, r8
 8008c7c:	f002 fcbc 	bl	800b5f8 <_Bfree>
 8008c80:	9805      	ldr	r0, [sp, #20]
 8008c82:	4621      	mov	r1, r4
 8008c84:	f002 fcb8 	bl	800b5f8 <_Bfree>
 8008c88:	e618      	b.n	80088bc <_strtod_l+0x644>
 8008c8a:	f1ba 0f01 	cmp.w	sl, #1
 8008c8e:	d103      	bne.n	8008c98 <_strtod_l+0xa20>
 8008c90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f43f ada5 	beq.w	80087e2 <_strtod_l+0x56a>
 8008c98:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008d48 <_strtod_l+0xad0>
 8008c9c:	4f35      	ldr	r7, [pc, #212]	@ (8008d74 <_strtod_l+0xafc>)
 8008c9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008ca2:	2600      	movs	r6, #0
 8008ca4:	e7b1      	b.n	8008c0a <_strtod_l+0x992>
 8008ca6:	4f34      	ldr	r7, [pc, #208]	@ (8008d78 <_strtod_l+0xb00>)
 8008ca8:	2600      	movs	r6, #0
 8008caa:	e7aa      	b.n	8008c02 <_strtod_l+0x98a>
 8008cac:	4b32      	ldr	r3, [pc, #200]	@ (8008d78 <_strtod_l+0xb00>)
 8008cae:	4630      	mov	r0, r6
 8008cb0:	4639      	mov	r1, r7
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f7f7 fca0 	bl	80005f8 <__aeabi_dmul>
 8008cb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cba:	4606      	mov	r6, r0
 8008cbc:	460f      	mov	r7, r1
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d09f      	beq.n	8008c02 <_strtod_l+0x98a>
 8008cc2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008cc6:	e7a0      	b.n	8008c0a <_strtod_l+0x992>
 8008cc8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008d50 <_strtod_l+0xad8>
 8008ccc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008cd0:	ec57 6b17 	vmov	r6, r7, d7
 8008cd4:	e799      	b.n	8008c0a <_strtod_l+0x992>
 8008cd6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008cda:	9b08      	ldr	r3, [sp, #32]
 8008cdc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1c1      	bne.n	8008c68 <_strtod_l+0x9f0>
 8008ce4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ce8:	0d1b      	lsrs	r3, r3, #20
 8008cea:	051b      	lsls	r3, r3, #20
 8008cec:	429d      	cmp	r5, r3
 8008cee:	d1bb      	bne.n	8008c68 <_strtod_l+0x9f0>
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	4639      	mov	r1, r7
 8008cf4:	f7f7 ffe0 	bl	8000cb8 <__aeabi_d2lz>
 8008cf8:	f7f7 fc50 	bl	800059c <__aeabi_l2d>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	460b      	mov	r3, r1
 8008d00:	4630      	mov	r0, r6
 8008d02:	4639      	mov	r1, r7
 8008d04:	f7f7 fac0 	bl	8000288 <__aeabi_dsub>
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008d10:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008d14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d16:	ea46 060a 	orr.w	r6, r6, sl
 8008d1a:	431e      	orrs	r6, r3
 8008d1c:	d06f      	beq.n	8008dfe <_strtod_l+0xb86>
 8008d1e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008d58 <_strtod_l+0xae0>)
 8008d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d24:	f7f7 feda 	bl	8000adc <__aeabi_dcmplt>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	f47f accf 	bne.w	80086cc <_strtod_l+0x454>
 8008d2e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008d60 <_strtod_l+0xae8>)
 8008d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d38:	f7f7 feee 	bl	8000b18 <__aeabi_dcmpgt>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d093      	beq.n	8008c68 <_strtod_l+0x9f0>
 8008d40:	e4c4      	b.n	80086cc <_strtod_l+0x454>
 8008d42:	bf00      	nop
 8008d44:	f3af 8000 	nop.w
 8008d48:	00000000 	.word	0x00000000
 8008d4c:	bff00000 	.word	0xbff00000
 8008d50:	00000000 	.word	0x00000000
 8008d54:	3ff00000 	.word	0x3ff00000
 8008d58:	94a03595 	.word	0x94a03595
 8008d5c:	3fdfffff 	.word	0x3fdfffff
 8008d60:	35afe535 	.word	0x35afe535
 8008d64:	3fe00000 	.word	0x3fe00000
 8008d68:	000fffff 	.word	0x000fffff
 8008d6c:	7ff00000 	.word	0x7ff00000
 8008d70:	7fefffff 	.word	0x7fefffff
 8008d74:	3ff00000 	.word	0x3ff00000
 8008d78:	3fe00000 	.word	0x3fe00000
 8008d7c:	7fe00000 	.word	0x7fe00000
 8008d80:	7c9fffff 	.word	0x7c9fffff
 8008d84:	9b08      	ldr	r3, [sp, #32]
 8008d86:	b323      	cbz	r3, 8008dd2 <_strtod_l+0xb5a>
 8008d88:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008d8c:	d821      	bhi.n	8008dd2 <_strtod_l+0xb5a>
 8008d8e:	a328      	add	r3, pc, #160	@ (adr r3, 8008e30 <_strtod_l+0xbb8>)
 8008d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d94:	4630      	mov	r0, r6
 8008d96:	4639      	mov	r1, r7
 8008d98:	f7f7 feaa 	bl	8000af0 <__aeabi_dcmple>
 8008d9c:	b1a0      	cbz	r0, 8008dc8 <_strtod_l+0xb50>
 8008d9e:	4639      	mov	r1, r7
 8008da0:	4630      	mov	r0, r6
 8008da2:	f7f7 ff01 	bl	8000ba8 <__aeabi_d2uiz>
 8008da6:	2801      	cmp	r0, #1
 8008da8:	bf38      	it	cc
 8008daa:	2001      	movcc	r0, #1
 8008dac:	f7f7 fbaa 	bl	8000504 <__aeabi_ui2d>
 8008db0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008db2:	4606      	mov	r6, r0
 8008db4:	460f      	mov	r7, r1
 8008db6:	b9fb      	cbnz	r3, 8008df8 <_strtod_l+0xb80>
 8008db8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008dbc:	9014      	str	r0, [sp, #80]	@ 0x50
 8008dbe:	9315      	str	r3, [sp, #84]	@ 0x54
 8008dc0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008dc4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008dc8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008dca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008dce:	1b5b      	subs	r3, r3, r5
 8008dd0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008dd2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008dd6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008dda:	f002 ff41 	bl	800bc60 <__ulp>
 8008dde:	4650      	mov	r0, sl
 8008de0:	ec53 2b10 	vmov	r2, r3, d0
 8008de4:	4659      	mov	r1, fp
 8008de6:	f7f7 fc07 	bl	80005f8 <__aeabi_dmul>
 8008dea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008dee:	f7f7 fa4d 	bl	800028c <__adddf3>
 8008df2:	4682      	mov	sl, r0
 8008df4:	468b      	mov	fp, r1
 8008df6:	e770      	b.n	8008cda <_strtod_l+0xa62>
 8008df8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008dfc:	e7e0      	b.n	8008dc0 <_strtod_l+0xb48>
 8008dfe:	a30e      	add	r3, pc, #56	@ (adr r3, 8008e38 <_strtod_l+0xbc0>)
 8008e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e04:	f7f7 fe6a 	bl	8000adc <__aeabi_dcmplt>
 8008e08:	e798      	b.n	8008d3c <_strtod_l+0xac4>
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e0e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008e10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e12:	6013      	str	r3, [r2, #0]
 8008e14:	f7ff ba6d 	b.w	80082f2 <_strtod_l+0x7a>
 8008e18:	2a65      	cmp	r2, #101	@ 0x65
 8008e1a:	f43f ab66 	beq.w	80084ea <_strtod_l+0x272>
 8008e1e:	2a45      	cmp	r2, #69	@ 0x45
 8008e20:	f43f ab63 	beq.w	80084ea <_strtod_l+0x272>
 8008e24:	2301      	movs	r3, #1
 8008e26:	f7ff bb9e 	b.w	8008566 <_strtod_l+0x2ee>
 8008e2a:	bf00      	nop
 8008e2c:	f3af 8000 	nop.w
 8008e30:	ffc00000 	.word	0xffc00000
 8008e34:	41dfffff 	.word	0x41dfffff
 8008e38:	94a03595 	.word	0x94a03595
 8008e3c:	3fcfffff 	.word	0x3fcfffff

08008e40 <_strtod_r>:
 8008e40:	4b01      	ldr	r3, [pc, #4]	@ (8008e48 <_strtod_r+0x8>)
 8008e42:	f7ff ba19 	b.w	8008278 <_strtod_l>
 8008e46:	bf00      	nop
 8008e48:	20000050 	.word	0x20000050

08008e4c <strtod>:
 8008e4c:	460a      	mov	r2, r1
 8008e4e:	4601      	mov	r1, r0
 8008e50:	4802      	ldr	r0, [pc, #8]	@ (8008e5c <strtod+0x10>)
 8008e52:	4b03      	ldr	r3, [pc, #12]	@ (8008e60 <strtod+0x14>)
 8008e54:	6800      	ldr	r0, [r0, #0]
 8008e56:	f7ff ba0f 	b.w	8008278 <_strtod_l>
 8008e5a:	bf00      	nop
 8008e5c:	200001bc 	.word	0x200001bc
 8008e60:	20000050 	.word	0x20000050

08008e64 <__cvt>:
 8008e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e68:	ec57 6b10 	vmov	r6, r7, d0
 8008e6c:	2f00      	cmp	r7, #0
 8008e6e:	460c      	mov	r4, r1
 8008e70:	4619      	mov	r1, r3
 8008e72:	463b      	mov	r3, r7
 8008e74:	bfbb      	ittet	lt
 8008e76:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008e7a:	461f      	movlt	r7, r3
 8008e7c:	2300      	movge	r3, #0
 8008e7e:	232d      	movlt	r3, #45	@ 0x2d
 8008e80:	700b      	strb	r3, [r1, #0]
 8008e82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e84:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008e88:	4691      	mov	r9, r2
 8008e8a:	f023 0820 	bic.w	r8, r3, #32
 8008e8e:	bfbc      	itt	lt
 8008e90:	4632      	movlt	r2, r6
 8008e92:	4616      	movlt	r6, r2
 8008e94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008e98:	d005      	beq.n	8008ea6 <__cvt+0x42>
 8008e9a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008e9e:	d100      	bne.n	8008ea2 <__cvt+0x3e>
 8008ea0:	3401      	adds	r4, #1
 8008ea2:	2102      	movs	r1, #2
 8008ea4:	e000      	b.n	8008ea8 <__cvt+0x44>
 8008ea6:	2103      	movs	r1, #3
 8008ea8:	ab03      	add	r3, sp, #12
 8008eaa:	9301      	str	r3, [sp, #4]
 8008eac:	ab02      	add	r3, sp, #8
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	ec47 6b10 	vmov	d0, r6, r7
 8008eb4:	4653      	mov	r3, sl
 8008eb6:	4622      	mov	r2, r4
 8008eb8:	f001 f94e 	bl	800a158 <_dtoa_r>
 8008ebc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008ec0:	4605      	mov	r5, r0
 8008ec2:	d119      	bne.n	8008ef8 <__cvt+0x94>
 8008ec4:	f019 0f01 	tst.w	r9, #1
 8008ec8:	d00e      	beq.n	8008ee8 <__cvt+0x84>
 8008eca:	eb00 0904 	add.w	r9, r0, r4
 8008ece:	2200      	movs	r2, #0
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	4639      	mov	r1, r7
 8008ed6:	f7f7 fdf7 	bl	8000ac8 <__aeabi_dcmpeq>
 8008eda:	b108      	cbz	r0, 8008ee0 <__cvt+0x7c>
 8008edc:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ee0:	2230      	movs	r2, #48	@ 0x30
 8008ee2:	9b03      	ldr	r3, [sp, #12]
 8008ee4:	454b      	cmp	r3, r9
 8008ee6:	d31e      	bcc.n	8008f26 <__cvt+0xc2>
 8008ee8:	9b03      	ldr	r3, [sp, #12]
 8008eea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008eec:	1b5b      	subs	r3, r3, r5
 8008eee:	4628      	mov	r0, r5
 8008ef0:	6013      	str	r3, [r2, #0]
 8008ef2:	b004      	add	sp, #16
 8008ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008efc:	eb00 0904 	add.w	r9, r0, r4
 8008f00:	d1e5      	bne.n	8008ece <__cvt+0x6a>
 8008f02:	7803      	ldrb	r3, [r0, #0]
 8008f04:	2b30      	cmp	r3, #48	@ 0x30
 8008f06:	d10a      	bne.n	8008f1e <__cvt+0xba>
 8008f08:	2200      	movs	r2, #0
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	4639      	mov	r1, r7
 8008f10:	f7f7 fdda 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f14:	b918      	cbnz	r0, 8008f1e <__cvt+0xba>
 8008f16:	f1c4 0401 	rsb	r4, r4, #1
 8008f1a:	f8ca 4000 	str.w	r4, [sl]
 8008f1e:	f8da 3000 	ldr.w	r3, [sl]
 8008f22:	4499      	add	r9, r3
 8008f24:	e7d3      	b.n	8008ece <__cvt+0x6a>
 8008f26:	1c59      	adds	r1, r3, #1
 8008f28:	9103      	str	r1, [sp, #12]
 8008f2a:	701a      	strb	r2, [r3, #0]
 8008f2c:	e7d9      	b.n	8008ee2 <__cvt+0x7e>

08008f2e <__exponent>:
 8008f2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f30:	2900      	cmp	r1, #0
 8008f32:	bfba      	itte	lt
 8008f34:	4249      	neglt	r1, r1
 8008f36:	232d      	movlt	r3, #45	@ 0x2d
 8008f38:	232b      	movge	r3, #43	@ 0x2b
 8008f3a:	2909      	cmp	r1, #9
 8008f3c:	7002      	strb	r2, [r0, #0]
 8008f3e:	7043      	strb	r3, [r0, #1]
 8008f40:	dd29      	ble.n	8008f96 <__exponent+0x68>
 8008f42:	f10d 0307 	add.w	r3, sp, #7
 8008f46:	461d      	mov	r5, r3
 8008f48:	270a      	movs	r7, #10
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008f50:	fb07 1416 	mls	r4, r7, r6, r1
 8008f54:	3430      	adds	r4, #48	@ 0x30
 8008f56:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	2c63      	cmp	r4, #99	@ 0x63
 8008f5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f62:	4631      	mov	r1, r6
 8008f64:	dcf1      	bgt.n	8008f4a <__exponent+0x1c>
 8008f66:	3130      	adds	r1, #48	@ 0x30
 8008f68:	1e94      	subs	r4, r2, #2
 8008f6a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008f6e:	1c41      	adds	r1, r0, #1
 8008f70:	4623      	mov	r3, r4
 8008f72:	42ab      	cmp	r3, r5
 8008f74:	d30a      	bcc.n	8008f8c <__exponent+0x5e>
 8008f76:	f10d 0309 	add.w	r3, sp, #9
 8008f7a:	1a9b      	subs	r3, r3, r2
 8008f7c:	42ac      	cmp	r4, r5
 8008f7e:	bf88      	it	hi
 8008f80:	2300      	movhi	r3, #0
 8008f82:	3302      	adds	r3, #2
 8008f84:	4403      	add	r3, r0
 8008f86:	1a18      	subs	r0, r3, r0
 8008f88:	b003      	add	sp, #12
 8008f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f8c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008f90:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008f94:	e7ed      	b.n	8008f72 <__exponent+0x44>
 8008f96:	2330      	movs	r3, #48	@ 0x30
 8008f98:	3130      	adds	r1, #48	@ 0x30
 8008f9a:	7083      	strb	r3, [r0, #2]
 8008f9c:	70c1      	strb	r1, [r0, #3]
 8008f9e:	1d03      	adds	r3, r0, #4
 8008fa0:	e7f1      	b.n	8008f86 <__exponent+0x58>
	...

08008fa4 <_printf_float>:
 8008fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa8:	b08d      	sub	sp, #52	@ 0x34
 8008faa:	460c      	mov	r4, r1
 8008fac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008fb0:	4616      	mov	r6, r2
 8008fb2:	461f      	mov	r7, r3
 8008fb4:	4605      	mov	r5, r0
 8008fb6:	f000 ff8b 	bl	8009ed0 <_localeconv_r>
 8008fba:	6803      	ldr	r3, [r0, #0]
 8008fbc:	9304      	str	r3, [sp, #16]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7f7 f956 	bl	8000270 <strlen>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fc8:	f8d8 3000 	ldr.w	r3, [r8]
 8008fcc:	9005      	str	r0, [sp, #20]
 8008fce:	3307      	adds	r3, #7
 8008fd0:	f023 0307 	bic.w	r3, r3, #7
 8008fd4:	f103 0208 	add.w	r2, r3, #8
 8008fd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008fdc:	f8d4 b000 	ldr.w	fp, [r4]
 8008fe0:	f8c8 2000 	str.w	r2, [r8]
 8008fe4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fe8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008fec:	9307      	str	r3, [sp, #28]
 8008fee:	f8cd 8018 	str.w	r8, [sp, #24]
 8008ff2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008ff6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ffa:	4b9c      	ldr	r3, [pc, #624]	@ (800926c <_printf_float+0x2c8>)
 8008ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8009000:	f7f7 fd94 	bl	8000b2c <__aeabi_dcmpun>
 8009004:	bb70      	cbnz	r0, 8009064 <_printf_float+0xc0>
 8009006:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800900a:	4b98      	ldr	r3, [pc, #608]	@ (800926c <_printf_float+0x2c8>)
 800900c:	f04f 32ff 	mov.w	r2, #4294967295
 8009010:	f7f7 fd6e 	bl	8000af0 <__aeabi_dcmple>
 8009014:	bb30      	cbnz	r0, 8009064 <_printf_float+0xc0>
 8009016:	2200      	movs	r2, #0
 8009018:	2300      	movs	r3, #0
 800901a:	4640      	mov	r0, r8
 800901c:	4649      	mov	r1, r9
 800901e:	f7f7 fd5d 	bl	8000adc <__aeabi_dcmplt>
 8009022:	b110      	cbz	r0, 800902a <_printf_float+0x86>
 8009024:	232d      	movs	r3, #45	@ 0x2d
 8009026:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800902a:	4a91      	ldr	r2, [pc, #580]	@ (8009270 <_printf_float+0x2cc>)
 800902c:	4b91      	ldr	r3, [pc, #580]	@ (8009274 <_printf_float+0x2d0>)
 800902e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009032:	bf94      	ite	ls
 8009034:	4690      	movls	r8, r2
 8009036:	4698      	movhi	r8, r3
 8009038:	2303      	movs	r3, #3
 800903a:	6123      	str	r3, [r4, #16]
 800903c:	f02b 0304 	bic.w	r3, fp, #4
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	f04f 0900 	mov.w	r9, #0
 8009046:	9700      	str	r7, [sp, #0]
 8009048:	4633      	mov	r3, r6
 800904a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800904c:	4621      	mov	r1, r4
 800904e:	4628      	mov	r0, r5
 8009050:	f000 f9d2 	bl	80093f8 <_printf_common>
 8009054:	3001      	adds	r0, #1
 8009056:	f040 808d 	bne.w	8009174 <_printf_float+0x1d0>
 800905a:	f04f 30ff 	mov.w	r0, #4294967295
 800905e:	b00d      	add	sp, #52	@ 0x34
 8009060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009064:	4642      	mov	r2, r8
 8009066:	464b      	mov	r3, r9
 8009068:	4640      	mov	r0, r8
 800906a:	4649      	mov	r1, r9
 800906c:	f7f7 fd5e 	bl	8000b2c <__aeabi_dcmpun>
 8009070:	b140      	cbz	r0, 8009084 <_printf_float+0xe0>
 8009072:	464b      	mov	r3, r9
 8009074:	2b00      	cmp	r3, #0
 8009076:	bfbc      	itt	lt
 8009078:	232d      	movlt	r3, #45	@ 0x2d
 800907a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800907e:	4a7e      	ldr	r2, [pc, #504]	@ (8009278 <_printf_float+0x2d4>)
 8009080:	4b7e      	ldr	r3, [pc, #504]	@ (800927c <_printf_float+0x2d8>)
 8009082:	e7d4      	b.n	800902e <_printf_float+0x8a>
 8009084:	6863      	ldr	r3, [r4, #4]
 8009086:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800908a:	9206      	str	r2, [sp, #24]
 800908c:	1c5a      	adds	r2, r3, #1
 800908e:	d13b      	bne.n	8009108 <_printf_float+0x164>
 8009090:	2306      	movs	r3, #6
 8009092:	6063      	str	r3, [r4, #4]
 8009094:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009098:	2300      	movs	r3, #0
 800909a:	6022      	str	r2, [r4, #0]
 800909c:	9303      	str	r3, [sp, #12]
 800909e:	ab0a      	add	r3, sp, #40	@ 0x28
 80090a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80090a4:	ab09      	add	r3, sp, #36	@ 0x24
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	6861      	ldr	r1, [r4, #4]
 80090aa:	ec49 8b10 	vmov	d0, r8, r9
 80090ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80090b2:	4628      	mov	r0, r5
 80090b4:	f7ff fed6 	bl	8008e64 <__cvt>
 80090b8:	9b06      	ldr	r3, [sp, #24]
 80090ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80090bc:	2b47      	cmp	r3, #71	@ 0x47
 80090be:	4680      	mov	r8, r0
 80090c0:	d129      	bne.n	8009116 <_printf_float+0x172>
 80090c2:	1cc8      	adds	r0, r1, #3
 80090c4:	db02      	blt.n	80090cc <_printf_float+0x128>
 80090c6:	6863      	ldr	r3, [r4, #4]
 80090c8:	4299      	cmp	r1, r3
 80090ca:	dd41      	ble.n	8009150 <_printf_float+0x1ac>
 80090cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80090d0:	fa5f fa8a 	uxtb.w	sl, sl
 80090d4:	3901      	subs	r1, #1
 80090d6:	4652      	mov	r2, sl
 80090d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80090dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80090de:	f7ff ff26 	bl	8008f2e <__exponent>
 80090e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090e4:	1813      	adds	r3, r2, r0
 80090e6:	2a01      	cmp	r2, #1
 80090e8:	4681      	mov	r9, r0
 80090ea:	6123      	str	r3, [r4, #16]
 80090ec:	dc02      	bgt.n	80090f4 <_printf_float+0x150>
 80090ee:	6822      	ldr	r2, [r4, #0]
 80090f0:	07d2      	lsls	r2, r2, #31
 80090f2:	d501      	bpl.n	80090f8 <_printf_float+0x154>
 80090f4:	3301      	adds	r3, #1
 80090f6:	6123      	str	r3, [r4, #16]
 80090f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d0a2      	beq.n	8009046 <_printf_float+0xa2>
 8009100:	232d      	movs	r3, #45	@ 0x2d
 8009102:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009106:	e79e      	b.n	8009046 <_printf_float+0xa2>
 8009108:	9a06      	ldr	r2, [sp, #24]
 800910a:	2a47      	cmp	r2, #71	@ 0x47
 800910c:	d1c2      	bne.n	8009094 <_printf_float+0xf0>
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1c0      	bne.n	8009094 <_printf_float+0xf0>
 8009112:	2301      	movs	r3, #1
 8009114:	e7bd      	b.n	8009092 <_printf_float+0xee>
 8009116:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800911a:	d9db      	bls.n	80090d4 <_printf_float+0x130>
 800911c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009120:	d118      	bne.n	8009154 <_printf_float+0x1b0>
 8009122:	2900      	cmp	r1, #0
 8009124:	6863      	ldr	r3, [r4, #4]
 8009126:	dd0b      	ble.n	8009140 <_printf_float+0x19c>
 8009128:	6121      	str	r1, [r4, #16]
 800912a:	b913      	cbnz	r3, 8009132 <_printf_float+0x18e>
 800912c:	6822      	ldr	r2, [r4, #0]
 800912e:	07d0      	lsls	r0, r2, #31
 8009130:	d502      	bpl.n	8009138 <_printf_float+0x194>
 8009132:	3301      	adds	r3, #1
 8009134:	440b      	add	r3, r1
 8009136:	6123      	str	r3, [r4, #16]
 8009138:	65a1      	str	r1, [r4, #88]	@ 0x58
 800913a:	f04f 0900 	mov.w	r9, #0
 800913e:	e7db      	b.n	80090f8 <_printf_float+0x154>
 8009140:	b913      	cbnz	r3, 8009148 <_printf_float+0x1a4>
 8009142:	6822      	ldr	r2, [r4, #0]
 8009144:	07d2      	lsls	r2, r2, #31
 8009146:	d501      	bpl.n	800914c <_printf_float+0x1a8>
 8009148:	3302      	adds	r3, #2
 800914a:	e7f4      	b.n	8009136 <_printf_float+0x192>
 800914c:	2301      	movs	r3, #1
 800914e:	e7f2      	b.n	8009136 <_printf_float+0x192>
 8009150:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009156:	4299      	cmp	r1, r3
 8009158:	db05      	blt.n	8009166 <_printf_float+0x1c2>
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	6121      	str	r1, [r4, #16]
 800915e:	07d8      	lsls	r0, r3, #31
 8009160:	d5ea      	bpl.n	8009138 <_printf_float+0x194>
 8009162:	1c4b      	adds	r3, r1, #1
 8009164:	e7e7      	b.n	8009136 <_printf_float+0x192>
 8009166:	2900      	cmp	r1, #0
 8009168:	bfd4      	ite	le
 800916a:	f1c1 0202 	rsble	r2, r1, #2
 800916e:	2201      	movgt	r2, #1
 8009170:	4413      	add	r3, r2
 8009172:	e7e0      	b.n	8009136 <_printf_float+0x192>
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	055a      	lsls	r2, r3, #21
 8009178:	d407      	bmi.n	800918a <_printf_float+0x1e6>
 800917a:	6923      	ldr	r3, [r4, #16]
 800917c:	4642      	mov	r2, r8
 800917e:	4631      	mov	r1, r6
 8009180:	4628      	mov	r0, r5
 8009182:	47b8      	blx	r7
 8009184:	3001      	adds	r0, #1
 8009186:	d12b      	bne.n	80091e0 <_printf_float+0x23c>
 8009188:	e767      	b.n	800905a <_printf_float+0xb6>
 800918a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800918e:	f240 80dd 	bls.w	800934c <_printf_float+0x3a8>
 8009192:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009196:	2200      	movs	r2, #0
 8009198:	2300      	movs	r3, #0
 800919a:	f7f7 fc95 	bl	8000ac8 <__aeabi_dcmpeq>
 800919e:	2800      	cmp	r0, #0
 80091a0:	d033      	beq.n	800920a <_printf_float+0x266>
 80091a2:	4a37      	ldr	r2, [pc, #220]	@ (8009280 <_printf_float+0x2dc>)
 80091a4:	2301      	movs	r3, #1
 80091a6:	4631      	mov	r1, r6
 80091a8:	4628      	mov	r0, r5
 80091aa:	47b8      	blx	r7
 80091ac:	3001      	adds	r0, #1
 80091ae:	f43f af54 	beq.w	800905a <_printf_float+0xb6>
 80091b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80091b6:	4543      	cmp	r3, r8
 80091b8:	db02      	blt.n	80091c0 <_printf_float+0x21c>
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	07d8      	lsls	r0, r3, #31
 80091be:	d50f      	bpl.n	80091e0 <_printf_float+0x23c>
 80091c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091c4:	4631      	mov	r1, r6
 80091c6:	4628      	mov	r0, r5
 80091c8:	47b8      	blx	r7
 80091ca:	3001      	adds	r0, #1
 80091cc:	f43f af45 	beq.w	800905a <_printf_float+0xb6>
 80091d0:	f04f 0900 	mov.w	r9, #0
 80091d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80091d8:	f104 0a1a 	add.w	sl, r4, #26
 80091dc:	45c8      	cmp	r8, r9
 80091de:	dc09      	bgt.n	80091f4 <_printf_float+0x250>
 80091e0:	6823      	ldr	r3, [r4, #0]
 80091e2:	079b      	lsls	r3, r3, #30
 80091e4:	f100 8103 	bmi.w	80093ee <_printf_float+0x44a>
 80091e8:	68e0      	ldr	r0, [r4, #12]
 80091ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091ec:	4298      	cmp	r0, r3
 80091ee:	bfb8      	it	lt
 80091f0:	4618      	movlt	r0, r3
 80091f2:	e734      	b.n	800905e <_printf_float+0xba>
 80091f4:	2301      	movs	r3, #1
 80091f6:	4652      	mov	r2, sl
 80091f8:	4631      	mov	r1, r6
 80091fa:	4628      	mov	r0, r5
 80091fc:	47b8      	blx	r7
 80091fe:	3001      	adds	r0, #1
 8009200:	f43f af2b 	beq.w	800905a <_printf_float+0xb6>
 8009204:	f109 0901 	add.w	r9, r9, #1
 8009208:	e7e8      	b.n	80091dc <_printf_float+0x238>
 800920a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800920c:	2b00      	cmp	r3, #0
 800920e:	dc39      	bgt.n	8009284 <_printf_float+0x2e0>
 8009210:	4a1b      	ldr	r2, [pc, #108]	@ (8009280 <_printf_float+0x2dc>)
 8009212:	2301      	movs	r3, #1
 8009214:	4631      	mov	r1, r6
 8009216:	4628      	mov	r0, r5
 8009218:	47b8      	blx	r7
 800921a:	3001      	adds	r0, #1
 800921c:	f43f af1d 	beq.w	800905a <_printf_float+0xb6>
 8009220:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009224:	ea59 0303 	orrs.w	r3, r9, r3
 8009228:	d102      	bne.n	8009230 <_printf_float+0x28c>
 800922a:	6823      	ldr	r3, [r4, #0]
 800922c:	07d9      	lsls	r1, r3, #31
 800922e:	d5d7      	bpl.n	80091e0 <_printf_float+0x23c>
 8009230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009234:	4631      	mov	r1, r6
 8009236:	4628      	mov	r0, r5
 8009238:	47b8      	blx	r7
 800923a:	3001      	adds	r0, #1
 800923c:	f43f af0d 	beq.w	800905a <_printf_float+0xb6>
 8009240:	f04f 0a00 	mov.w	sl, #0
 8009244:	f104 0b1a 	add.w	fp, r4, #26
 8009248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800924a:	425b      	negs	r3, r3
 800924c:	4553      	cmp	r3, sl
 800924e:	dc01      	bgt.n	8009254 <_printf_float+0x2b0>
 8009250:	464b      	mov	r3, r9
 8009252:	e793      	b.n	800917c <_printf_float+0x1d8>
 8009254:	2301      	movs	r3, #1
 8009256:	465a      	mov	r2, fp
 8009258:	4631      	mov	r1, r6
 800925a:	4628      	mov	r0, r5
 800925c:	47b8      	blx	r7
 800925e:	3001      	adds	r0, #1
 8009260:	f43f aefb 	beq.w	800905a <_printf_float+0xb6>
 8009264:	f10a 0a01 	add.w	sl, sl, #1
 8009268:	e7ee      	b.n	8009248 <_printf_float+0x2a4>
 800926a:	bf00      	nop
 800926c:	7fefffff 	.word	0x7fefffff
 8009270:	08011f08 	.word	0x08011f08
 8009274:	08011f0c 	.word	0x08011f0c
 8009278:	08011f10 	.word	0x08011f10
 800927c:	08011f14 	.word	0x08011f14
 8009280:	08011f18 	.word	0x08011f18
 8009284:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009286:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800928a:	4553      	cmp	r3, sl
 800928c:	bfa8      	it	ge
 800928e:	4653      	movge	r3, sl
 8009290:	2b00      	cmp	r3, #0
 8009292:	4699      	mov	r9, r3
 8009294:	dc36      	bgt.n	8009304 <_printf_float+0x360>
 8009296:	f04f 0b00 	mov.w	fp, #0
 800929a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800929e:	f104 021a 	add.w	r2, r4, #26
 80092a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80092a4:	9306      	str	r3, [sp, #24]
 80092a6:	eba3 0309 	sub.w	r3, r3, r9
 80092aa:	455b      	cmp	r3, fp
 80092ac:	dc31      	bgt.n	8009312 <_printf_float+0x36e>
 80092ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092b0:	459a      	cmp	sl, r3
 80092b2:	dc3a      	bgt.n	800932a <_printf_float+0x386>
 80092b4:	6823      	ldr	r3, [r4, #0]
 80092b6:	07da      	lsls	r2, r3, #31
 80092b8:	d437      	bmi.n	800932a <_printf_float+0x386>
 80092ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092bc:	ebaa 0903 	sub.w	r9, sl, r3
 80092c0:	9b06      	ldr	r3, [sp, #24]
 80092c2:	ebaa 0303 	sub.w	r3, sl, r3
 80092c6:	4599      	cmp	r9, r3
 80092c8:	bfa8      	it	ge
 80092ca:	4699      	movge	r9, r3
 80092cc:	f1b9 0f00 	cmp.w	r9, #0
 80092d0:	dc33      	bgt.n	800933a <_printf_float+0x396>
 80092d2:	f04f 0800 	mov.w	r8, #0
 80092d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092da:	f104 0b1a 	add.w	fp, r4, #26
 80092de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092e0:	ebaa 0303 	sub.w	r3, sl, r3
 80092e4:	eba3 0309 	sub.w	r3, r3, r9
 80092e8:	4543      	cmp	r3, r8
 80092ea:	f77f af79 	ble.w	80091e0 <_printf_float+0x23c>
 80092ee:	2301      	movs	r3, #1
 80092f0:	465a      	mov	r2, fp
 80092f2:	4631      	mov	r1, r6
 80092f4:	4628      	mov	r0, r5
 80092f6:	47b8      	blx	r7
 80092f8:	3001      	adds	r0, #1
 80092fa:	f43f aeae 	beq.w	800905a <_printf_float+0xb6>
 80092fe:	f108 0801 	add.w	r8, r8, #1
 8009302:	e7ec      	b.n	80092de <_printf_float+0x33a>
 8009304:	4642      	mov	r2, r8
 8009306:	4631      	mov	r1, r6
 8009308:	4628      	mov	r0, r5
 800930a:	47b8      	blx	r7
 800930c:	3001      	adds	r0, #1
 800930e:	d1c2      	bne.n	8009296 <_printf_float+0x2f2>
 8009310:	e6a3      	b.n	800905a <_printf_float+0xb6>
 8009312:	2301      	movs	r3, #1
 8009314:	4631      	mov	r1, r6
 8009316:	4628      	mov	r0, r5
 8009318:	9206      	str	r2, [sp, #24]
 800931a:	47b8      	blx	r7
 800931c:	3001      	adds	r0, #1
 800931e:	f43f ae9c 	beq.w	800905a <_printf_float+0xb6>
 8009322:	9a06      	ldr	r2, [sp, #24]
 8009324:	f10b 0b01 	add.w	fp, fp, #1
 8009328:	e7bb      	b.n	80092a2 <_printf_float+0x2fe>
 800932a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800932e:	4631      	mov	r1, r6
 8009330:	4628      	mov	r0, r5
 8009332:	47b8      	blx	r7
 8009334:	3001      	adds	r0, #1
 8009336:	d1c0      	bne.n	80092ba <_printf_float+0x316>
 8009338:	e68f      	b.n	800905a <_printf_float+0xb6>
 800933a:	9a06      	ldr	r2, [sp, #24]
 800933c:	464b      	mov	r3, r9
 800933e:	4442      	add	r2, r8
 8009340:	4631      	mov	r1, r6
 8009342:	4628      	mov	r0, r5
 8009344:	47b8      	blx	r7
 8009346:	3001      	adds	r0, #1
 8009348:	d1c3      	bne.n	80092d2 <_printf_float+0x32e>
 800934a:	e686      	b.n	800905a <_printf_float+0xb6>
 800934c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009350:	f1ba 0f01 	cmp.w	sl, #1
 8009354:	dc01      	bgt.n	800935a <_printf_float+0x3b6>
 8009356:	07db      	lsls	r3, r3, #31
 8009358:	d536      	bpl.n	80093c8 <_printf_float+0x424>
 800935a:	2301      	movs	r3, #1
 800935c:	4642      	mov	r2, r8
 800935e:	4631      	mov	r1, r6
 8009360:	4628      	mov	r0, r5
 8009362:	47b8      	blx	r7
 8009364:	3001      	adds	r0, #1
 8009366:	f43f ae78 	beq.w	800905a <_printf_float+0xb6>
 800936a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800936e:	4631      	mov	r1, r6
 8009370:	4628      	mov	r0, r5
 8009372:	47b8      	blx	r7
 8009374:	3001      	adds	r0, #1
 8009376:	f43f ae70 	beq.w	800905a <_printf_float+0xb6>
 800937a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800937e:	2200      	movs	r2, #0
 8009380:	2300      	movs	r3, #0
 8009382:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009386:	f7f7 fb9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800938a:	b9c0      	cbnz	r0, 80093be <_printf_float+0x41a>
 800938c:	4653      	mov	r3, sl
 800938e:	f108 0201 	add.w	r2, r8, #1
 8009392:	4631      	mov	r1, r6
 8009394:	4628      	mov	r0, r5
 8009396:	47b8      	blx	r7
 8009398:	3001      	adds	r0, #1
 800939a:	d10c      	bne.n	80093b6 <_printf_float+0x412>
 800939c:	e65d      	b.n	800905a <_printf_float+0xb6>
 800939e:	2301      	movs	r3, #1
 80093a0:	465a      	mov	r2, fp
 80093a2:	4631      	mov	r1, r6
 80093a4:	4628      	mov	r0, r5
 80093a6:	47b8      	blx	r7
 80093a8:	3001      	adds	r0, #1
 80093aa:	f43f ae56 	beq.w	800905a <_printf_float+0xb6>
 80093ae:	f108 0801 	add.w	r8, r8, #1
 80093b2:	45d0      	cmp	r8, sl
 80093b4:	dbf3      	blt.n	800939e <_printf_float+0x3fa>
 80093b6:	464b      	mov	r3, r9
 80093b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80093bc:	e6df      	b.n	800917e <_printf_float+0x1da>
 80093be:	f04f 0800 	mov.w	r8, #0
 80093c2:	f104 0b1a 	add.w	fp, r4, #26
 80093c6:	e7f4      	b.n	80093b2 <_printf_float+0x40e>
 80093c8:	2301      	movs	r3, #1
 80093ca:	4642      	mov	r2, r8
 80093cc:	e7e1      	b.n	8009392 <_printf_float+0x3ee>
 80093ce:	2301      	movs	r3, #1
 80093d0:	464a      	mov	r2, r9
 80093d2:	4631      	mov	r1, r6
 80093d4:	4628      	mov	r0, r5
 80093d6:	47b8      	blx	r7
 80093d8:	3001      	adds	r0, #1
 80093da:	f43f ae3e 	beq.w	800905a <_printf_float+0xb6>
 80093de:	f108 0801 	add.w	r8, r8, #1
 80093e2:	68e3      	ldr	r3, [r4, #12]
 80093e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80093e6:	1a5b      	subs	r3, r3, r1
 80093e8:	4543      	cmp	r3, r8
 80093ea:	dcf0      	bgt.n	80093ce <_printf_float+0x42a>
 80093ec:	e6fc      	b.n	80091e8 <_printf_float+0x244>
 80093ee:	f04f 0800 	mov.w	r8, #0
 80093f2:	f104 0919 	add.w	r9, r4, #25
 80093f6:	e7f4      	b.n	80093e2 <_printf_float+0x43e>

080093f8 <_printf_common>:
 80093f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093fc:	4616      	mov	r6, r2
 80093fe:	4698      	mov	r8, r3
 8009400:	688a      	ldr	r2, [r1, #8]
 8009402:	690b      	ldr	r3, [r1, #16]
 8009404:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009408:	4293      	cmp	r3, r2
 800940a:	bfb8      	it	lt
 800940c:	4613      	movlt	r3, r2
 800940e:	6033      	str	r3, [r6, #0]
 8009410:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009414:	4607      	mov	r7, r0
 8009416:	460c      	mov	r4, r1
 8009418:	b10a      	cbz	r2, 800941e <_printf_common+0x26>
 800941a:	3301      	adds	r3, #1
 800941c:	6033      	str	r3, [r6, #0]
 800941e:	6823      	ldr	r3, [r4, #0]
 8009420:	0699      	lsls	r1, r3, #26
 8009422:	bf42      	ittt	mi
 8009424:	6833      	ldrmi	r3, [r6, #0]
 8009426:	3302      	addmi	r3, #2
 8009428:	6033      	strmi	r3, [r6, #0]
 800942a:	6825      	ldr	r5, [r4, #0]
 800942c:	f015 0506 	ands.w	r5, r5, #6
 8009430:	d106      	bne.n	8009440 <_printf_common+0x48>
 8009432:	f104 0a19 	add.w	sl, r4, #25
 8009436:	68e3      	ldr	r3, [r4, #12]
 8009438:	6832      	ldr	r2, [r6, #0]
 800943a:	1a9b      	subs	r3, r3, r2
 800943c:	42ab      	cmp	r3, r5
 800943e:	dc26      	bgt.n	800948e <_printf_common+0x96>
 8009440:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009444:	6822      	ldr	r2, [r4, #0]
 8009446:	3b00      	subs	r3, #0
 8009448:	bf18      	it	ne
 800944a:	2301      	movne	r3, #1
 800944c:	0692      	lsls	r2, r2, #26
 800944e:	d42b      	bmi.n	80094a8 <_printf_common+0xb0>
 8009450:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009454:	4641      	mov	r1, r8
 8009456:	4638      	mov	r0, r7
 8009458:	47c8      	blx	r9
 800945a:	3001      	adds	r0, #1
 800945c:	d01e      	beq.n	800949c <_printf_common+0xa4>
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	6922      	ldr	r2, [r4, #16]
 8009462:	f003 0306 	and.w	r3, r3, #6
 8009466:	2b04      	cmp	r3, #4
 8009468:	bf02      	ittt	eq
 800946a:	68e5      	ldreq	r5, [r4, #12]
 800946c:	6833      	ldreq	r3, [r6, #0]
 800946e:	1aed      	subeq	r5, r5, r3
 8009470:	68a3      	ldr	r3, [r4, #8]
 8009472:	bf0c      	ite	eq
 8009474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009478:	2500      	movne	r5, #0
 800947a:	4293      	cmp	r3, r2
 800947c:	bfc4      	itt	gt
 800947e:	1a9b      	subgt	r3, r3, r2
 8009480:	18ed      	addgt	r5, r5, r3
 8009482:	2600      	movs	r6, #0
 8009484:	341a      	adds	r4, #26
 8009486:	42b5      	cmp	r5, r6
 8009488:	d11a      	bne.n	80094c0 <_printf_common+0xc8>
 800948a:	2000      	movs	r0, #0
 800948c:	e008      	b.n	80094a0 <_printf_common+0xa8>
 800948e:	2301      	movs	r3, #1
 8009490:	4652      	mov	r2, sl
 8009492:	4641      	mov	r1, r8
 8009494:	4638      	mov	r0, r7
 8009496:	47c8      	blx	r9
 8009498:	3001      	adds	r0, #1
 800949a:	d103      	bne.n	80094a4 <_printf_common+0xac>
 800949c:	f04f 30ff 	mov.w	r0, #4294967295
 80094a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094a4:	3501      	adds	r5, #1
 80094a6:	e7c6      	b.n	8009436 <_printf_common+0x3e>
 80094a8:	18e1      	adds	r1, r4, r3
 80094aa:	1c5a      	adds	r2, r3, #1
 80094ac:	2030      	movs	r0, #48	@ 0x30
 80094ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80094b2:	4422      	add	r2, r4
 80094b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80094b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80094bc:	3302      	adds	r3, #2
 80094be:	e7c7      	b.n	8009450 <_printf_common+0x58>
 80094c0:	2301      	movs	r3, #1
 80094c2:	4622      	mov	r2, r4
 80094c4:	4641      	mov	r1, r8
 80094c6:	4638      	mov	r0, r7
 80094c8:	47c8      	blx	r9
 80094ca:	3001      	adds	r0, #1
 80094cc:	d0e6      	beq.n	800949c <_printf_common+0xa4>
 80094ce:	3601      	adds	r6, #1
 80094d0:	e7d9      	b.n	8009486 <_printf_common+0x8e>
	...

080094d4 <_printf_i>:
 80094d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094d8:	7e0f      	ldrb	r7, [r1, #24]
 80094da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80094dc:	2f78      	cmp	r7, #120	@ 0x78
 80094de:	4691      	mov	r9, r2
 80094e0:	4680      	mov	r8, r0
 80094e2:	460c      	mov	r4, r1
 80094e4:	469a      	mov	sl, r3
 80094e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80094ea:	d807      	bhi.n	80094fc <_printf_i+0x28>
 80094ec:	2f62      	cmp	r7, #98	@ 0x62
 80094ee:	d80a      	bhi.n	8009506 <_printf_i+0x32>
 80094f0:	2f00      	cmp	r7, #0
 80094f2:	f000 80d2 	beq.w	800969a <_printf_i+0x1c6>
 80094f6:	2f58      	cmp	r7, #88	@ 0x58
 80094f8:	f000 80b9 	beq.w	800966e <_printf_i+0x19a>
 80094fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009500:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009504:	e03a      	b.n	800957c <_printf_i+0xa8>
 8009506:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800950a:	2b15      	cmp	r3, #21
 800950c:	d8f6      	bhi.n	80094fc <_printf_i+0x28>
 800950e:	a101      	add	r1, pc, #4	@ (adr r1, 8009514 <_printf_i+0x40>)
 8009510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009514:	0800956d 	.word	0x0800956d
 8009518:	08009581 	.word	0x08009581
 800951c:	080094fd 	.word	0x080094fd
 8009520:	080094fd 	.word	0x080094fd
 8009524:	080094fd 	.word	0x080094fd
 8009528:	080094fd 	.word	0x080094fd
 800952c:	08009581 	.word	0x08009581
 8009530:	080094fd 	.word	0x080094fd
 8009534:	080094fd 	.word	0x080094fd
 8009538:	080094fd 	.word	0x080094fd
 800953c:	080094fd 	.word	0x080094fd
 8009540:	08009681 	.word	0x08009681
 8009544:	080095ab 	.word	0x080095ab
 8009548:	0800963b 	.word	0x0800963b
 800954c:	080094fd 	.word	0x080094fd
 8009550:	080094fd 	.word	0x080094fd
 8009554:	080096a3 	.word	0x080096a3
 8009558:	080094fd 	.word	0x080094fd
 800955c:	080095ab 	.word	0x080095ab
 8009560:	080094fd 	.word	0x080094fd
 8009564:	080094fd 	.word	0x080094fd
 8009568:	08009643 	.word	0x08009643
 800956c:	6833      	ldr	r3, [r6, #0]
 800956e:	1d1a      	adds	r2, r3, #4
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	6032      	str	r2, [r6, #0]
 8009574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009578:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800957c:	2301      	movs	r3, #1
 800957e:	e09d      	b.n	80096bc <_printf_i+0x1e8>
 8009580:	6833      	ldr	r3, [r6, #0]
 8009582:	6820      	ldr	r0, [r4, #0]
 8009584:	1d19      	adds	r1, r3, #4
 8009586:	6031      	str	r1, [r6, #0]
 8009588:	0606      	lsls	r6, r0, #24
 800958a:	d501      	bpl.n	8009590 <_printf_i+0xbc>
 800958c:	681d      	ldr	r5, [r3, #0]
 800958e:	e003      	b.n	8009598 <_printf_i+0xc4>
 8009590:	0645      	lsls	r5, r0, #25
 8009592:	d5fb      	bpl.n	800958c <_printf_i+0xb8>
 8009594:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009598:	2d00      	cmp	r5, #0
 800959a:	da03      	bge.n	80095a4 <_printf_i+0xd0>
 800959c:	232d      	movs	r3, #45	@ 0x2d
 800959e:	426d      	negs	r5, r5
 80095a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095a4:	4859      	ldr	r0, [pc, #356]	@ (800970c <_printf_i+0x238>)
 80095a6:	230a      	movs	r3, #10
 80095a8:	e011      	b.n	80095ce <_printf_i+0xfa>
 80095aa:	6821      	ldr	r1, [r4, #0]
 80095ac:	6833      	ldr	r3, [r6, #0]
 80095ae:	0608      	lsls	r0, r1, #24
 80095b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80095b4:	d402      	bmi.n	80095bc <_printf_i+0xe8>
 80095b6:	0649      	lsls	r1, r1, #25
 80095b8:	bf48      	it	mi
 80095ba:	b2ad      	uxthmi	r5, r5
 80095bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80095be:	4853      	ldr	r0, [pc, #332]	@ (800970c <_printf_i+0x238>)
 80095c0:	6033      	str	r3, [r6, #0]
 80095c2:	bf14      	ite	ne
 80095c4:	230a      	movne	r3, #10
 80095c6:	2308      	moveq	r3, #8
 80095c8:	2100      	movs	r1, #0
 80095ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80095ce:	6866      	ldr	r6, [r4, #4]
 80095d0:	60a6      	str	r6, [r4, #8]
 80095d2:	2e00      	cmp	r6, #0
 80095d4:	bfa2      	ittt	ge
 80095d6:	6821      	ldrge	r1, [r4, #0]
 80095d8:	f021 0104 	bicge.w	r1, r1, #4
 80095dc:	6021      	strge	r1, [r4, #0]
 80095de:	b90d      	cbnz	r5, 80095e4 <_printf_i+0x110>
 80095e0:	2e00      	cmp	r6, #0
 80095e2:	d04b      	beq.n	800967c <_printf_i+0x1a8>
 80095e4:	4616      	mov	r6, r2
 80095e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80095ea:	fb03 5711 	mls	r7, r3, r1, r5
 80095ee:	5dc7      	ldrb	r7, [r0, r7]
 80095f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095f4:	462f      	mov	r7, r5
 80095f6:	42bb      	cmp	r3, r7
 80095f8:	460d      	mov	r5, r1
 80095fa:	d9f4      	bls.n	80095e6 <_printf_i+0x112>
 80095fc:	2b08      	cmp	r3, #8
 80095fe:	d10b      	bne.n	8009618 <_printf_i+0x144>
 8009600:	6823      	ldr	r3, [r4, #0]
 8009602:	07df      	lsls	r7, r3, #31
 8009604:	d508      	bpl.n	8009618 <_printf_i+0x144>
 8009606:	6923      	ldr	r3, [r4, #16]
 8009608:	6861      	ldr	r1, [r4, #4]
 800960a:	4299      	cmp	r1, r3
 800960c:	bfde      	ittt	le
 800960e:	2330      	movle	r3, #48	@ 0x30
 8009610:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009614:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009618:	1b92      	subs	r2, r2, r6
 800961a:	6122      	str	r2, [r4, #16]
 800961c:	f8cd a000 	str.w	sl, [sp]
 8009620:	464b      	mov	r3, r9
 8009622:	aa03      	add	r2, sp, #12
 8009624:	4621      	mov	r1, r4
 8009626:	4640      	mov	r0, r8
 8009628:	f7ff fee6 	bl	80093f8 <_printf_common>
 800962c:	3001      	adds	r0, #1
 800962e:	d14a      	bne.n	80096c6 <_printf_i+0x1f2>
 8009630:	f04f 30ff 	mov.w	r0, #4294967295
 8009634:	b004      	add	sp, #16
 8009636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	f043 0320 	orr.w	r3, r3, #32
 8009640:	6023      	str	r3, [r4, #0]
 8009642:	4833      	ldr	r0, [pc, #204]	@ (8009710 <_printf_i+0x23c>)
 8009644:	2778      	movs	r7, #120	@ 0x78
 8009646:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800964a:	6823      	ldr	r3, [r4, #0]
 800964c:	6831      	ldr	r1, [r6, #0]
 800964e:	061f      	lsls	r7, r3, #24
 8009650:	f851 5b04 	ldr.w	r5, [r1], #4
 8009654:	d402      	bmi.n	800965c <_printf_i+0x188>
 8009656:	065f      	lsls	r7, r3, #25
 8009658:	bf48      	it	mi
 800965a:	b2ad      	uxthmi	r5, r5
 800965c:	6031      	str	r1, [r6, #0]
 800965e:	07d9      	lsls	r1, r3, #31
 8009660:	bf44      	itt	mi
 8009662:	f043 0320 	orrmi.w	r3, r3, #32
 8009666:	6023      	strmi	r3, [r4, #0]
 8009668:	b11d      	cbz	r5, 8009672 <_printf_i+0x19e>
 800966a:	2310      	movs	r3, #16
 800966c:	e7ac      	b.n	80095c8 <_printf_i+0xf4>
 800966e:	4827      	ldr	r0, [pc, #156]	@ (800970c <_printf_i+0x238>)
 8009670:	e7e9      	b.n	8009646 <_printf_i+0x172>
 8009672:	6823      	ldr	r3, [r4, #0]
 8009674:	f023 0320 	bic.w	r3, r3, #32
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	e7f6      	b.n	800966a <_printf_i+0x196>
 800967c:	4616      	mov	r6, r2
 800967e:	e7bd      	b.n	80095fc <_printf_i+0x128>
 8009680:	6833      	ldr	r3, [r6, #0]
 8009682:	6825      	ldr	r5, [r4, #0]
 8009684:	6961      	ldr	r1, [r4, #20]
 8009686:	1d18      	adds	r0, r3, #4
 8009688:	6030      	str	r0, [r6, #0]
 800968a:	062e      	lsls	r6, r5, #24
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	d501      	bpl.n	8009694 <_printf_i+0x1c0>
 8009690:	6019      	str	r1, [r3, #0]
 8009692:	e002      	b.n	800969a <_printf_i+0x1c6>
 8009694:	0668      	lsls	r0, r5, #25
 8009696:	d5fb      	bpl.n	8009690 <_printf_i+0x1bc>
 8009698:	8019      	strh	r1, [r3, #0]
 800969a:	2300      	movs	r3, #0
 800969c:	6123      	str	r3, [r4, #16]
 800969e:	4616      	mov	r6, r2
 80096a0:	e7bc      	b.n	800961c <_printf_i+0x148>
 80096a2:	6833      	ldr	r3, [r6, #0]
 80096a4:	1d1a      	adds	r2, r3, #4
 80096a6:	6032      	str	r2, [r6, #0]
 80096a8:	681e      	ldr	r6, [r3, #0]
 80096aa:	6862      	ldr	r2, [r4, #4]
 80096ac:	2100      	movs	r1, #0
 80096ae:	4630      	mov	r0, r6
 80096b0:	f7f6 fd8e 	bl	80001d0 <memchr>
 80096b4:	b108      	cbz	r0, 80096ba <_printf_i+0x1e6>
 80096b6:	1b80      	subs	r0, r0, r6
 80096b8:	6060      	str	r0, [r4, #4]
 80096ba:	6863      	ldr	r3, [r4, #4]
 80096bc:	6123      	str	r3, [r4, #16]
 80096be:	2300      	movs	r3, #0
 80096c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096c4:	e7aa      	b.n	800961c <_printf_i+0x148>
 80096c6:	6923      	ldr	r3, [r4, #16]
 80096c8:	4632      	mov	r2, r6
 80096ca:	4649      	mov	r1, r9
 80096cc:	4640      	mov	r0, r8
 80096ce:	47d0      	blx	sl
 80096d0:	3001      	adds	r0, #1
 80096d2:	d0ad      	beq.n	8009630 <_printf_i+0x15c>
 80096d4:	6823      	ldr	r3, [r4, #0]
 80096d6:	079b      	lsls	r3, r3, #30
 80096d8:	d413      	bmi.n	8009702 <_printf_i+0x22e>
 80096da:	68e0      	ldr	r0, [r4, #12]
 80096dc:	9b03      	ldr	r3, [sp, #12]
 80096de:	4298      	cmp	r0, r3
 80096e0:	bfb8      	it	lt
 80096e2:	4618      	movlt	r0, r3
 80096e4:	e7a6      	b.n	8009634 <_printf_i+0x160>
 80096e6:	2301      	movs	r3, #1
 80096e8:	4632      	mov	r2, r6
 80096ea:	4649      	mov	r1, r9
 80096ec:	4640      	mov	r0, r8
 80096ee:	47d0      	blx	sl
 80096f0:	3001      	adds	r0, #1
 80096f2:	d09d      	beq.n	8009630 <_printf_i+0x15c>
 80096f4:	3501      	adds	r5, #1
 80096f6:	68e3      	ldr	r3, [r4, #12]
 80096f8:	9903      	ldr	r1, [sp, #12]
 80096fa:	1a5b      	subs	r3, r3, r1
 80096fc:	42ab      	cmp	r3, r5
 80096fe:	dcf2      	bgt.n	80096e6 <_printf_i+0x212>
 8009700:	e7eb      	b.n	80096da <_printf_i+0x206>
 8009702:	2500      	movs	r5, #0
 8009704:	f104 0619 	add.w	r6, r4, #25
 8009708:	e7f5      	b.n	80096f6 <_printf_i+0x222>
 800970a:	bf00      	nop
 800970c:	08011f1a 	.word	0x08011f1a
 8009710:	08011f2b 	.word	0x08011f2b

08009714 <_scanf_float>:
 8009714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009718:	b087      	sub	sp, #28
 800971a:	4617      	mov	r7, r2
 800971c:	9303      	str	r3, [sp, #12]
 800971e:	688b      	ldr	r3, [r1, #8]
 8009720:	1e5a      	subs	r2, r3, #1
 8009722:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009726:	bf81      	itttt	hi
 8009728:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800972c:	eb03 0b05 	addhi.w	fp, r3, r5
 8009730:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009734:	608b      	strhi	r3, [r1, #8]
 8009736:	680b      	ldr	r3, [r1, #0]
 8009738:	460a      	mov	r2, r1
 800973a:	f04f 0500 	mov.w	r5, #0
 800973e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009742:	f842 3b1c 	str.w	r3, [r2], #28
 8009746:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800974a:	4680      	mov	r8, r0
 800974c:	460c      	mov	r4, r1
 800974e:	bf98      	it	ls
 8009750:	f04f 0b00 	movls.w	fp, #0
 8009754:	9201      	str	r2, [sp, #4]
 8009756:	4616      	mov	r6, r2
 8009758:	46aa      	mov	sl, r5
 800975a:	46a9      	mov	r9, r5
 800975c:	9502      	str	r5, [sp, #8]
 800975e:	68a2      	ldr	r2, [r4, #8]
 8009760:	b152      	cbz	r2, 8009778 <_scanf_float+0x64>
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	2b4e      	cmp	r3, #78	@ 0x4e
 8009768:	d864      	bhi.n	8009834 <_scanf_float+0x120>
 800976a:	2b40      	cmp	r3, #64	@ 0x40
 800976c:	d83c      	bhi.n	80097e8 <_scanf_float+0xd4>
 800976e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009772:	b2c8      	uxtb	r0, r1
 8009774:	280e      	cmp	r0, #14
 8009776:	d93a      	bls.n	80097ee <_scanf_float+0xda>
 8009778:	f1b9 0f00 	cmp.w	r9, #0
 800977c:	d003      	beq.n	8009786 <_scanf_float+0x72>
 800977e:	6823      	ldr	r3, [r4, #0]
 8009780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009784:	6023      	str	r3, [r4, #0]
 8009786:	f10a 3aff 	add.w	sl, sl, #4294967295
 800978a:	f1ba 0f01 	cmp.w	sl, #1
 800978e:	f200 8117 	bhi.w	80099c0 <_scanf_float+0x2ac>
 8009792:	9b01      	ldr	r3, [sp, #4]
 8009794:	429e      	cmp	r6, r3
 8009796:	f200 8108 	bhi.w	80099aa <_scanf_float+0x296>
 800979a:	2001      	movs	r0, #1
 800979c:	b007      	add	sp, #28
 800979e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80097a6:	2a0d      	cmp	r2, #13
 80097a8:	d8e6      	bhi.n	8009778 <_scanf_float+0x64>
 80097aa:	a101      	add	r1, pc, #4	@ (adr r1, 80097b0 <_scanf_float+0x9c>)
 80097ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80097b0:	080098f7 	.word	0x080098f7
 80097b4:	08009779 	.word	0x08009779
 80097b8:	08009779 	.word	0x08009779
 80097bc:	08009779 	.word	0x08009779
 80097c0:	08009957 	.word	0x08009957
 80097c4:	0800992f 	.word	0x0800992f
 80097c8:	08009779 	.word	0x08009779
 80097cc:	08009779 	.word	0x08009779
 80097d0:	08009905 	.word	0x08009905
 80097d4:	08009779 	.word	0x08009779
 80097d8:	08009779 	.word	0x08009779
 80097dc:	08009779 	.word	0x08009779
 80097e0:	08009779 	.word	0x08009779
 80097e4:	080098bd 	.word	0x080098bd
 80097e8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80097ec:	e7db      	b.n	80097a6 <_scanf_float+0x92>
 80097ee:	290e      	cmp	r1, #14
 80097f0:	d8c2      	bhi.n	8009778 <_scanf_float+0x64>
 80097f2:	a001      	add	r0, pc, #4	@ (adr r0, 80097f8 <_scanf_float+0xe4>)
 80097f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80097f8:	080098ad 	.word	0x080098ad
 80097fc:	08009779 	.word	0x08009779
 8009800:	080098ad 	.word	0x080098ad
 8009804:	08009943 	.word	0x08009943
 8009808:	08009779 	.word	0x08009779
 800980c:	08009855 	.word	0x08009855
 8009810:	08009893 	.word	0x08009893
 8009814:	08009893 	.word	0x08009893
 8009818:	08009893 	.word	0x08009893
 800981c:	08009893 	.word	0x08009893
 8009820:	08009893 	.word	0x08009893
 8009824:	08009893 	.word	0x08009893
 8009828:	08009893 	.word	0x08009893
 800982c:	08009893 	.word	0x08009893
 8009830:	08009893 	.word	0x08009893
 8009834:	2b6e      	cmp	r3, #110	@ 0x6e
 8009836:	d809      	bhi.n	800984c <_scanf_float+0x138>
 8009838:	2b60      	cmp	r3, #96	@ 0x60
 800983a:	d8b2      	bhi.n	80097a2 <_scanf_float+0x8e>
 800983c:	2b54      	cmp	r3, #84	@ 0x54
 800983e:	d07b      	beq.n	8009938 <_scanf_float+0x224>
 8009840:	2b59      	cmp	r3, #89	@ 0x59
 8009842:	d199      	bne.n	8009778 <_scanf_float+0x64>
 8009844:	2d07      	cmp	r5, #7
 8009846:	d197      	bne.n	8009778 <_scanf_float+0x64>
 8009848:	2508      	movs	r5, #8
 800984a:	e02c      	b.n	80098a6 <_scanf_float+0x192>
 800984c:	2b74      	cmp	r3, #116	@ 0x74
 800984e:	d073      	beq.n	8009938 <_scanf_float+0x224>
 8009850:	2b79      	cmp	r3, #121	@ 0x79
 8009852:	e7f6      	b.n	8009842 <_scanf_float+0x12e>
 8009854:	6821      	ldr	r1, [r4, #0]
 8009856:	05c8      	lsls	r0, r1, #23
 8009858:	d51b      	bpl.n	8009892 <_scanf_float+0x17e>
 800985a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800985e:	6021      	str	r1, [r4, #0]
 8009860:	f109 0901 	add.w	r9, r9, #1
 8009864:	f1bb 0f00 	cmp.w	fp, #0
 8009868:	d003      	beq.n	8009872 <_scanf_float+0x15e>
 800986a:	3201      	adds	r2, #1
 800986c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009870:	60a2      	str	r2, [r4, #8]
 8009872:	68a3      	ldr	r3, [r4, #8]
 8009874:	3b01      	subs	r3, #1
 8009876:	60a3      	str	r3, [r4, #8]
 8009878:	6923      	ldr	r3, [r4, #16]
 800987a:	3301      	adds	r3, #1
 800987c:	6123      	str	r3, [r4, #16]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	3b01      	subs	r3, #1
 8009882:	2b00      	cmp	r3, #0
 8009884:	607b      	str	r3, [r7, #4]
 8009886:	f340 8087 	ble.w	8009998 <_scanf_float+0x284>
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	3301      	adds	r3, #1
 800988e:	603b      	str	r3, [r7, #0]
 8009890:	e765      	b.n	800975e <_scanf_float+0x4a>
 8009892:	eb1a 0105 	adds.w	r1, sl, r5
 8009896:	f47f af6f 	bne.w	8009778 <_scanf_float+0x64>
 800989a:	6822      	ldr	r2, [r4, #0]
 800989c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80098a0:	6022      	str	r2, [r4, #0]
 80098a2:	460d      	mov	r5, r1
 80098a4:	468a      	mov	sl, r1
 80098a6:	f806 3b01 	strb.w	r3, [r6], #1
 80098aa:	e7e2      	b.n	8009872 <_scanf_float+0x15e>
 80098ac:	6822      	ldr	r2, [r4, #0]
 80098ae:	0610      	lsls	r0, r2, #24
 80098b0:	f57f af62 	bpl.w	8009778 <_scanf_float+0x64>
 80098b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80098b8:	6022      	str	r2, [r4, #0]
 80098ba:	e7f4      	b.n	80098a6 <_scanf_float+0x192>
 80098bc:	f1ba 0f00 	cmp.w	sl, #0
 80098c0:	d10e      	bne.n	80098e0 <_scanf_float+0x1cc>
 80098c2:	f1b9 0f00 	cmp.w	r9, #0
 80098c6:	d10e      	bne.n	80098e6 <_scanf_float+0x1d2>
 80098c8:	6822      	ldr	r2, [r4, #0]
 80098ca:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80098ce:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80098d2:	d108      	bne.n	80098e6 <_scanf_float+0x1d2>
 80098d4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80098d8:	6022      	str	r2, [r4, #0]
 80098da:	f04f 0a01 	mov.w	sl, #1
 80098de:	e7e2      	b.n	80098a6 <_scanf_float+0x192>
 80098e0:	f1ba 0f02 	cmp.w	sl, #2
 80098e4:	d055      	beq.n	8009992 <_scanf_float+0x27e>
 80098e6:	2d01      	cmp	r5, #1
 80098e8:	d002      	beq.n	80098f0 <_scanf_float+0x1dc>
 80098ea:	2d04      	cmp	r5, #4
 80098ec:	f47f af44 	bne.w	8009778 <_scanf_float+0x64>
 80098f0:	3501      	adds	r5, #1
 80098f2:	b2ed      	uxtb	r5, r5
 80098f4:	e7d7      	b.n	80098a6 <_scanf_float+0x192>
 80098f6:	f1ba 0f01 	cmp.w	sl, #1
 80098fa:	f47f af3d 	bne.w	8009778 <_scanf_float+0x64>
 80098fe:	f04f 0a02 	mov.w	sl, #2
 8009902:	e7d0      	b.n	80098a6 <_scanf_float+0x192>
 8009904:	b97d      	cbnz	r5, 8009926 <_scanf_float+0x212>
 8009906:	f1b9 0f00 	cmp.w	r9, #0
 800990a:	f47f af38 	bne.w	800977e <_scanf_float+0x6a>
 800990e:	6822      	ldr	r2, [r4, #0]
 8009910:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009914:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009918:	f040 8108 	bne.w	8009b2c <_scanf_float+0x418>
 800991c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009920:	6022      	str	r2, [r4, #0]
 8009922:	2501      	movs	r5, #1
 8009924:	e7bf      	b.n	80098a6 <_scanf_float+0x192>
 8009926:	2d03      	cmp	r5, #3
 8009928:	d0e2      	beq.n	80098f0 <_scanf_float+0x1dc>
 800992a:	2d05      	cmp	r5, #5
 800992c:	e7de      	b.n	80098ec <_scanf_float+0x1d8>
 800992e:	2d02      	cmp	r5, #2
 8009930:	f47f af22 	bne.w	8009778 <_scanf_float+0x64>
 8009934:	2503      	movs	r5, #3
 8009936:	e7b6      	b.n	80098a6 <_scanf_float+0x192>
 8009938:	2d06      	cmp	r5, #6
 800993a:	f47f af1d 	bne.w	8009778 <_scanf_float+0x64>
 800993e:	2507      	movs	r5, #7
 8009940:	e7b1      	b.n	80098a6 <_scanf_float+0x192>
 8009942:	6822      	ldr	r2, [r4, #0]
 8009944:	0591      	lsls	r1, r2, #22
 8009946:	f57f af17 	bpl.w	8009778 <_scanf_float+0x64>
 800994a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800994e:	6022      	str	r2, [r4, #0]
 8009950:	f8cd 9008 	str.w	r9, [sp, #8]
 8009954:	e7a7      	b.n	80098a6 <_scanf_float+0x192>
 8009956:	6822      	ldr	r2, [r4, #0]
 8009958:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800995c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009960:	d006      	beq.n	8009970 <_scanf_float+0x25c>
 8009962:	0550      	lsls	r0, r2, #21
 8009964:	f57f af08 	bpl.w	8009778 <_scanf_float+0x64>
 8009968:	f1b9 0f00 	cmp.w	r9, #0
 800996c:	f000 80de 	beq.w	8009b2c <_scanf_float+0x418>
 8009970:	0591      	lsls	r1, r2, #22
 8009972:	bf58      	it	pl
 8009974:	9902      	ldrpl	r1, [sp, #8]
 8009976:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800997a:	bf58      	it	pl
 800997c:	eba9 0101 	subpl.w	r1, r9, r1
 8009980:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009984:	bf58      	it	pl
 8009986:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800998a:	6022      	str	r2, [r4, #0]
 800998c:	f04f 0900 	mov.w	r9, #0
 8009990:	e789      	b.n	80098a6 <_scanf_float+0x192>
 8009992:	f04f 0a03 	mov.w	sl, #3
 8009996:	e786      	b.n	80098a6 <_scanf_float+0x192>
 8009998:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800999c:	4639      	mov	r1, r7
 800999e:	4640      	mov	r0, r8
 80099a0:	4798      	blx	r3
 80099a2:	2800      	cmp	r0, #0
 80099a4:	f43f aedb 	beq.w	800975e <_scanf_float+0x4a>
 80099a8:	e6e6      	b.n	8009778 <_scanf_float+0x64>
 80099aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80099b2:	463a      	mov	r2, r7
 80099b4:	4640      	mov	r0, r8
 80099b6:	4798      	blx	r3
 80099b8:	6923      	ldr	r3, [r4, #16]
 80099ba:	3b01      	subs	r3, #1
 80099bc:	6123      	str	r3, [r4, #16]
 80099be:	e6e8      	b.n	8009792 <_scanf_float+0x7e>
 80099c0:	1e6b      	subs	r3, r5, #1
 80099c2:	2b06      	cmp	r3, #6
 80099c4:	d824      	bhi.n	8009a10 <_scanf_float+0x2fc>
 80099c6:	2d02      	cmp	r5, #2
 80099c8:	d836      	bhi.n	8009a38 <_scanf_float+0x324>
 80099ca:	9b01      	ldr	r3, [sp, #4]
 80099cc:	429e      	cmp	r6, r3
 80099ce:	f67f aee4 	bls.w	800979a <_scanf_float+0x86>
 80099d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80099da:	463a      	mov	r2, r7
 80099dc:	4640      	mov	r0, r8
 80099de:	4798      	blx	r3
 80099e0:	6923      	ldr	r3, [r4, #16]
 80099e2:	3b01      	subs	r3, #1
 80099e4:	6123      	str	r3, [r4, #16]
 80099e6:	e7f0      	b.n	80099ca <_scanf_float+0x2b6>
 80099e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099ec:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80099f0:	463a      	mov	r2, r7
 80099f2:	4640      	mov	r0, r8
 80099f4:	4798      	blx	r3
 80099f6:	6923      	ldr	r3, [r4, #16]
 80099f8:	3b01      	subs	r3, #1
 80099fa:	6123      	str	r3, [r4, #16]
 80099fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a00:	fa5f fa8a 	uxtb.w	sl, sl
 8009a04:	f1ba 0f02 	cmp.w	sl, #2
 8009a08:	d1ee      	bne.n	80099e8 <_scanf_float+0x2d4>
 8009a0a:	3d03      	subs	r5, #3
 8009a0c:	b2ed      	uxtb	r5, r5
 8009a0e:	1b76      	subs	r6, r6, r5
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	05da      	lsls	r2, r3, #23
 8009a14:	d530      	bpl.n	8009a78 <_scanf_float+0x364>
 8009a16:	055b      	lsls	r3, r3, #21
 8009a18:	d511      	bpl.n	8009a3e <_scanf_float+0x32a>
 8009a1a:	9b01      	ldr	r3, [sp, #4]
 8009a1c:	429e      	cmp	r6, r3
 8009a1e:	f67f aebc 	bls.w	800979a <_scanf_float+0x86>
 8009a22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009a26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a2a:	463a      	mov	r2, r7
 8009a2c:	4640      	mov	r0, r8
 8009a2e:	4798      	blx	r3
 8009a30:	6923      	ldr	r3, [r4, #16]
 8009a32:	3b01      	subs	r3, #1
 8009a34:	6123      	str	r3, [r4, #16]
 8009a36:	e7f0      	b.n	8009a1a <_scanf_float+0x306>
 8009a38:	46aa      	mov	sl, r5
 8009a3a:	46b3      	mov	fp, r6
 8009a3c:	e7de      	b.n	80099fc <_scanf_float+0x2e8>
 8009a3e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009a42:	6923      	ldr	r3, [r4, #16]
 8009a44:	2965      	cmp	r1, #101	@ 0x65
 8009a46:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a4a:	f106 35ff 	add.w	r5, r6, #4294967295
 8009a4e:	6123      	str	r3, [r4, #16]
 8009a50:	d00c      	beq.n	8009a6c <_scanf_float+0x358>
 8009a52:	2945      	cmp	r1, #69	@ 0x45
 8009a54:	d00a      	beq.n	8009a6c <_scanf_float+0x358>
 8009a56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009a5a:	463a      	mov	r2, r7
 8009a5c:	4640      	mov	r0, r8
 8009a5e:	4798      	blx	r3
 8009a60:	6923      	ldr	r3, [r4, #16]
 8009a62:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009a66:	3b01      	subs	r3, #1
 8009a68:	1eb5      	subs	r5, r6, #2
 8009a6a:	6123      	str	r3, [r4, #16]
 8009a6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009a70:	463a      	mov	r2, r7
 8009a72:	4640      	mov	r0, r8
 8009a74:	4798      	blx	r3
 8009a76:	462e      	mov	r6, r5
 8009a78:	6822      	ldr	r2, [r4, #0]
 8009a7a:	f012 0210 	ands.w	r2, r2, #16
 8009a7e:	d001      	beq.n	8009a84 <_scanf_float+0x370>
 8009a80:	2000      	movs	r0, #0
 8009a82:	e68b      	b.n	800979c <_scanf_float+0x88>
 8009a84:	7032      	strb	r2, [r6, #0]
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a90:	d11c      	bne.n	8009acc <_scanf_float+0x3b8>
 8009a92:	9b02      	ldr	r3, [sp, #8]
 8009a94:	454b      	cmp	r3, r9
 8009a96:	eba3 0209 	sub.w	r2, r3, r9
 8009a9a:	d123      	bne.n	8009ae4 <_scanf_float+0x3d0>
 8009a9c:	9901      	ldr	r1, [sp, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	4640      	mov	r0, r8
 8009aa2:	f7ff f9cd 	bl	8008e40 <_strtod_r>
 8009aa6:	9b03      	ldr	r3, [sp, #12]
 8009aa8:	6821      	ldr	r1, [r4, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f011 0f02 	tst.w	r1, #2
 8009ab0:	ec57 6b10 	vmov	r6, r7, d0
 8009ab4:	f103 0204 	add.w	r2, r3, #4
 8009ab8:	d01f      	beq.n	8009afa <_scanf_float+0x3e6>
 8009aba:	9903      	ldr	r1, [sp, #12]
 8009abc:	600a      	str	r2, [r1, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	e9c3 6700 	strd	r6, r7, [r3]
 8009ac4:	68e3      	ldr	r3, [r4, #12]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	60e3      	str	r3, [r4, #12]
 8009aca:	e7d9      	b.n	8009a80 <_scanf_float+0x36c>
 8009acc:	9b04      	ldr	r3, [sp, #16]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d0e4      	beq.n	8009a9c <_scanf_float+0x388>
 8009ad2:	9905      	ldr	r1, [sp, #20]
 8009ad4:	230a      	movs	r3, #10
 8009ad6:	3101      	adds	r1, #1
 8009ad8:	4640      	mov	r0, r8
 8009ada:	f002 fa79 	bl	800bfd0 <_strtol_r>
 8009ade:	9b04      	ldr	r3, [sp, #16]
 8009ae0:	9e05      	ldr	r6, [sp, #20]
 8009ae2:	1ac2      	subs	r2, r0, r3
 8009ae4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009ae8:	429e      	cmp	r6, r3
 8009aea:	bf28      	it	cs
 8009aec:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009af0:	4910      	ldr	r1, [pc, #64]	@ (8009b34 <_scanf_float+0x420>)
 8009af2:	4630      	mov	r0, r6
 8009af4:	f000 f8e4 	bl	8009cc0 <siprintf>
 8009af8:	e7d0      	b.n	8009a9c <_scanf_float+0x388>
 8009afa:	f011 0f04 	tst.w	r1, #4
 8009afe:	9903      	ldr	r1, [sp, #12]
 8009b00:	600a      	str	r2, [r1, #0]
 8009b02:	d1dc      	bne.n	8009abe <_scanf_float+0x3aa>
 8009b04:	681d      	ldr	r5, [r3, #0]
 8009b06:	4632      	mov	r2, r6
 8009b08:	463b      	mov	r3, r7
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	4639      	mov	r1, r7
 8009b0e:	f7f7 f80d 	bl	8000b2c <__aeabi_dcmpun>
 8009b12:	b128      	cbz	r0, 8009b20 <_scanf_float+0x40c>
 8009b14:	4808      	ldr	r0, [pc, #32]	@ (8009b38 <_scanf_float+0x424>)
 8009b16:	f000 fa73 	bl	800a000 <nanf>
 8009b1a:	ed85 0a00 	vstr	s0, [r5]
 8009b1e:	e7d1      	b.n	8009ac4 <_scanf_float+0x3b0>
 8009b20:	4630      	mov	r0, r6
 8009b22:	4639      	mov	r1, r7
 8009b24:	f7f7 f860 	bl	8000be8 <__aeabi_d2f>
 8009b28:	6028      	str	r0, [r5, #0]
 8009b2a:	e7cb      	b.n	8009ac4 <_scanf_float+0x3b0>
 8009b2c:	f04f 0900 	mov.w	r9, #0
 8009b30:	e629      	b.n	8009786 <_scanf_float+0x72>
 8009b32:	bf00      	nop
 8009b34:	08011f3c 	.word	0x08011f3c
 8009b38:	08011ff5 	.word	0x08011ff5

08009b3c <std>:
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	b510      	push	{r4, lr}
 8009b40:	4604      	mov	r4, r0
 8009b42:	e9c0 3300 	strd	r3, r3, [r0]
 8009b46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b4a:	6083      	str	r3, [r0, #8]
 8009b4c:	8181      	strh	r1, [r0, #12]
 8009b4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009b50:	81c2      	strh	r2, [r0, #14]
 8009b52:	6183      	str	r3, [r0, #24]
 8009b54:	4619      	mov	r1, r3
 8009b56:	2208      	movs	r2, #8
 8009b58:	305c      	adds	r0, #92	@ 0x5c
 8009b5a:	f000 f935 	bl	8009dc8 <memset>
 8009b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8009b94 <std+0x58>)
 8009b60:	6263      	str	r3, [r4, #36]	@ 0x24
 8009b62:	4b0d      	ldr	r3, [pc, #52]	@ (8009b98 <std+0x5c>)
 8009b64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009b66:	4b0d      	ldr	r3, [pc, #52]	@ (8009b9c <std+0x60>)
 8009b68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ba0 <std+0x64>)
 8009b6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8009b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ba4 <std+0x68>)
 8009b70:	6224      	str	r4, [r4, #32]
 8009b72:	429c      	cmp	r4, r3
 8009b74:	d006      	beq.n	8009b84 <std+0x48>
 8009b76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009b7a:	4294      	cmp	r4, r2
 8009b7c:	d002      	beq.n	8009b84 <std+0x48>
 8009b7e:	33d0      	adds	r3, #208	@ 0xd0
 8009b80:	429c      	cmp	r4, r3
 8009b82:	d105      	bne.n	8009b90 <std+0x54>
 8009b84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b8c:	f000 ba14 	b.w	8009fb8 <__retarget_lock_init_recursive>
 8009b90:	bd10      	pop	{r4, pc}
 8009b92:	bf00      	nop
 8009b94:	08009d01 	.word	0x08009d01
 8009b98:	08009d23 	.word	0x08009d23
 8009b9c:	08009d5b 	.word	0x08009d5b
 8009ba0:	08009d7f 	.word	0x08009d7f
 8009ba4:	20002764 	.word	0x20002764

08009ba8 <stdio_exit_handler>:
 8009ba8:	4a02      	ldr	r2, [pc, #8]	@ (8009bb4 <stdio_exit_handler+0xc>)
 8009baa:	4903      	ldr	r1, [pc, #12]	@ (8009bb8 <stdio_exit_handler+0x10>)
 8009bac:	4803      	ldr	r0, [pc, #12]	@ (8009bbc <stdio_exit_handler+0x14>)
 8009bae:	f000 b869 	b.w	8009c84 <_fwalk_sglue>
 8009bb2:	bf00      	nop
 8009bb4:	20000044 	.word	0x20000044
 8009bb8:	0800c3a5 	.word	0x0800c3a5
 8009bbc:	200001c0 	.word	0x200001c0

08009bc0 <cleanup_stdio>:
 8009bc0:	6841      	ldr	r1, [r0, #4]
 8009bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8009bf4 <cleanup_stdio+0x34>)
 8009bc4:	4299      	cmp	r1, r3
 8009bc6:	b510      	push	{r4, lr}
 8009bc8:	4604      	mov	r4, r0
 8009bca:	d001      	beq.n	8009bd0 <cleanup_stdio+0x10>
 8009bcc:	f002 fbea 	bl	800c3a4 <_fflush_r>
 8009bd0:	68a1      	ldr	r1, [r4, #8]
 8009bd2:	4b09      	ldr	r3, [pc, #36]	@ (8009bf8 <cleanup_stdio+0x38>)
 8009bd4:	4299      	cmp	r1, r3
 8009bd6:	d002      	beq.n	8009bde <cleanup_stdio+0x1e>
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f002 fbe3 	bl	800c3a4 <_fflush_r>
 8009bde:	68e1      	ldr	r1, [r4, #12]
 8009be0:	4b06      	ldr	r3, [pc, #24]	@ (8009bfc <cleanup_stdio+0x3c>)
 8009be2:	4299      	cmp	r1, r3
 8009be4:	d004      	beq.n	8009bf0 <cleanup_stdio+0x30>
 8009be6:	4620      	mov	r0, r4
 8009be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bec:	f002 bbda 	b.w	800c3a4 <_fflush_r>
 8009bf0:	bd10      	pop	{r4, pc}
 8009bf2:	bf00      	nop
 8009bf4:	20002764 	.word	0x20002764
 8009bf8:	200027cc 	.word	0x200027cc
 8009bfc:	20002834 	.word	0x20002834

08009c00 <global_stdio_init.part.0>:
 8009c00:	b510      	push	{r4, lr}
 8009c02:	4b0b      	ldr	r3, [pc, #44]	@ (8009c30 <global_stdio_init.part.0+0x30>)
 8009c04:	4c0b      	ldr	r4, [pc, #44]	@ (8009c34 <global_stdio_init.part.0+0x34>)
 8009c06:	4a0c      	ldr	r2, [pc, #48]	@ (8009c38 <global_stdio_init.part.0+0x38>)
 8009c08:	601a      	str	r2, [r3, #0]
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	2104      	movs	r1, #4
 8009c10:	f7ff ff94 	bl	8009b3c <std>
 8009c14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009c18:	2201      	movs	r2, #1
 8009c1a:	2109      	movs	r1, #9
 8009c1c:	f7ff ff8e 	bl	8009b3c <std>
 8009c20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009c24:	2202      	movs	r2, #2
 8009c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c2a:	2112      	movs	r1, #18
 8009c2c:	f7ff bf86 	b.w	8009b3c <std>
 8009c30:	2000289c 	.word	0x2000289c
 8009c34:	20002764 	.word	0x20002764
 8009c38:	08009ba9 	.word	0x08009ba9

08009c3c <__sfp_lock_acquire>:
 8009c3c:	4801      	ldr	r0, [pc, #4]	@ (8009c44 <__sfp_lock_acquire+0x8>)
 8009c3e:	f000 b9bc 	b.w	8009fba <__retarget_lock_acquire_recursive>
 8009c42:	bf00      	nop
 8009c44:	200028a5 	.word	0x200028a5

08009c48 <__sfp_lock_release>:
 8009c48:	4801      	ldr	r0, [pc, #4]	@ (8009c50 <__sfp_lock_release+0x8>)
 8009c4a:	f000 b9b7 	b.w	8009fbc <__retarget_lock_release_recursive>
 8009c4e:	bf00      	nop
 8009c50:	200028a5 	.word	0x200028a5

08009c54 <__sinit>:
 8009c54:	b510      	push	{r4, lr}
 8009c56:	4604      	mov	r4, r0
 8009c58:	f7ff fff0 	bl	8009c3c <__sfp_lock_acquire>
 8009c5c:	6a23      	ldr	r3, [r4, #32]
 8009c5e:	b11b      	cbz	r3, 8009c68 <__sinit+0x14>
 8009c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c64:	f7ff bff0 	b.w	8009c48 <__sfp_lock_release>
 8009c68:	4b04      	ldr	r3, [pc, #16]	@ (8009c7c <__sinit+0x28>)
 8009c6a:	6223      	str	r3, [r4, #32]
 8009c6c:	4b04      	ldr	r3, [pc, #16]	@ (8009c80 <__sinit+0x2c>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1f5      	bne.n	8009c60 <__sinit+0xc>
 8009c74:	f7ff ffc4 	bl	8009c00 <global_stdio_init.part.0>
 8009c78:	e7f2      	b.n	8009c60 <__sinit+0xc>
 8009c7a:	bf00      	nop
 8009c7c:	08009bc1 	.word	0x08009bc1
 8009c80:	2000289c 	.word	0x2000289c

08009c84 <_fwalk_sglue>:
 8009c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c88:	4607      	mov	r7, r0
 8009c8a:	4688      	mov	r8, r1
 8009c8c:	4614      	mov	r4, r2
 8009c8e:	2600      	movs	r6, #0
 8009c90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c94:	f1b9 0901 	subs.w	r9, r9, #1
 8009c98:	d505      	bpl.n	8009ca6 <_fwalk_sglue+0x22>
 8009c9a:	6824      	ldr	r4, [r4, #0]
 8009c9c:	2c00      	cmp	r4, #0
 8009c9e:	d1f7      	bne.n	8009c90 <_fwalk_sglue+0xc>
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ca6:	89ab      	ldrh	r3, [r5, #12]
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d907      	bls.n	8009cbc <_fwalk_sglue+0x38>
 8009cac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	d003      	beq.n	8009cbc <_fwalk_sglue+0x38>
 8009cb4:	4629      	mov	r1, r5
 8009cb6:	4638      	mov	r0, r7
 8009cb8:	47c0      	blx	r8
 8009cba:	4306      	orrs	r6, r0
 8009cbc:	3568      	adds	r5, #104	@ 0x68
 8009cbe:	e7e9      	b.n	8009c94 <_fwalk_sglue+0x10>

08009cc0 <siprintf>:
 8009cc0:	b40e      	push	{r1, r2, r3}
 8009cc2:	b500      	push	{lr}
 8009cc4:	b09c      	sub	sp, #112	@ 0x70
 8009cc6:	ab1d      	add	r3, sp, #116	@ 0x74
 8009cc8:	9002      	str	r0, [sp, #8]
 8009cca:	9006      	str	r0, [sp, #24]
 8009ccc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009cd0:	4809      	ldr	r0, [pc, #36]	@ (8009cf8 <siprintf+0x38>)
 8009cd2:	9107      	str	r1, [sp, #28]
 8009cd4:	9104      	str	r1, [sp, #16]
 8009cd6:	4909      	ldr	r1, [pc, #36]	@ (8009cfc <siprintf+0x3c>)
 8009cd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cdc:	9105      	str	r1, [sp, #20]
 8009cde:	6800      	ldr	r0, [r0, #0]
 8009ce0:	9301      	str	r3, [sp, #4]
 8009ce2:	a902      	add	r1, sp, #8
 8009ce4:	f002 f9de 	bl	800c0a4 <_svfiprintf_r>
 8009ce8:	9b02      	ldr	r3, [sp, #8]
 8009cea:	2200      	movs	r2, #0
 8009cec:	701a      	strb	r2, [r3, #0]
 8009cee:	b01c      	add	sp, #112	@ 0x70
 8009cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cf4:	b003      	add	sp, #12
 8009cf6:	4770      	bx	lr
 8009cf8:	200001bc 	.word	0x200001bc
 8009cfc:	ffff0208 	.word	0xffff0208

08009d00 <__sread>:
 8009d00:	b510      	push	{r4, lr}
 8009d02:	460c      	mov	r4, r1
 8009d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d08:	f000 f908 	bl	8009f1c <_read_r>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	bfab      	itete	ge
 8009d10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009d12:	89a3      	ldrhlt	r3, [r4, #12]
 8009d14:	181b      	addge	r3, r3, r0
 8009d16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009d1a:	bfac      	ite	ge
 8009d1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009d1e:	81a3      	strhlt	r3, [r4, #12]
 8009d20:	bd10      	pop	{r4, pc}

08009d22 <__swrite>:
 8009d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d26:	461f      	mov	r7, r3
 8009d28:	898b      	ldrh	r3, [r1, #12]
 8009d2a:	05db      	lsls	r3, r3, #23
 8009d2c:	4605      	mov	r5, r0
 8009d2e:	460c      	mov	r4, r1
 8009d30:	4616      	mov	r6, r2
 8009d32:	d505      	bpl.n	8009d40 <__swrite+0x1e>
 8009d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d38:	2302      	movs	r3, #2
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f000 f8dc 	bl	8009ef8 <_lseek_r>
 8009d40:	89a3      	ldrh	r3, [r4, #12]
 8009d42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d4a:	81a3      	strh	r3, [r4, #12]
 8009d4c:	4632      	mov	r2, r6
 8009d4e:	463b      	mov	r3, r7
 8009d50:	4628      	mov	r0, r5
 8009d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d56:	f000 b8f3 	b.w	8009f40 <_write_r>

08009d5a <__sseek>:
 8009d5a:	b510      	push	{r4, lr}
 8009d5c:	460c      	mov	r4, r1
 8009d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d62:	f000 f8c9 	bl	8009ef8 <_lseek_r>
 8009d66:	1c43      	adds	r3, r0, #1
 8009d68:	89a3      	ldrh	r3, [r4, #12]
 8009d6a:	bf15      	itete	ne
 8009d6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009d6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009d72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009d76:	81a3      	strheq	r3, [r4, #12]
 8009d78:	bf18      	it	ne
 8009d7a:	81a3      	strhne	r3, [r4, #12]
 8009d7c:	bd10      	pop	{r4, pc}

08009d7e <__sclose>:
 8009d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d82:	f000 b8a9 	b.w	8009ed8 <_close_r>
	...

08009d88 <_vsiprintf_r>:
 8009d88:	b500      	push	{lr}
 8009d8a:	b09b      	sub	sp, #108	@ 0x6c
 8009d8c:	9100      	str	r1, [sp, #0]
 8009d8e:	9104      	str	r1, [sp, #16]
 8009d90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009d94:	9105      	str	r1, [sp, #20]
 8009d96:	9102      	str	r1, [sp, #8]
 8009d98:	4905      	ldr	r1, [pc, #20]	@ (8009db0 <_vsiprintf_r+0x28>)
 8009d9a:	9103      	str	r1, [sp, #12]
 8009d9c:	4669      	mov	r1, sp
 8009d9e:	f002 f981 	bl	800c0a4 <_svfiprintf_r>
 8009da2:	9b00      	ldr	r3, [sp, #0]
 8009da4:	2200      	movs	r2, #0
 8009da6:	701a      	strb	r2, [r3, #0]
 8009da8:	b01b      	add	sp, #108	@ 0x6c
 8009daa:	f85d fb04 	ldr.w	pc, [sp], #4
 8009dae:	bf00      	nop
 8009db0:	ffff0208 	.word	0xffff0208

08009db4 <vsiprintf>:
 8009db4:	4613      	mov	r3, r2
 8009db6:	460a      	mov	r2, r1
 8009db8:	4601      	mov	r1, r0
 8009dba:	4802      	ldr	r0, [pc, #8]	@ (8009dc4 <vsiprintf+0x10>)
 8009dbc:	6800      	ldr	r0, [r0, #0]
 8009dbe:	f7ff bfe3 	b.w	8009d88 <_vsiprintf_r>
 8009dc2:	bf00      	nop
 8009dc4:	200001bc 	.word	0x200001bc

08009dc8 <memset>:
 8009dc8:	4402      	add	r2, r0
 8009dca:	4603      	mov	r3, r0
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d100      	bne.n	8009dd2 <memset+0xa>
 8009dd0:	4770      	bx	lr
 8009dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8009dd6:	e7f9      	b.n	8009dcc <memset+0x4>

08009dd8 <strchr>:
 8009dd8:	b2c9      	uxtb	r1, r1
 8009dda:	4603      	mov	r3, r0
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009de2:	b112      	cbz	r2, 8009dea <strchr+0x12>
 8009de4:	428a      	cmp	r2, r1
 8009de6:	d1f9      	bne.n	8009ddc <strchr+0x4>
 8009de8:	4770      	bx	lr
 8009dea:	2900      	cmp	r1, #0
 8009dec:	bf18      	it	ne
 8009dee:	2000      	movne	r0, #0
 8009df0:	4770      	bx	lr

08009df2 <strncmp>:
 8009df2:	b510      	push	{r4, lr}
 8009df4:	b16a      	cbz	r2, 8009e12 <strncmp+0x20>
 8009df6:	3901      	subs	r1, #1
 8009df8:	1884      	adds	r4, r0, r2
 8009dfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dfe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d103      	bne.n	8009e0e <strncmp+0x1c>
 8009e06:	42a0      	cmp	r0, r4
 8009e08:	d001      	beq.n	8009e0e <strncmp+0x1c>
 8009e0a:	2a00      	cmp	r2, #0
 8009e0c:	d1f5      	bne.n	8009dfa <strncmp+0x8>
 8009e0e:	1ad0      	subs	r0, r2, r3
 8009e10:	bd10      	pop	{r4, pc}
 8009e12:	4610      	mov	r0, r2
 8009e14:	e7fc      	b.n	8009e10 <strncmp+0x1e>
	...

08009e18 <strtok>:
 8009e18:	4b16      	ldr	r3, [pc, #88]	@ (8009e74 <strtok+0x5c>)
 8009e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e1e:	681f      	ldr	r7, [r3, #0]
 8009e20:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009e22:	4605      	mov	r5, r0
 8009e24:	460e      	mov	r6, r1
 8009e26:	b9ec      	cbnz	r4, 8009e64 <strtok+0x4c>
 8009e28:	2050      	movs	r0, #80	@ 0x50
 8009e2a:	f001 fadd 	bl	800b3e8 <malloc>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	6478      	str	r0, [r7, #68]	@ 0x44
 8009e32:	b920      	cbnz	r0, 8009e3e <strtok+0x26>
 8009e34:	4b10      	ldr	r3, [pc, #64]	@ (8009e78 <strtok+0x60>)
 8009e36:	4811      	ldr	r0, [pc, #68]	@ (8009e7c <strtok+0x64>)
 8009e38:	215b      	movs	r1, #91	@ 0x5b
 8009e3a:	f000 f8e7 	bl	800a00c <__assert_func>
 8009e3e:	e9c0 4400 	strd	r4, r4, [r0]
 8009e42:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009e46:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009e4a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009e4e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009e52:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009e56:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009e5a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009e5e:	6184      	str	r4, [r0, #24]
 8009e60:	7704      	strb	r4, [r0, #28]
 8009e62:	6244      	str	r4, [r0, #36]	@ 0x24
 8009e64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e66:	4631      	mov	r1, r6
 8009e68:	4628      	mov	r0, r5
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e70:	f000 b806 	b.w	8009e80 <__strtok_r>
 8009e74:	200001bc 	.word	0x200001bc
 8009e78:	08011f41 	.word	0x08011f41
 8009e7c:	08011f58 	.word	0x08011f58

08009e80 <__strtok_r>:
 8009e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e82:	4604      	mov	r4, r0
 8009e84:	b908      	cbnz	r0, 8009e8a <__strtok_r+0xa>
 8009e86:	6814      	ldr	r4, [r2, #0]
 8009e88:	b144      	cbz	r4, 8009e9c <__strtok_r+0x1c>
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009e90:	460f      	mov	r7, r1
 8009e92:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009e96:	b91e      	cbnz	r6, 8009ea0 <__strtok_r+0x20>
 8009e98:	b965      	cbnz	r5, 8009eb4 <__strtok_r+0x34>
 8009e9a:	6015      	str	r5, [r2, #0]
 8009e9c:	2000      	movs	r0, #0
 8009e9e:	e005      	b.n	8009eac <__strtok_r+0x2c>
 8009ea0:	42b5      	cmp	r5, r6
 8009ea2:	d1f6      	bne.n	8009e92 <__strtok_r+0x12>
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d1f0      	bne.n	8009e8a <__strtok_r+0xa>
 8009ea8:	6014      	str	r4, [r2, #0]
 8009eaa:	7003      	strb	r3, [r0, #0]
 8009eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eae:	461c      	mov	r4, r3
 8009eb0:	e00c      	b.n	8009ecc <__strtok_r+0x4c>
 8009eb2:	b915      	cbnz	r5, 8009eba <__strtok_r+0x3a>
 8009eb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009eb8:	460e      	mov	r6, r1
 8009eba:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009ebe:	42ab      	cmp	r3, r5
 8009ec0:	d1f7      	bne.n	8009eb2 <__strtok_r+0x32>
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d0f3      	beq.n	8009eae <__strtok_r+0x2e>
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009ecc:	6014      	str	r4, [r2, #0]
 8009ece:	e7ed      	b.n	8009eac <__strtok_r+0x2c>

08009ed0 <_localeconv_r>:
 8009ed0:	4800      	ldr	r0, [pc, #0]	@ (8009ed4 <_localeconv_r+0x4>)
 8009ed2:	4770      	bx	lr
 8009ed4:	20000140 	.word	0x20000140

08009ed8 <_close_r>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4d06      	ldr	r5, [pc, #24]	@ (8009ef4 <_close_r+0x1c>)
 8009edc:	2300      	movs	r3, #0
 8009ede:	4604      	mov	r4, r0
 8009ee0:	4608      	mov	r0, r1
 8009ee2:	602b      	str	r3, [r5, #0]
 8009ee4:	f7f8 fe4a 	bl	8002b7c <_close>
 8009ee8:	1c43      	adds	r3, r0, #1
 8009eea:	d102      	bne.n	8009ef2 <_close_r+0x1a>
 8009eec:	682b      	ldr	r3, [r5, #0]
 8009eee:	b103      	cbz	r3, 8009ef2 <_close_r+0x1a>
 8009ef0:	6023      	str	r3, [r4, #0]
 8009ef2:	bd38      	pop	{r3, r4, r5, pc}
 8009ef4:	200028a0 	.word	0x200028a0

08009ef8 <_lseek_r>:
 8009ef8:	b538      	push	{r3, r4, r5, lr}
 8009efa:	4d07      	ldr	r5, [pc, #28]	@ (8009f18 <_lseek_r+0x20>)
 8009efc:	4604      	mov	r4, r0
 8009efe:	4608      	mov	r0, r1
 8009f00:	4611      	mov	r1, r2
 8009f02:	2200      	movs	r2, #0
 8009f04:	602a      	str	r2, [r5, #0]
 8009f06:	461a      	mov	r2, r3
 8009f08:	f7f8 fe42 	bl	8002b90 <_lseek>
 8009f0c:	1c43      	adds	r3, r0, #1
 8009f0e:	d102      	bne.n	8009f16 <_lseek_r+0x1e>
 8009f10:	682b      	ldr	r3, [r5, #0]
 8009f12:	b103      	cbz	r3, 8009f16 <_lseek_r+0x1e>
 8009f14:	6023      	str	r3, [r4, #0]
 8009f16:	bd38      	pop	{r3, r4, r5, pc}
 8009f18:	200028a0 	.word	0x200028a0

08009f1c <_read_r>:
 8009f1c:	b538      	push	{r3, r4, r5, lr}
 8009f1e:	4d07      	ldr	r5, [pc, #28]	@ (8009f3c <_read_r+0x20>)
 8009f20:	4604      	mov	r4, r0
 8009f22:	4608      	mov	r0, r1
 8009f24:	4611      	mov	r1, r2
 8009f26:	2200      	movs	r2, #0
 8009f28:	602a      	str	r2, [r5, #0]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	f7f8 fe08 	bl	8002b40 <_read>
 8009f30:	1c43      	adds	r3, r0, #1
 8009f32:	d102      	bne.n	8009f3a <_read_r+0x1e>
 8009f34:	682b      	ldr	r3, [r5, #0]
 8009f36:	b103      	cbz	r3, 8009f3a <_read_r+0x1e>
 8009f38:	6023      	str	r3, [r4, #0]
 8009f3a:	bd38      	pop	{r3, r4, r5, pc}
 8009f3c:	200028a0 	.word	0x200028a0

08009f40 <_write_r>:
 8009f40:	b538      	push	{r3, r4, r5, lr}
 8009f42:	4d07      	ldr	r5, [pc, #28]	@ (8009f60 <_write_r+0x20>)
 8009f44:	4604      	mov	r4, r0
 8009f46:	4608      	mov	r0, r1
 8009f48:	4611      	mov	r1, r2
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	602a      	str	r2, [r5, #0]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	f7f8 fe06 	bl	8002b60 <_write>
 8009f54:	1c43      	adds	r3, r0, #1
 8009f56:	d102      	bne.n	8009f5e <_write_r+0x1e>
 8009f58:	682b      	ldr	r3, [r5, #0]
 8009f5a:	b103      	cbz	r3, 8009f5e <_write_r+0x1e>
 8009f5c:	6023      	str	r3, [r4, #0]
 8009f5e:	bd38      	pop	{r3, r4, r5, pc}
 8009f60:	200028a0 	.word	0x200028a0

08009f64 <__errno>:
 8009f64:	4b01      	ldr	r3, [pc, #4]	@ (8009f6c <__errno+0x8>)
 8009f66:	6818      	ldr	r0, [r3, #0]
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	200001bc 	.word	0x200001bc

08009f70 <__libc_init_array>:
 8009f70:	b570      	push	{r4, r5, r6, lr}
 8009f72:	4d0d      	ldr	r5, [pc, #52]	@ (8009fa8 <__libc_init_array+0x38>)
 8009f74:	4c0d      	ldr	r4, [pc, #52]	@ (8009fac <__libc_init_array+0x3c>)
 8009f76:	1b64      	subs	r4, r4, r5
 8009f78:	10a4      	asrs	r4, r4, #2
 8009f7a:	2600      	movs	r6, #0
 8009f7c:	42a6      	cmp	r6, r4
 8009f7e:	d109      	bne.n	8009f94 <__libc_init_array+0x24>
 8009f80:	4d0b      	ldr	r5, [pc, #44]	@ (8009fb0 <__libc_init_array+0x40>)
 8009f82:	4c0c      	ldr	r4, [pc, #48]	@ (8009fb4 <__libc_init_array+0x44>)
 8009f84:	f002 fd60 	bl	800ca48 <_init>
 8009f88:	1b64      	subs	r4, r4, r5
 8009f8a:	10a4      	asrs	r4, r4, #2
 8009f8c:	2600      	movs	r6, #0
 8009f8e:	42a6      	cmp	r6, r4
 8009f90:	d105      	bne.n	8009f9e <__libc_init_array+0x2e>
 8009f92:	bd70      	pop	{r4, r5, r6, pc}
 8009f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f98:	4798      	blx	r3
 8009f9a:	3601      	adds	r6, #1
 8009f9c:	e7ee      	b.n	8009f7c <__libc_init_array+0xc>
 8009f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fa2:	4798      	blx	r3
 8009fa4:	3601      	adds	r6, #1
 8009fa6:	e7f2      	b.n	8009f8e <__libc_init_array+0x1e>
 8009fa8:	08012344 	.word	0x08012344
 8009fac:	08012344 	.word	0x08012344
 8009fb0:	08012344 	.word	0x08012344
 8009fb4:	08012348 	.word	0x08012348

08009fb8 <__retarget_lock_init_recursive>:
 8009fb8:	4770      	bx	lr

08009fba <__retarget_lock_acquire_recursive>:
 8009fba:	4770      	bx	lr

08009fbc <__retarget_lock_release_recursive>:
 8009fbc:	4770      	bx	lr

08009fbe <strcpy>:
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fc4:	f803 2b01 	strb.w	r2, [r3], #1
 8009fc8:	2a00      	cmp	r2, #0
 8009fca:	d1f9      	bne.n	8009fc0 <strcpy+0x2>
 8009fcc:	4770      	bx	lr

08009fce <memcpy>:
 8009fce:	440a      	add	r2, r1
 8009fd0:	4291      	cmp	r1, r2
 8009fd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fd6:	d100      	bne.n	8009fda <memcpy+0xc>
 8009fd8:	4770      	bx	lr
 8009fda:	b510      	push	{r4, lr}
 8009fdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fe4:	4291      	cmp	r1, r2
 8009fe6:	d1f9      	bne.n	8009fdc <memcpy+0xe>
 8009fe8:	bd10      	pop	{r4, pc}
 8009fea:	0000      	movs	r0, r0
 8009fec:	0000      	movs	r0, r0
	...

08009ff0 <nan>:
 8009ff0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009ff8 <nan+0x8>
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	00000000 	.word	0x00000000
 8009ffc:	7ff80000 	.word	0x7ff80000

0800a000 <nanf>:
 800a000:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a008 <nanf+0x8>
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	7fc00000 	.word	0x7fc00000

0800a00c <__assert_func>:
 800a00c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a00e:	4614      	mov	r4, r2
 800a010:	461a      	mov	r2, r3
 800a012:	4b09      	ldr	r3, [pc, #36]	@ (800a038 <__assert_func+0x2c>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4605      	mov	r5, r0
 800a018:	68d8      	ldr	r0, [r3, #12]
 800a01a:	b954      	cbnz	r4, 800a032 <__assert_func+0x26>
 800a01c:	4b07      	ldr	r3, [pc, #28]	@ (800a03c <__assert_func+0x30>)
 800a01e:	461c      	mov	r4, r3
 800a020:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a024:	9100      	str	r1, [sp, #0]
 800a026:	462b      	mov	r3, r5
 800a028:	4905      	ldr	r1, [pc, #20]	@ (800a040 <__assert_func+0x34>)
 800a02a:	f002 f9e3 	bl	800c3f4 <fiprintf>
 800a02e:	f002 fa1d 	bl	800c46c <abort>
 800a032:	4b04      	ldr	r3, [pc, #16]	@ (800a044 <__assert_func+0x38>)
 800a034:	e7f4      	b.n	800a020 <__assert_func+0x14>
 800a036:	bf00      	nop
 800a038:	200001bc 	.word	0x200001bc
 800a03c:	08011ff5 	.word	0x08011ff5
 800a040:	08011fc7 	.word	0x08011fc7
 800a044:	08011fba 	.word	0x08011fba

0800a048 <quorem>:
 800a048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04c:	6903      	ldr	r3, [r0, #16]
 800a04e:	690c      	ldr	r4, [r1, #16]
 800a050:	42a3      	cmp	r3, r4
 800a052:	4607      	mov	r7, r0
 800a054:	db7e      	blt.n	800a154 <quorem+0x10c>
 800a056:	3c01      	subs	r4, #1
 800a058:	f101 0814 	add.w	r8, r1, #20
 800a05c:	00a3      	lsls	r3, r4, #2
 800a05e:	f100 0514 	add.w	r5, r0, #20
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a068:	9301      	str	r3, [sp, #4]
 800a06a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a06e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a072:	3301      	adds	r3, #1
 800a074:	429a      	cmp	r2, r3
 800a076:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a07a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a07e:	d32e      	bcc.n	800a0de <quorem+0x96>
 800a080:	f04f 0a00 	mov.w	sl, #0
 800a084:	46c4      	mov	ip, r8
 800a086:	46ae      	mov	lr, r5
 800a088:	46d3      	mov	fp, sl
 800a08a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a08e:	b298      	uxth	r0, r3
 800a090:	fb06 a000 	mla	r0, r6, r0, sl
 800a094:	0c02      	lsrs	r2, r0, #16
 800a096:	0c1b      	lsrs	r3, r3, #16
 800a098:	fb06 2303 	mla	r3, r6, r3, r2
 800a09c:	f8de 2000 	ldr.w	r2, [lr]
 800a0a0:	b280      	uxth	r0, r0
 800a0a2:	b292      	uxth	r2, r2
 800a0a4:	1a12      	subs	r2, r2, r0
 800a0a6:	445a      	add	r2, fp
 800a0a8:	f8de 0000 	ldr.w	r0, [lr]
 800a0ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a0b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a0ba:	b292      	uxth	r2, r2
 800a0bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a0c0:	45e1      	cmp	r9, ip
 800a0c2:	f84e 2b04 	str.w	r2, [lr], #4
 800a0c6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a0ca:	d2de      	bcs.n	800a08a <quorem+0x42>
 800a0cc:	9b00      	ldr	r3, [sp, #0]
 800a0ce:	58eb      	ldr	r3, [r5, r3]
 800a0d0:	b92b      	cbnz	r3, 800a0de <quorem+0x96>
 800a0d2:	9b01      	ldr	r3, [sp, #4]
 800a0d4:	3b04      	subs	r3, #4
 800a0d6:	429d      	cmp	r5, r3
 800a0d8:	461a      	mov	r2, r3
 800a0da:	d32f      	bcc.n	800a13c <quorem+0xf4>
 800a0dc:	613c      	str	r4, [r7, #16]
 800a0de:	4638      	mov	r0, r7
 800a0e0:	f001 fd0e 	bl	800bb00 <__mcmp>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	db25      	blt.n	800a134 <quorem+0xec>
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	f858 2b04 	ldr.w	r2, [r8], #4
 800a0f0:	f8d1 c000 	ldr.w	ip, [r1]
 800a0f4:	fa1f fe82 	uxth.w	lr, r2
 800a0f8:	fa1f f38c 	uxth.w	r3, ip
 800a0fc:	eba3 030e 	sub.w	r3, r3, lr
 800a100:	4403      	add	r3, r0
 800a102:	0c12      	lsrs	r2, r2, #16
 800a104:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a108:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a112:	45c1      	cmp	r9, r8
 800a114:	f841 3b04 	str.w	r3, [r1], #4
 800a118:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a11c:	d2e6      	bcs.n	800a0ec <quorem+0xa4>
 800a11e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a126:	b922      	cbnz	r2, 800a132 <quorem+0xea>
 800a128:	3b04      	subs	r3, #4
 800a12a:	429d      	cmp	r5, r3
 800a12c:	461a      	mov	r2, r3
 800a12e:	d30b      	bcc.n	800a148 <quorem+0x100>
 800a130:	613c      	str	r4, [r7, #16]
 800a132:	3601      	adds	r6, #1
 800a134:	4630      	mov	r0, r6
 800a136:	b003      	add	sp, #12
 800a138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a13c:	6812      	ldr	r2, [r2, #0]
 800a13e:	3b04      	subs	r3, #4
 800a140:	2a00      	cmp	r2, #0
 800a142:	d1cb      	bne.n	800a0dc <quorem+0x94>
 800a144:	3c01      	subs	r4, #1
 800a146:	e7c6      	b.n	800a0d6 <quorem+0x8e>
 800a148:	6812      	ldr	r2, [r2, #0]
 800a14a:	3b04      	subs	r3, #4
 800a14c:	2a00      	cmp	r2, #0
 800a14e:	d1ef      	bne.n	800a130 <quorem+0xe8>
 800a150:	3c01      	subs	r4, #1
 800a152:	e7ea      	b.n	800a12a <quorem+0xe2>
 800a154:	2000      	movs	r0, #0
 800a156:	e7ee      	b.n	800a136 <quorem+0xee>

0800a158 <_dtoa_r>:
 800a158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15c:	69c7      	ldr	r7, [r0, #28]
 800a15e:	b099      	sub	sp, #100	@ 0x64
 800a160:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a164:	ec55 4b10 	vmov	r4, r5, d0
 800a168:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a16a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a16c:	4683      	mov	fp, r0
 800a16e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a170:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a172:	b97f      	cbnz	r7, 800a194 <_dtoa_r+0x3c>
 800a174:	2010      	movs	r0, #16
 800a176:	f001 f937 	bl	800b3e8 <malloc>
 800a17a:	4602      	mov	r2, r0
 800a17c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a180:	b920      	cbnz	r0, 800a18c <_dtoa_r+0x34>
 800a182:	4ba7      	ldr	r3, [pc, #668]	@ (800a420 <_dtoa_r+0x2c8>)
 800a184:	21ef      	movs	r1, #239	@ 0xef
 800a186:	48a7      	ldr	r0, [pc, #668]	@ (800a424 <_dtoa_r+0x2cc>)
 800a188:	f7ff ff40 	bl	800a00c <__assert_func>
 800a18c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a190:	6007      	str	r7, [r0, #0]
 800a192:	60c7      	str	r7, [r0, #12]
 800a194:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a198:	6819      	ldr	r1, [r3, #0]
 800a19a:	b159      	cbz	r1, 800a1b4 <_dtoa_r+0x5c>
 800a19c:	685a      	ldr	r2, [r3, #4]
 800a19e:	604a      	str	r2, [r1, #4]
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	4093      	lsls	r3, r2
 800a1a4:	608b      	str	r3, [r1, #8]
 800a1a6:	4658      	mov	r0, fp
 800a1a8:	f001 fa26 	bl	800b5f8 <_Bfree>
 800a1ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	601a      	str	r2, [r3, #0]
 800a1b4:	1e2b      	subs	r3, r5, #0
 800a1b6:	bfb9      	ittee	lt
 800a1b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a1bc:	9303      	strlt	r3, [sp, #12]
 800a1be:	2300      	movge	r3, #0
 800a1c0:	6033      	strge	r3, [r6, #0]
 800a1c2:	9f03      	ldr	r7, [sp, #12]
 800a1c4:	4b98      	ldr	r3, [pc, #608]	@ (800a428 <_dtoa_r+0x2d0>)
 800a1c6:	bfbc      	itt	lt
 800a1c8:	2201      	movlt	r2, #1
 800a1ca:	6032      	strlt	r2, [r6, #0]
 800a1cc:	43bb      	bics	r3, r7
 800a1ce:	d112      	bne.n	800a1f6 <_dtoa_r+0x9e>
 800a1d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a1d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a1d6:	6013      	str	r3, [r2, #0]
 800a1d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a1dc:	4323      	orrs	r3, r4
 800a1de:	f000 854d 	beq.w	800ac7c <_dtoa_r+0xb24>
 800a1e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a1e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a43c <_dtoa_r+0x2e4>
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f000 854f 	beq.w	800ac8c <_dtoa_r+0xb34>
 800a1ee:	f10a 0303 	add.w	r3, sl, #3
 800a1f2:	f000 bd49 	b.w	800ac88 <_dtoa_r+0xb30>
 800a1f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	ec51 0b17 	vmov	r0, r1, d7
 800a200:	2300      	movs	r3, #0
 800a202:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a206:	f7f6 fc5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a20a:	4680      	mov	r8, r0
 800a20c:	b158      	cbz	r0, 800a226 <_dtoa_r+0xce>
 800a20e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a210:	2301      	movs	r3, #1
 800a212:	6013      	str	r3, [r2, #0]
 800a214:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a216:	b113      	cbz	r3, 800a21e <_dtoa_r+0xc6>
 800a218:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a21a:	4b84      	ldr	r3, [pc, #528]	@ (800a42c <_dtoa_r+0x2d4>)
 800a21c:	6013      	str	r3, [r2, #0]
 800a21e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a440 <_dtoa_r+0x2e8>
 800a222:	f000 bd33 	b.w	800ac8c <_dtoa_r+0xb34>
 800a226:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a22a:	aa16      	add	r2, sp, #88	@ 0x58
 800a22c:	a917      	add	r1, sp, #92	@ 0x5c
 800a22e:	4658      	mov	r0, fp
 800a230:	f001 fd86 	bl	800bd40 <__d2b>
 800a234:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a238:	4681      	mov	r9, r0
 800a23a:	2e00      	cmp	r6, #0
 800a23c:	d077      	beq.n	800a32e <_dtoa_r+0x1d6>
 800a23e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a240:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a248:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a24c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a250:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a254:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a258:	4619      	mov	r1, r3
 800a25a:	2200      	movs	r2, #0
 800a25c:	4b74      	ldr	r3, [pc, #464]	@ (800a430 <_dtoa_r+0x2d8>)
 800a25e:	f7f6 f813 	bl	8000288 <__aeabi_dsub>
 800a262:	a369      	add	r3, pc, #420	@ (adr r3, 800a408 <_dtoa_r+0x2b0>)
 800a264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a268:	f7f6 f9c6 	bl	80005f8 <__aeabi_dmul>
 800a26c:	a368      	add	r3, pc, #416	@ (adr r3, 800a410 <_dtoa_r+0x2b8>)
 800a26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a272:	f7f6 f80b 	bl	800028c <__adddf3>
 800a276:	4604      	mov	r4, r0
 800a278:	4630      	mov	r0, r6
 800a27a:	460d      	mov	r5, r1
 800a27c:	f7f6 f952 	bl	8000524 <__aeabi_i2d>
 800a280:	a365      	add	r3, pc, #404	@ (adr r3, 800a418 <_dtoa_r+0x2c0>)
 800a282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a286:	f7f6 f9b7 	bl	80005f8 <__aeabi_dmul>
 800a28a:	4602      	mov	r2, r0
 800a28c:	460b      	mov	r3, r1
 800a28e:	4620      	mov	r0, r4
 800a290:	4629      	mov	r1, r5
 800a292:	f7f5 fffb 	bl	800028c <__adddf3>
 800a296:	4604      	mov	r4, r0
 800a298:	460d      	mov	r5, r1
 800a29a:	f7f6 fc5d 	bl	8000b58 <__aeabi_d2iz>
 800a29e:	2200      	movs	r2, #0
 800a2a0:	4607      	mov	r7, r0
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	4629      	mov	r1, r5
 800a2a8:	f7f6 fc18 	bl	8000adc <__aeabi_dcmplt>
 800a2ac:	b140      	cbz	r0, 800a2c0 <_dtoa_r+0x168>
 800a2ae:	4638      	mov	r0, r7
 800a2b0:	f7f6 f938 	bl	8000524 <__aeabi_i2d>
 800a2b4:	4622      	mov	r2, r4
 800a2b6:	462b      	mov	r3, r5
 800a2b8:	f7f6 fc06 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2bc:	b900      	cbnz	r0, 800a2c0 <_dtoa_r+0x168>
 800a2be:	3f01      	subs	r7, #1
 800a2c0:	2f16      	cmp	r7, #22
 800a2c2:	d851      	bhi.n	800a368 <_dtoa_r+0x210>
 800a2c4:	4b5b      	ldr	r3, [pc, #364]	@ (800a434 <_dtoa_r+0x2dc>)
 800a2c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2d2:	f7f6 fc03 	bl	8000adc <__aeabi_dcmplt>
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	d048      	beq.n	800a36c <_dtoa_r+0x214>
 800a2da:	3f01      	subs	r7, #1
 800a2dc:	2300      	movs	r3, #0
 800a2de:	9312      	str	r3, [sp, #72]	@ 0x48
 800a2e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a2e2:	1b9b      	subs	r3, r3, r6
 800a2e4:	1e5a      	subs	r2, r3, #1
 800a2e6:	bf44      	itt	mi
 800a2e8:	f1c3 0801 	rsbmi	r8, r3, #1
 800a2ec:	2300      	movmi	r3, #0
 800a2ee:	9208      	str	r2, [sp, #32]
 800a2f0:	bf54      	ite	pl
 800a2f2:	f04f 0800 	movpl.w	r8, #0
 800a2f6:	9308      	strmi	r3, [sp, #32]
 800a2f8:	2f00      	cmp	r7, #0
 800a2fa:	db39      	blt.n	800a370 <_dtoa_r+0x218>
 800a2fc:	9b08      	ldr	r3, [sp, #32]
 800a2fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a300:	443b      	add	r3, r7
 800a302:	9308      	str	r3, [sp, #32]
 800a304:	2300      	movs	r3, #0
 800a306:	930a      	str	r3, [sp, #40]	@ 0x28
 800a308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a30a:	2b09      	cmp	r3, #9
 800a30c:	d864      	bhi.n	800a3d8 <_dtoa_r+0x280>
 800a30e:	2b05      	cmp	r3, #5
 800a310:	bfc4      	itt	gt
 800a312:	3b04      	subgt	r3, #4
 800a314:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a318:	f1a3 0302 	sub.w	r3, r3, #2
 800a31c:	bfcc      	ite	gt
 800a31e:	2400      	movgt	r4, #0
 800a320:	2401      	movle	r4, #1
 800a322:	2b03      	cmp	r3, #3
 800a324:	d863      	bhi.n	800a3ee <_dtoa_r+0x296>
 800a326:	e8df f003 	tbb	[pc, r3]
 800a32a:	372a      	.short	0x372a
 800a32c:	5535      	.short	0x5535
 800a32e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a332:	441e      	add	r6, r3
 800a334:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a338:	2b20      	cmp	r3, #32
 800a33a:	bfc1      	itttt	gt
 800a33c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a340:	409f      	lslgt	r7, r3
 800a342:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a346:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a34a:	bfd6      	itet	le
 800a34c:	f1c3 0320 	rsble	r3, r3, #32
 800a350:	ea47 0003 	orrgt.w	r0, r7, r3
 800a354:	fa04 f003 	lslle.w	r0, r4, r3
 800a358:	f7f6 f8d4 	bl	8000504 <__aeabi_ui2d>
 800a35c:	2201      	movs	r2, #1
 800a35e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a362:	3e01      	subs	r6, #1
 800a364:	9214      	str	r2, [sp, #80]	@ 0x50
 800a366:	e777      	b.n	800a258 <_dtoa_r+0x100>
 800a368:	2301      	movs	r3, #1
 800a36a:	e7b8      	b.n	800a2de <_dtoa_r+0x186>
 800a36c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a36e:	e7b7      	b.n	800a2e0 <_dtoa_r+0x188>
 800a370:	427b      	negs	r3, r7
 800a372:	930a      	str	r3, [sp, #40]	@ 0x28
 800a374:	2300      	movs	r3, #0
 800a376:	eba8 0807 	sub.w	r8, r8, r7
 800a37a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a37c:	e7c4      	b.n	800a308 <_dtoa_r+0x1b0>
 800a37e:	2300      	movs	r3, #0
 800a380:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a384:	2b00      	cmp	r3, #0
 800a386:	dc35      	bgt.n	800a3f4 <_dtoa_r+0x29c>
 800a388:	2301      	movs	r3, #1
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	9307      	str	r3, [sp, #28]
 800a38e:	461a      	mov	r2, r3
 800a390:	920e      	str	r2, [sp, #56]	@ 0x38
 800a392:	e00b      	b.n	800a3ac <_dtoa_r+0x254>
 800a394:	2301      	movs	r3, #1
 800a396:	e7f3      	b.n	800a380 <_dtoa_r+0x228>
 800a398:	2300      	movs	r3, #0
 800a39a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a39c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a39e:	18fb      	adds	r3, r7, r3
 800a3a0:	9300      	str	r3, [sp, #0]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	9307      	str	r3, [sp, #28]
 800a3a8:	bfb8      	it	lt
 800a3aa:	2301      	movlt	r3, #1
 800a3ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	2204      	movs	r2, #4
 800a3b4:	f102 0514 	add.w	r5, r2, #20
 800a3b8:	429d      	cmp	r5, r3
 800a3ba:	d91f      	bls.n	800a3fc <_dtoa_r+0x2a4>
 800a3bc:	6041      	str	r1, [r0, #4]
 800a3be:	4658      	mov	r0, fp
 800a3c0:	f001 f8da 	bl	800b578 <_Balloc>
 800a3c4:	4682      	mov	sl, r0
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	d13c      	bne.n	800a444 <_dtoa_r+0x2ec>
 800a3ca:	4b1b      	ldr	r3, [pc, #108]	@ (800a438 <_dtoa_r+0x2e0>)
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800a3d2:	e6d8      	b.n	800a186 <_dtoa_r+0x2e>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e7e0      	b.n	800a39a <_dtoa_r+0x242>
 800a3d8:	2401      	movs	r4, #1
 800a3da:	2300      	movs	r3, #0
 800a3dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3de:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a3e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	9307      	str	r3, [sp, #28]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	2312      	movs	r3, #18
 800a3ec:	e7d0      	b.n	800a390 <_dtoa_r+0x238>
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3f2:	e7f5      	b.n	800a3e0 <_dtoa_r+0x288>
 800a3f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	9307      	str	r3, [sp, #28]
 800a3fa:	e7d7      	b.n	800a3ac <_dtoa_r+0x254>
 800a3fc:	3101      	adds	r1, #1
 800a3fe:	0052      	lsls	r2, r2, #1
 800a400:	e7d8      	b.n	800a3b4 <_dtoa_r+0x25c>
 800a402:	bf00      	nop
 800a404:	f3af 8000 	nop.w
 800a408:	636f4361 	.word	0x636f4361
 800a40c:	3fd287a7 	.word	0x3fd287a7
 800a410:	8b60c8b3 	.word	0x8b60c8b3
 800a414:	3fc68a28 	.word	0x3fc68a28
 800a418:	509f79fb 	.word	0x509f79fb
 800a41c:	3fd34413 	.word	0x3fd34413
 800a420:	08011f41 	.word	0x08011f41
 800a424:	08012003 	.word	0x08012003
 800a428:	7ff00000 	.word	0x7ff00000
 800a42c:	08011f19 	.word	0x08011f19
 800a430:	3ff80000 	.word	0x3ff80000
 800a434:	08012160 	.word	0x08012160
 800a438:	0801205b 	.word	0x0801205b
 800a43c:	08011fff 	.word	0x08011fff
 800a440:	08011f18 	.word	0x08011f18
 800a444:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a448:	6018      	str	r0, [r3, #0]
 800a44a:	9b07      	ldr	r3, [sp, #28]
 800a44c:	2b0e      	cmp	r3, #14
 800a44e:	f200 80a4 	bhi.w	800a59a <_dtoa_r+0x442>
 800a452:	2c00      	cmp	r4, #0
 800a454:	f000 80a1 	beq.w	800a59a <_dtoa_r+0x442>
 800a458:	2f00      	cmp	r7, #0
 800a45a:	dd33      	ble.n	800a4c4 <_dtoa_r+0x36c>
 800a45c:	4bad      	ldr	r3, [pc, #692]	@ (800a714 <_dtoa_r+0x5bc>)
 800a45e:	f007 020f 	and.w	r2, r7, #15
 800a462:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a466:	ed93 7b00 	vldr	d7, [r3]
 800a46a:	05f8      	lsls	r0, r7, #23
 800a46c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a470:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a474:	d516      	bpl.n	800a4a4 <_dtoa_r+0x34c>
 800a476:	4ba8      	ldr	r3, [pc, #672]	@ (800a718 <_dtoa_r+0x5c0>)
 800a478:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a47c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a480:	f7f6 f9e4 	bl	800084c <__aeabi_ddiv>
 800a484:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a488:	f004 040f 	and.w	r4, r4, #15
 800a48c:	2603      	movs	r6, #3
 800a48e:	4da2      	ldr	r5, [pc, #648]	@ (800a718 <_dtoa_r+0x5c0>)
 800a490:	b954      	cbnz	r4, 800a4a8 <_dtoa_r+0x350>
 800a492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a49a:	f7f6 f9d7 	bl	800084c <__aeabi_ddiv>
 800a49e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4a2:	e028      	b.n	800a4f6 <_dtoa_r+0x39e>
 800a4a4:	2602      	movs	r6, #2
 800a4a6:	e7f2      	b.n	800a48e <_dtoa_r+0x336>
 800a4a8:	07e1      	lsls	r1, r4, #31
 800a4aa:	d508      	bpl.n	800a4be <_dtoa_r+0x366>
 800a4ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a4b4:	f7f6 f8a0 	bl	80005f8 <__aeabi_dmul>
 800a4b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4bc:	3601      	adds	r6, #1
 800a4be:	1064      	asrs	r4, r4, #1
 800a4c0:	3508      	adds	r5, #8
 800a4c2:	e7e5      	b.n	800a490 <_dtoa_r+0x338>
 800a4c4:	f000 80d2 	beq.w	800a66c <_dtoa_r+0x514>
 800a4c8:	427c      	negs	r4, r7
 800a4ca:	4b92      	ldr	r3, [pc, #584]	@ (800a714 <_dtoa_r+0x5bc>)
 800a4cc:	4d92      	ldr	r5, [pc, #584]	@ (800a718 <_dtoa_r+0x5c0>)
 800a4ce:	f004 020f 	and.w	r2, r4, #15
 800a4d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4de:	f7f6 f88b 	bl	80005f8 <__aeabi_dmul>
 800a4e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4e6:	1124      	asrs	r4, r4, #4
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	2602      	movs	r6, #2
 800a4ec:	2c00      	cmp	r4, #0
 800a4ee:	f040 80b2 	bne.w	800a656 <_dtoa_r+0x4fe>
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1d3      	bne.n	800a49e <_dtoa_r+0x346>
 800a4f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a4f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f000 80b7 	beq.w	800a670 <_dtoa_r+0x518>
 800a502:	4b86      	ldr	r3, [pc, #536]	@ (800a71c <_dtoa_r+0x5c4>)
 800a504:	2200      	movs	r2, #0
 800a506:	4620      	mov	r0, r4
 800a508:	4629      	mov	r1, r5
 800a50a:	f7f6 fae7 	bl	8000adc <__aeabi_dcmplt>
 800a50e:	2800      	cmp	r0, #0
 800a510:	f000 80ae 	beq.w	800a670 <_dtoa_r+0x518>
 800a514:	9b07      	ldr	r3, [sp, #28]
 800a516:	2b00      	cmp	r3, #0
 800a518:	f000 80aa 	beq.w	800a670 <_dtoa_r+0x518>
 800a51c:	9b00      	ldr	r3, [sp, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	dd37      	ble.n	800a592 <_dtoa_r+0x43a>
 800a522:	1e7b      	subs	r3, r7, #1
 800a524:	9304      	str	r3, [sp, #16]
 800a526:	4620      	mov	r0, r4
 800a528:	4b7d      	ldr	r3, [pc, #500]	@ (800a720 <_dtoa_r+0x5c8>)
 800a52a:	2200      	movs	r2, #0
 800a52c:	4629      	mov	r1, r5
 800a52e:	f7f6 f863 	bl	80005f8 <__aeabi_dmul>
 800a532:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a536:	9c00      	ldr	r4, [sp, #0]
 800a538:	3601      	adds	r6, #1
 800a53a:	4630      	mov	r0, r6
 800a53c:	f7f5 fff2 	bl	8000524 <__aeabi_i2d>
 800a540:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a544:	f7f6 f858 	bl	80005f8 <__aeabi_dmul>
 800a548:	4b76      	ldr	r3, [pc, #472]	@ (800a724 <_dtoa_r+0x5cc>)
 800a54a:	2200      	movs	r2, #0
 800a54c:	f7f5 fe9e 	bl	800028c <__adddf3>
 800a550:	4605      	mov	r5, r0
 800a552:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a556:	2c00      	cmp	r4, #0
 800a558:	f040 808d 	bne.w	800a676 <_dtoa_r+0x51e>
 800a55c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a560:	4b71      	ldr	r3, [pc, #452]	@ (800a728 <_dtoa_r+0x5d0>)
 800a562:	2200      	movs	r2, #0
 800a564:	f7f5 fe90 	bl	8000288 <__aeabi_dsub>
 800a568:	4602      	mov	r2, r0
 800a56a:	460b      	mov	r3, r1
 800a56c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a570:	462a      	mov	r2, r5
 800a572:	4633      	mov	r3, r6
 800a574:	f7f6 fad0 	bl	8000b18 <__aeabi_dcmpgt>
 800a578:	2800      	cmp	r0, #0
 800a57a:	f040 828b 	bne.w	800aa94 <_dtoa_r+0x93c>
 800a57e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a582:	462a      	mov	r2, r5
 800a584:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a588:	f7f6 faa8 	bl	8000adc <__aeabi_dcmplt>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	f040 8128 	bne.w	800a7e2 <_dtoa_r+0x68a>
 800a592:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a596:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a59a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f2c0 815a 	blt.w	800a856 <_dtoa_r+0x6fe>
 800a5a2:	2f0e      	cmp	r7, #14
 800a5a4:	f300 8157 	bgt.w	800a856 <_dtoa_r+0x6fe>
 800a5a8:	4b5a      	ldr	r3, [pc, #360]	@ (800a714 <_dtoa_r+0x5bc>)
 800a5aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a5ae:	ed93 7b00 	vldr	d7, [r3]
 800a5b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	ed8d 7b00 	vstr	d7, [sp]
 800a5ba:	da03      	bge.n	800a5c4 <_dtoa_r+0x46c>
 800a5bc:	9b07      	ldr	r3, [sp, #28]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	f340 8101 	ble.w	800a7c6 <_dtoa_r+0x66e>
 800a5c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a5c8:	4656      	mov	r6, sl
 800a5ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	f7f6 f93b 	bl	800084c <__aeabi_ddiv>
 800a5d6:	f7f6 fabf 	bl	8000b58 <__aeabi_d2iz>
 800a5da:	4680      	mov	r8, r0
 800a5dc:	f7f5 ffa2 	bl	8000524 <__aeabi_i2d>
 800a5e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5e4:	f7f6 f808 	bl	80005f8 <__aeabi_dmul>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	4629      	mov	r1, r5
 800a5f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a5f4:	f7f5 fe48 	bl	8000288 <__aeabi_dsub>
 800a5f8:	f806 4b01 	strb.w	r4, [r6], #1
 800a5fc:	9d07      	ldr	r5, [sp, #28]
 800a5fe:	eba6 040a 	sub.w	r4, r6, sl
 800a602:	42a5      	cmp	r5, r4
 800a604:	4602      	mov	r2, r0
 800a606:	460b      	mov	r3, r1
 800a608:	f040 8117 	bne.w	800a83a <_dtoa_r+0x6e2>
 800a60c:	f7f5 fe3e 	bl	800028c <__adddf3>
 800a610:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a614:	4604      	mov	r4, r0
 800a616:	460d      	mov	r5, r1
 800a618:	f7f6 fa7e 	bl	8000b18 <__aeabi_dcmpgt>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	f040 80f9 	bne.w	800a814 <_dtoa_r+0x6bc>
 800a622:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a626:	4620      	mov	r0, r4
 800a628:	4629      	mov	r1, r5
 800a62a:	f7f6 fa4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a62e:	b118      	cbz	r0, 800a638 <_dtoa_r+0x4e0>
 800a630:	f018 0f01 	tst.w	r8, #1
 800a634:	f040 80ee 	bne.w	800a814 <_dtoa_r+0x6bc>
 800a638:	4649      	mov	r1, r9
 800a63a:	4658      	mov	r0, fp
 800a63c:	f000 ffdc 	bl	800b5f8 <_Bfree>
 800a640:	2300      	movs	r3, #0
 800a642:	7033      	strb	r3, [r6, #0]
 800a644:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a646:	3701      	adds	r7, #1
 800a648:	601f      	str	r7, [r3, #0]
 800a64a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f000 831d 	beq.w	800ac8c <_dtoa_r+0xb34>
 800a652:	601e      	str	r6, [r3, #0]
 800a654:	e31a      	b.n	800ac8c <_dtoa_r+0xb34>
 800a656:	07e2      	lsls	r2, r4, #31
 800a658:	d505      	bpl.n	800a666 <_dtoa_r+0x50e>
 800a65a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a65e:	f7f5 ffcb 	bl	80005f8 <__aeabi_dmul>
 800a662:	3601      	adds	r6, #1
 800a664:	2301      	movs	r3, #1
 800a666:	1064      	asrs	r4, r4, #1
 800a668:	3508      	adds	r5, #8
 800a66a:	e73f      	b.n	800a4ec <_dtoa_r+0x394>
 800a66c:	2602      	movs	r6, #2
 800a66e:	e742      	b.n	800a4f6 <_dtoa_r+0x39e>
 800a670:	9c07      	ldr	r4, [sp, #28]
 800a672:	9704      	str	r7, [sp, #16]
 800a674:	e761      	b.n	800a53a <_dtoa_r+0x3e2>
 800a676:	4b27      	ldr	r3, [pc, #156]	@ (800a714 <_dtoa_r+0x5bc>)
 800a678:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a67a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a67e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a682:	4454      	add	r4, sl
 800a684:	2900      	cmp	r1, #0
 800a686:	d053      	beq.n	800a730 <_dtoa_r+0x5d8>
 800a688:	4928      	ldr	r1, [pc, #160]	@ (800a72c <_dtoa_r+0x5d4>)
 800a68a:	2000      	movs	r0, #0
 800a68c:	f7f6 f8de 	bl	800084c <__aeabi_ddiv>
 800a690:	4633      	mov	r3, r6
 800a692:	462a      	mov	r2, r5
 800a694:	f7f5 fdf8 	bl	8000288 <__aeabi_dsub>
 800a698:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a69c:	4656      	mov	r6, sl
 800a69e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6a2:	f7f6 fa59 	bl	8000b58 <__aeabi_d2iz>
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	f7f5 ff3c 	bl	8000524 <__aeabi_i2d>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6b4:	f7f5 fde8 	bl	8000288 <__aeabi_dsub>
 800a6b8:	3530      	adds	r5, #48	@ 0x30
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	460b      	mov	r3, r1
 800a6be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6c2:	f806 5b01 	strb.w	r5, [r6], #1
 800a6c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a6ca:	f7f6 fa07 	bl	8000adc <__aeabi_dcmplt>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	d171      	bne.n	800a7b6 <_dtoa_r+0x65e>
 800a6d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6d6:	4911      	ldr	r1, [pc, #68]	@ (800a71c <_dtoa_r+0x5c4>)
 800a6d8:	2000      	movs	r0, #0
 800a6da:	f7f5 fdd5 	bl	8000288 <__aeabi_dsub>
 800a6de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a6e2:	f7f6 f9fb 	bl	8000adc <__aeabi_dcmplt>
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	f040 8095 	bne.w	800a816 <_dtoa_r+0x6be>
 800a6ec:	42a6      	cmp	r6, r4
 800a6ee:	f43f af50 	beq.w	800a592 <_dtoa_r+0x43a>
 800a6f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a6f6:	4b0a      	ldr	r3, [pc, #40]	@ (800a720 <_dtoa_r+0x5c8>)
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f7f5 ff7d 	bl	80005f8 <__aeabi_dmul>
 800a6fe:	4b08      	ldr	r3, [pc, #32]	@ (800a720 <_dtoa_r+0x5c8>)
 800a700:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a704:	2200      	movs	r2, #0
 800a706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a70a:	f7f5 ff75 	bl	80005f8 <__aeabi_dmul>
 800a70e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a712:	e7c4      	b.n	800a69e <_dtoa_r+0x546>
 800a714:	08012160 	.word	0x08012160
 800a718:	08012138 	.word	0x08012138
 800a71c:	3ff00000 	.word	0x3ff00000
 800a720:	40240000 	.word	0x40240000
 800a724:	401c0000 	.word	0x401c0000
 800a728:	40140000 	.word	0x40140000
 800a72c:	3fe00000 	.word	0x3fe00000
 800a730:	4631      	mov	r1, r6
 800a732:	4628      	mov	r0, r5
 800a734:	f7f5 ff60 	bl	80005f8 <__aeabi_dmul>
 800a738:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a73c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a73e:	4656      	mov	r6, sl
 800a740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a744:	f7f6 fa08 	bl	8000b58 <__aeabi_d2iz>
 800a748:	4605      	mov	r5, r0
 800a74a:	f7f5 feeb 	bl	8000524 <__aeabi_i2d>
 800a74e:	4602      	mov	r2, r0
 800a750:	460b      	mov	r3, r1
 800a752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a756:	f7f5 fd97 	bl	8000288 <__aeabi_dsub>
 800a75a:	3530      	adds	r5, #48	@ 0x30
 800a75c:	f806 5b01 	strb.w	r5, [r6], #1
 800a760:	4602      	mov	r2, r0
 800a762:	460b      	mov	r3, r1
 800a764:	42a6      	cmp	r6, r4
 800a766:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a76a:	f04f 0200 	mov.w	r2, #0
 800a76e:	d124      	bne.n	800a7ba <_dtoa_r+0x662>
 800a770:	4bac      	ldr	r3, [pc, #688]	@ (800aa24 <_dtoa_r+0x8cc>)
 800a772:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a776:	f7f5 fd89 	bl	800028c <__adddf3>
 800a77a:	4602      	mov	r2, r0
 800a77c:	460b      	mov	r3, r1
 800a77e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a782:	f7f6 f9c9 	bl	8000b18 <__aeabi_dcmpgt>
 800a786:	2800      	cmp	r0, #0
 800a788:	d145      	bne.n	800a816 <_dtoa_r+0x6be>
 800a78a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a78e:	49a5      	ldr	r1, [pc, #660]	@ (800aa24 <_dtoa_r+0x8cc>)
 800a790:	2000      	movs	r0, #0
 800a792:	f7f5 fd79 	bl	8000288 <__aeabi_dsub>
 800a796:	4602      	mov	r2, r0
 800a798:	460b      	mov	r3, r1
 800a79a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a79e:	f7f6 f99d 	bl	8000adc <__aeabi_dcmplt>
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	f43f aef5 	beq.w	800a592 <_dtoa_r+0x43a>
 800a7a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a7aa:	1e73      	subs	r3, r6, #1
 800a7ac:	9315      	str	r3, [sp, #84]	@ 0x54
 800a7ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a7b2:	2b30      	cmp	r3, #48	@ 0x30
 800a7b4:	d0f8      	beq.n	800a7a8 <_dtoa_r+0x650>
 800a7b6:	9f04      	ldr	r7, [sp, #16]
 800a7b8:	e73e      	b.n	800a638 <_dtoa_r+0x4e0>
 800a7ba:	4b9b      	ldr	r3, [pc, #620]	@ (800aa28 <_dtoa_r+0x8d0>)
 800a7bc:	f7f5 ff1c 	bl	80005f8 <__aeabi_dmul>
 800a7c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7c4:	e7bc      	b.n	800a740 <_dtoa_r+0x5e8>
 800a7c6:	d10c      	bne.n	800a7e2 <_dtoa_r+0x68a>
 800a7c8:	4b98      	ldr	r3, [pc, #608]	@ (800aa2c <_dtoa_r+0x8d4>)
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7d0:	f7f5 ff12 	bl	80005f8 <__aeabi_dmul>
 800a7d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7d8:	f7f6 f994 	bl	8000b04 <__aeabi_dcmpge>
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	f000 8157 	beq.w	800aa90 <_dtoa_r+0x938>
 800a7e2:	2400      	movs	r4, #0
 800a7e4:	4625      	mov	r5, r4
 800a7e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7e8:	43db      	mvns	r3, r3
 800a7ea:	9304      	str	r3, [sp, #16]
 800a7ec:	4656      	mov	r6, sl
 800a7ee:	2700      	movs	r7, #0
 800a7f0:	4621      	mov	r1, r4
 800a7f2:	4658      	mov	r0, fp
 800a7f4:	f000 ff00 	bl	800b5f8 <_Bfree>
 800a7f8:	2d00      	cmp	r5, #0
 800a7fa:	d0dc      	beq.n	800a7b6 <_dtoa_r+0x65e>
 800a7fc:	b12f      	cbz	r7, 800a80a <_dtoa_r+0x6b2>
 800a7fe:	42af      	cmp	r7, r5
 800a800:	d003      	beq.n	800a80a <_dtoa_r+0x6b2>
 800a802:	4639      	mov	r1, r7
 800a804:	4658      	mov	r0, fp
 800a806:	f000 fef7 	bl	800b5f8 <_Bfree>
 800a80a:	4629      	mov	r1, r5
 800a80c:	4658      	mov	r0, fp
 800a80e:	f000 fef3 	bl	800b5f8 <_Bfree>
 800a812:	e7d0      	b.n	800a7b6 <_dtoa_r+0x65e>
 800a814:	9704      	str	r7, [sp, #16]
 800a816:	4633      	mov	r3, r6
 800a818:	461e      	mov	r6, r3
 800a81a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a81e:	2a39      	cmp	r2, #57	@ 0x39
 800a820:	d107      	bne.n	800a832 <_dtoa_r+0x6da>
 800a822:	459a      	cmp	sl, r3
 800a824:	d1f8      	bne.n	800a818 <_dtoa_r+0x6c0>
 800a826:	9a04      	ldr	r2, [sp, #16]
 800a828:	3201      	adds	r2, #1
 800a82a:	9204      	str	r2, [sp, #16]
 800a82c:	2230      	movs	r2, #48	@ 0x30
 800a82e:	f88a 2000 	strb.w	r2, [sl]
 800a832:	781a      	ldrb	r2, [r3, #0]
 800a834:	3201      	adds	r2, #1
 800a836:	701a      	strb	r2, [r3, #0]
 800a838:	e7bd      	b.n	800a7b6 <_dtoa_r+0x65e>
 800a83a:	4b7b      	ldr	r3, [pc, #492]	@ (800aa28 <_dtoa_r+0x8d0>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	f7f5 fedb 	bl	80005f8 <__aeabi_dmul>
 800a842:	2200      	movs	r2, #0
 800a844:	2300      	movs	r3, #0
 800a846:	4604      	mov	r4, r0
 800a848:	460d      	mov	r5, r1
 800a84a:	f7f6 f93d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a84e:	2800      	cmp	r0, #0
 800a850:	f43f aebb 	beq.w	800a5ca <_dtoa_r+0x472>
 800a854:	e6f0      	b.n	800a638 <_dtoa_r+0x4e0>
 800a856:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a858:	2a00      	cmp	r2, #0
 800a85a:	f000 80db 	beq.w	800aa14 <_dtoa_r+0x8bc>
 800a85e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a860:	2a01      	cmp	r2, #1
 800a862:	f300 80bf 	bgt.w	800a9e4 <_dtoa_r+0x88c>
 800a866:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a868:	2a00      	cmp	r2, #0
 800a86a:	f000 80b7 	beq.w	800a9dc <_dtoa_r+0x884>
 800a86e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a872:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a874:	4646      	mov	r6, r8
 800a876:	9a08      	ldr	r2, [sp, #32]
 800a878:	2101      	movs	r1, #1
 800a87a:	441a      	add	r2, r3
 800a87c:	4658      	mov	r0, fp
 800a87e:	4498      	add	r8, r3
 800a880:	9208      	str	r2, [sp, #32]
 800a882:	f000 ffb7 	bl	800b7f4 <__i2b>
 800a886:	4605      	mov	r5, r0
 800a888:	b15e      	cbz	r6, 800a8a2 <_dtoa_r+0x74a>
 800a88a:	9b08      	ldr	r3, [sp, #32]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	dd08      	ble.n	800a8a2 <_dtoa_r+0x74a>
 800a890:	42b3      	cmp	r3, r6
 800a892:	9a08      	ldr	r2, [sp, #32]
 800a894:	bfa8      	it	ge
 800a896:	4633      	movge	r3, r6
 800a898:	eba8 0803 	sub.w	r8, r8, r3
 800a89c:	1af6      	subs	r6, r6, r3
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	9308      	str	r3, [sp, #32]
 800a8a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8a4:	b1f3      	cbz	r3, 800a8e4 <_dtoa_r+0x78c>
 800a8a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f000 80b7 	beq.w	800aa1c <_dtoa_r+0x8c4>
 800a8ae:	b18c      	cbz	r4, 800a8d4 <_dtoa_r+0x77c>
 800a8b0:	4629      	mov	r1, r5
 800a8b2:	4622      	mov	r2, r4
 800a8b4:	4658      	mov	r0, fp
 800a8b6:	f001 f85d 	bl	800b974 <__pow5mult>
 800a8ba:	464a      	mov	r2, r9
 800a8bc:	4601      	mov	r1, r0
 800a8be:	4605      	mov	r5, r0
 800a8c0:	4658      	mov	r0, fp
 800a8c2:	f000 ffad 	bl	800b820 <__multiply>
 800a8c6:	4649      	mov	r1, r9
 800a8c8:	9004      	str	r0, [sp, #16]
 800a8ca:	4658      	mov	r0, fp
 800a8cc:	f000 fe94 	bl	800b5f8 <_Bfree>
 800a8d0:	9b04      	ldr	r3, [sp, #16]
 800a8d2:	4699      	mov	r9, r3
 800a8d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8d6:	1b1a      	subs	r2, r3, r4
 800a8d8:	d004      	beq.n	800a8e4 <_dtoa_r+0x78c>
 800a8da:	4649      	mov	r1, r9
 800a8dc:	4658      	mov	r0, fp
 800a8de:	f001 f849 	bl	800b974 <__pow5mult>
 800a8e2:	4681      	mov	r9, r0
 800a8e4:	2101      	movs	r1, #1
 800a8e6:	4658      	mov	r0, fp
 800a8e8:	f000 ff84 	bl	800b7f4 <__i2b>
 800a8ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8ee:	4604      	mov	r4, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f000 81cf 	beq.w	800ac94 <_dtoa_r+0xb3c>
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	4601      	mov	r1, r0
 800a8fa:	4658      	mov	r0, fp
 800a8fc:	f001 f83a 	bl	800b974 <__pow5mult>
 800a900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a902:	2b01      	cmp	r3, #1
 800a904:	4604      	mov	r4, r0
 800a906:	f300 8095 	bgt.w	800aa34 <_dtoa_r+0x8dc>
 800a90a:	9b02      	ldr	r3, [sp, #8]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f040 8087 	bne.w	800aa20 <_dtoa_r+0x8c8>
 800a912:	9b03      	ldr	r3, [sp, #12]
 800a914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a918:	2b00      	cmp	r3, #0
 800a91a:	f040 8089 	bne.w	800aa30 <_dtoa_r+0x8d8>
 800a91e:	9b03      	ldr	r3, [sp, #12]
 800a920:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a924:	0d1b      	lsrs	r3, r3, #20
 800a926:	051b      	lsls	r3, r3, #20
 800a928:	b12b      	cbz	r3, 800a936 <_dtoa_r+0x7de>
 800a92a:	9b08      	ldr	r3, [sp, #32]
 800a92c:	3301      	adds	r3, #1
 800a92e:	9308      	str	r3, [sp, #32]
 800a930:	f108 0801 	add.w	r8, r8, #1
 800a934:	2301      	movs	r3, #1
 800a936:	930a      	str	r3, [sp, #40]	@ 0x28
 800a938:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f000 81b0 	beq.w	800aca0 <_dtoa_r+0xb48>
 800a940:	6923      	ldr	r3, [r4, #16]
 800a942:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a946:	6918      	ldr	r0, [r3, #16]
 800a948:	f000 ff08 	bl	800b75c <__hi0bits>
 800a94c:	f1c0 0020 	rsb	r0, r0, #32
 800a950:	9b08      	ldr	r3, [sp, #32]
 800a952:	4418      	add	r0, r3
 800a954:	f010 001f 	ands.w	r0, r0, #31
 800a958:	d077      	beq.n	800aa4a <_dtoa_r+0x8f2>
 800a95a:	f1c0 0320 	rsb	r3, r0, #32
 800a95e:	2b04      	cmp	r3, #4
 800a960:	dd6b      	ble.n	800aa3a <_dtoa_r+0x8e2>
 800a962:	9b08      	ldr	r3, [sp, #32]
 800a964:	f1c0 001c 	rsb	r0, r0, #28
 800a968:	4403      	add	r3, r0
 800a96a:	4480      	add	r8, r0
 800a96c:	4406      	add	r6, r0
 800a96e:	9308      	str	r3, [sp, #32]
 800a970:	f1b8 0f00 	cmp.w	r8, #0
 800a974:	dd05      	ble.n	800a982 <_dtoa_r+0x82a>
 800a976:	4649      	mov	r1, r9
 800a978:	4642      	mov	r2, r8
 800a97a:	4658      	mov	r0, fp
 800a97c:	f001 f854 	bl	800ba28 <__lshift>
 800a980:	4681      	mov	r9, r0
 800a982:	9b08      	ldr	r3, [sp, #32]
 800a984:	2b00      	cmp	r3, #0
 800a986:	dd05      	ble.n	800a994 <_dtoa_r+0x83c>
 800a988:	4621      	mov	r1, r4
 800a98a:	461a      	mov	r2, r3
 800a98c:	4658      	mov	r0, fp
 800a98e:	f001 f84b 	bl	800ba28 <__lshift>
 800a992:	4604      	mov	r4, r0
 800a994:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a996:	2b00      	cmp	r3, #0
 800a998:	d059      	beq.n	800aa4e <_dtoa_r+0x8f6>
 800a99a:	4621      	mov	r1, r4
 800a99c:	4648      	mov	r0, r9
 800a99e:	f001 f8af 	bl	800bb00 <__mcmp>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	da53      	bge.n	800aa4e <_dtoa_r+0x8f6>
 800a9a6:	1e7b      	subs	r3, r7, #1
 800a9a8:	9304      	str	r3, [sp, #16]
 800a9aa:	4649      	mov	r1, r9
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	220a      	movs	r2, #10
 800a9b0:	4658      	mov	r0, fp
 800a9b2:	f000 fe43 	bl	800b63c <__multadd>
 800a9b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9b8:	4681      	mov	r9, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f000 8172 	beq.w	800aca4 <_dtoa_r+0xb4c>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	4629      	mov	r1, r5
 800a9c4:	220a      	movs	r2, #10
 800a9c6:	4658      	mov	r0, fp
 800a9c8:	f000 fe38 	bl	800b63c <__multadd>
 800a9cc:	9b00      	ldr	r3, [sp, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	4605      	mov	r5, r0
 800a9d2:	dc67      	bgt.n	800aaa4 <_dtoa_r+0x94c>
 800a9d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	dc41      	bgt.n	800aa5e <_dtoa_r+0x906>
 800a9da:	e063      	b.n	800aaa4 <_dtoa_r+0x94c>
 800a9dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a9de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a9e2:	e746      	b.n	800a872 <_dtoa_r+0x71a>
 800a9e4:	9b07      	ldr	r3, [sp, #28]
 800a9e6:	1e5c      	subs	r4, r3, #1
 800a9e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9ea:	42a3      	cmp	r3, r4
 800a9ec:	bfbf      	itttt	lt
 800a9ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a9f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a9f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a9f4:	1ae3      	sublt	r3, r4, r3
 800a9f6:	bfb4      	ite	lt
 800a9f8:	18d2      	addlt	r2, r2, r3
 800a9fa:	1b1c      	subge	r4, r3, r4
 800a9fc:	9b07      	ldr	r3, [sp, #28]
 800a9fe:	bfbc      	itt	lt
 800aa00:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800aa02:	2400      	movlt	r4, #0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	bfb5      	itete	lt
 800aa08:	eba8 0603 	sublt.w	r6, r8, r3
 800aa0c:	9b07      	ldrge	r3, [sp, #28]
 800aa0e:	2300      	movlt	r3, #0
 800aa10:	4646      	movge	r6, r8
 800aa12:	e730      	b.n	800a876 <_dtoa_r+0x71e>
 800aa14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aa16:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800aa18:	4646      	mov	r6, r8
 800aa1a:	e735      	b.n	800a888 <_dtoa_r+0x730>
 800aa1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa1e:	e75c      	b.n	800a8da <_dtoa_r+0x782>
 800aa20:	2300      	movs	r3, #0
 800aa22:	e788      	b.n	800a936 <_dtoa_r+0x7de>
 800aa24:	3fe00000 	.word	0x3fe00000
 800aa28:	40240000 	.word	0x40240000
 800aa2c:	40140000 	.word	0x40140000
 800aa30:	9b02      	ldr	r3, [sp, #8]
 800aa32:	e780      	b.n	800a936 <_dtoa_r+0x7de>
 800aa34:	2300      	movs	r3, #0
 800aa36:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa38:	e782      	b.n	800a940 <_dtoa_r+0x7e8>
 800aa3a:	d099      	beq.n	800a970 <_dtoa_r+0x818>
 800aa3c:	9a08      	ldr	r2, [sp, #32]
 800aa3e:	331c      	adds	r3, #28
 800aa40:	441a      	add	r2, r3
 800aa42:	4498      	add	r8, r3
 800aa44:	441e      	add	r6, r3
 800aa46:	9208      	str	r2, [sp, #32]
 800aa48:	e792      	b.n	800a970 <_dtoa_r+0x818>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	e7f6      	b.n	800aa3c <_dtoa_r+0x8e4>
 800aa4e:	9b07      	ldr	r3, [sp, #28]
 800aa50:	9704      	str	r7, [sp, #16]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	dc20      	bgt.n	800aa98 <_dtoa_r+0x940>
 800aa56:	9300      	str	r3, [sp, #0]
 800aa58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	dd1e      	ble.n	800aa9c <_dtoa_r+0x944>
 800aa5e:	9b00      	ldr	r3, [sp, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f47f aec0 	bne.w	800a7e6 <_dtoa_r+0x68e>
 800aa66:	4621      	mov	r1, r4
 800aa68:	2205      	movs	r2, #5
 800aa6a:	4658      	mov	r0, fp
 800aa6c:	f000 fde6 	bl	800b63c <__multadd>
 800aa70:	4601      	mov	r1, r0
 800aa72:	4604      	mov	r4, r0
 800aa74:	4648      	mov	r0, r9
 800aa76:	f001 f843 	bl	800bb00 <__mcmp>
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	f77f aeb3 	ble.w	800a7e6 <_dtoa_r+0x68e>
 800aa80:	4656      	mov	r6, sl
 800aa82:	2331      	movs	r3, #49	@ 0x31
 800aa84:	f806 3b01 	strb.w	r3, [r6], #1
 800aa88:	9b04      	ldr	r3, [sp, #16]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	9304      	str	r3, [sp, #16]
 800aa8e:	e6ae      	b.n	800a7ee <_dtoa_r+0x696>
 800aa90:	9c07      	ldr	r4, [sp, #28]
 800aa92:	9704      	str	r7, [sp, #16]
 800aa94:	4625      	mov	r5, r4
 800aa96:	e7f3      	b.n	800aa80 <_dtoa_r+0x928>
 800aa98:	9b07      	ldr	r3, [sp, #28]
 800aa9a:	9300      	str	r3, [sp, #0]
 800aa9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	f000 8104 	beq.w	800acac <_dtoa_r+0xb54>
 800aaa4:	2e00      	cmp	r6, #0
 800aaa6:	dd05      	ble.n	800aab4 <_dtoa_r+0x95c>
 800aaa8:	4629      	mov	r1, r5
 800aaaa:	4632      	mov	r2, r6
 800aaac:	4658      	mov	r0, fp
 800aaae:	f000 ffbb 	bl	800ba28 <__lshift>
 800aab2:	4605      	mov	r5, r0
 800aab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d05a      	beq.n	800ab70 <_dtoa_r+0xa18>
 800aaba:	6869      	ldr	r1, [r5, #4]
 800aabc:	4658      	mov	r0, fp
 800aabe:	f000 fd5b 	bl	800b578 <_Balloc>
 800aac2:	4606      	mov	r6, r0
 800aac4:	b928      	cbnz	r0, 800aad2 <_dtoa_r+0x97a>
 800aac6:	4b84      	ldr	r3, [pc, #528]	@ (800acd8 <_dtoa_r+0xb80>)
 800aac8:	4602      	mov	r2, r0
 800aaca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800aace:	f7ff bb5a 	b.w	800a186 <_dtoa_r+0x2e>
 800aad2:	692a      	ldr	r2, [r5, #16]
 800aad4:	3202      	adds	r2, #2
 800aad6:	0092      	lsls	r2, r2, #2
 800aad8:	f105 010c 	add.w	r1, r5, #12
 800aadc:	300c      	adds	r0, #12
 800aade:	f7ff fa76 	bl	8009fce <memcpy>
 800aae2:	2201      	movs	r2, #1
 800aae4:	4631      	mov	r1, r6
 800aae6:	4658      	mov	r0, fp
 800aae8:	f000 ff9e 	bl	800ba28 <__lshift>
 800aaec:	f10a 0301 	add.w	r3, sl, #1
 800aaf0:	9307      	str	r3, [sp, #28]
 800aaf2:	9b00      	ldr	r3, [sp, #0]
 800aaf4:	4453      	add	r3, sl
 800aaf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aaf8:	9b02      	ldr	r3, [sp, #8]
 800aafa:	f003 0301 	and.w	r3, r3, #1
 800aafe:	462f      	mov	r7, r5
 800ab00:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab02:	4605      	mov	r5, r0
 800ab04:	9b07      	ldr	r3, [sp, #28]
 800ab06:	4621      	mov	r1, r4
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	4648      	mov	r0, r9
 800ab0c:	9300      	str	r3, [sp, #0]
 800ab0e:	f7ff fa9b 	bl	800a048 <quorem>
 800ab12:	4639      	mov	r1, r7
 800ab14:	9002      	str	r0, [sp, #8]
 800ab16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ab1a:	4648      	mov	r0, r9
 800ab1c:	f000 fff0 	bl	800bb00 <__mcmp>
 800ab20:	462a      	mov	r2, r5
 800ab22:	9008      	str	r0, [sp, #32]
 800ab24:	4621      	mov	r1, r4
 800ab26:	4658      	mov	r0, fp
 800ab28:	f001 f806 	bl	800bb38 <__mdiff>
 800ab2c:	68c2      	ldr	r2, [r0, #12]
 800ab2e:	4606      	mov	r6, r0
 800ab30:	bb02      	cbnz	r2, 800ab74 <_dtoa_r+0xa1c>
 800ab32:	4601      	mov	r1, r0
 800ab34:	4648      	mov	r0, r9
 800ab36:	f000 ffe3 	bl	800bb00 <__mcmp>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	4631      	mov	r1, r6
 800ab3e:	4658      	mov	r0, fp
 800ab40:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab42:	f000 fd59 	bl	800b5f8 <_Bfree>
 800ab46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab4a:	9e07      	ldr	r6, [sp, #28]
 800ab4c:	ea43 0102 	orr.w	r1, r3, r2
 800ab50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab52:	4319      	orrs	r1, r3
 800ab54:	d110      	bne.n	800ab78 <_dtoa_r+0xa20>
 800ab56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab5a:	d029      	beq.n	800abb0 <_dtoa_r+0xa58>
 800ab5c:	9b08      	ldr	r3, [sp, #32]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	dd02      	ble.n	800ab68 <_dtoa_r+0xa10>
 800ab62:	9b02      	ldr	r3, [sp, #8]
 800ab64:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ab68:	9b00      	ldr	r3, [sp, #0]
 800ab6a:	f883 8000 	strb.w	r8, [r3]
 800ab6e:	e63f      	b.n	800a7f0 <_dtoa_r+0x698>
 800ab70:	4628      	mov	r0, r5
 800ab72:	e7bb      	b.n	800aaec <_dtoa_r+0x994>
 800ab74:	2201      	movs	r2, #1
 800ab76:	e7e1      	b.n	800ab3c <_dtoa_r+0x9e4>
 800ab78:	9b08      	ldr	r3, [sp, #32]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	db04      	blt.n	800ab88 <_dtoa_r+0xa30>
 800ab7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab80:	430b      	orrs	r3, r1
 800ab82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ab84:	430b      	orrs	r3, r1
 800ab86:	d120      	bne.n	800abca <_dtoa_r+0xa72>
 800ab88:	2a00      	cmp	r2, #0
 800ab8a:	dded      	ble.n	800ab68 <_dtoa_r+0xa10>
 800ab8c:	4649      	mov	r1, r9
 800ab8e:	2201      	movs	r2, #1
 800ab90:	4658      	mov	r0, fp
 800ab92:	f000 ff49 	bl	800ba28 <__lshift>
 800ab96:	4621      	mov	r1, r4
 800ab98:	4681      	mov	r9, r0
 800ab9a:	f000 ffb1 	bl	800bb00 <__mcmp>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	dc03      	bgt.n	800abaa <_dtoa_r+0xa52>
 800aba2:	d1e1      	bne.n	800ab68 <_dtoa_r+0xa10>
 800aba4:	f018 0f01 	tst.w	r8, #1
 800aba8:	d0de      	beq.n	800ab68 <_dtoa_r+0xa10>
 800abaa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800abae:	d1d8      	bne.n	800ab62 <_dtoa_r+0xa0a>
 800abb0:	9a00      	ldr	r2, [sp, #0]
 800abb2:	2339      	movs	r3, #57	@ 0x39
 800abb4:	7013      	strb	r3, [r2, #0]
 800abb6:	4633      	mov	r3, r6
 800abb8:	461e      	mov	r6, r3
 800abba:	3b01      	subs	r3, #1
 800abbc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800abc0:	2a39      	cmp	r2, #57	@ 0x39
 800abc2:	d052      	beq.n	800ac6a <_dtoa_r+0xb12>
 800abc4:	3201      	adds	r2, #1
 800abc6:	701a      	strb	r2, [r3, #0]
 800abc8:	e612      	b.n	800a7f0 <_dtoa_r+0x698>
 800abca:	2a00      	cmp	r2, #0
 800abcc:	dd07      	ble.n	800abde <_dtoa_r+0xa86>
 800abce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800abd2:	d0ed      	beq.n	800abb0 <_dtoa_r+0xa58>
 800abd4:	9a00      	ldr	r2, [sp, #0]
 800abd6:	f108 0301 	add.w	r3, r8, #1
 800abda:	7013      	strb	r3, [r2, #0]
 800abdc:	e608      	b.n	800a7f0 <_dtoa_r+0x698>
 800abde:	9b07      	ldr	r3, [sp, #28]
 800abe0:	9a07      	ldr	r2, [sp, #28]
 800abe2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800abe6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abe8:	4293      	cmp	r3, r2
 800abea:	d028      	beq.n	800ac3e <_dtoa_r+0xae6>
 800abec:	4649      	mov	r1, r9
 800abee:	2300      	movs	r3, #0
 800abf0:	220a      	movs	r2, #10
 800abf2:	4658      	mov	r0, fp
 800abf4:	f000 fd22 	bl	800b63c <__multadd>
 800abf8:	42af      	cmp	r7, r5
 800abfa:	4681      	mov	r9, r0
 800abfc:	f04f 0300 	mov.w	r3, #0
 800ac00:	f04f 020a 	mov.w	r2, #10
 800ac04:	4639      	mov	r1, r7
 800ac06:	4658      	mov	r0, fp
 800ac08:	d107      	bne.n	800ac1a <_dtoa_r+0xac2>
 800ac0a:	f000 fd17 	bl	800b63c <__multadd>
 800ac0e:	4607      	mov	r7, r0
 800ac10:	4605      	mov	r5, r0
 800ac12:	9b07      	ldr	r3, [sp, #28]
 800ac14:	3301      	adds	r3, #1
 800ac16:	9307      	str	r3, [sp, #28]
 800ac18:	e774      	b.n	800ab04 <_dtoa_r+0x9ac>
 800ac1a:	f000 fd0f 	bl	800b63c <__multadd>
 800ac1e:	4629      	mov	r1, r5
 800ac20:	4607      	mov	r7, r0
 800ac22:	2300      	movs	r3, #0
 800ac24:	220a      	movs	r2, #10
 800ac26:	4658      	mov	r0, fp
 800ac28:	f000 fd08 	bl	800b63c <__multadd>
 800ac2c:	4605      	mov	r5, r0
 800ac2e:	e7f0      	b.n	800ac12 <_dtoa_r+0xaba>
 800ac30:	9b00      	ldr	r3, [sp, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	bfcc      	ite	gt
 800ac36:	461e      	movgt	r6, r3
 800ac38:	2601      	movle	r6, #1
 800ac3a:	4456      	add	r6, sl
 800ac3c:	2700      	movs	r7, #0
 800ac3e:	4649      	mov	r1, r9
 800ac40:	2201      	movs	r2, #1
 800ac42:	4658      	mov	r0, fp
 800ac44:	f000 fef0 	bl	800ba28 <__lshift>
 800ac48:	4621      	mov	r1, r4
 800ac4a:	4681      	mov	r9, r0
 800ac4c:	f000 ff58 	bl	800bb00 <__mcmp>
 800ac50:	2800      	cmp	r0, #0
 800ac52:	dcb0      	bgt.n	800abb6 <_dtoa_r+0xa5e>
 800ac54:	d102      	bne.n	800ac5c <_dtoa_r+0xb04>
 800ac56:	f018 0f01 	tst.w	r8, #1
 800ac5a:	d1ac      	bne.n	800abb6 <_dtoa_r+0xa5e>
 800ac5c:	4633      	mov	r3, r6
 800ac5e:	461e      	mov	r6, r3
 800ac60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac64:	2a30      	cmp	r2, #48	@ 0x30
 800ac66:	d0fa      	beq.n	800ac5e <_dtoa_r+0xb06>
 800ac68:	e5c2      	b.n	800a7f0 <_dtoa_r+0x698>
 800ac6a:	459a      	cmp	sl, r3
 800ac6c:	d1a4      	bne.n	800abb8 <_dtoa_r+0xa60>
 800ac6e:	9b04      	ldr	r3, [sp, #16]
 800ac70:	3301      	adds	r3, #1
 800ac72:	9304      	str	r3, [sp, #16]
 800ac74:	2331      	movs	r3, #49	@ 0x31
 800ac76:	f88a 3000 	strb.w	r3, [sl]
 800ac7a:	e5b9      	b.n	800a7f0 <_dtoa_r+0x698>
 800ac7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ac7e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800acdc <_dtoa_r+0xb84>
 800ac82:	b11b      	cbz	r3, 800ac8c <_dtoa_r+0xb34>
 800ac84:	f10a 0308 	add.w	r3, sl, #8
 800ac88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ac8a:	6013      	str	r3, [r2, #0]
 800ac8c:	4650      	mov	r0, sl
 800ac8e:	b019      	add	sp, #100	@ 0x64
 800ac90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	f77f ae37 	ble.w	800a90a <_dtoa_r+0x7b2>
 800ac9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aca0:	2001      	movs	r0, #1
 800aca2:	e655      	b.n	800a950 <_dtoa_r+0x7f8>
 800aca4:	9b00      	ldr	r3, [sp, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f77f aed6 	ble.w	800aa58 <_dtoa_r+0x900>
 800acac:	4656      	mov	r6, sl
 800acae:	4621      	mov	r1, r4
 800acb0:	4648      	mov	r0, r9
 800acb2:	f7ff f9c9 	bl	800a048 <quorem>
 800acb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800acba:	f806 8b01 	strb.w	r8, [r6], #1
 800acbe:	9b00      	ldr	r3, [sp, #0]
 800acc0:	eba6 020a 	sub.w	r2, r6, sl
 800acc4:	4293      	cmp	r3, r2
 800acc6:	ddb3      	ble.n	800ac30 <_dtoa_r+0xad8>
 800acc8:	4649      	mov	r1, r9
 800acca:	2300      	movs	r3, #0
 800accc:	220a      	movs	r2, #10
 800acce:	4658      	mov	r0, fp
 800acd0:	f000 fcb4 	bl	800b63c <__multadd>
 800acd4:	4681      	mov	r9, r0
 800acd6:	e7ea      	b.n	800acae <_dtoa_r+0xb56>
 800acd8:	0801205b 	.word	0x0801205b
 800acdc:	08011ff6 	.word	0x08011ff6

0800ace0 <_free_r>:
 800ace0:	b538      	push	{r3, r4, r5, lr}
 800ace2:	4605      	mov	r5, r0
 800ace4:	2900      	cmp	r1, #0
 800ace6:	d041      	beq.n	800ad6c <_free_r+0x8c>
 800ace8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acec:	1f0c      	subs	r4, r1, #4
 800acee:	2b00      	cmp	r3, #0
 800acf0:	bfb8      	it	lt
 800acf2:	18e4      	addlt	r4, r4, r3
 800acf4:	f000 fc34 	bl	800b560 <__malloc_lock>
 800acf8:	4a1d      	ldr	r2, [pc, #116]	@ (800ad70 <_free_r+0x90>)
 800acfa:	6813      	ldr	r3, [r2, #0]
 800acfc:	b933      	cbnz	r3, 800ad0c <_free_r+0x2c>
 800acfe:	6063      	str	r3, [r4, #4]
 800ad00:	6014      	str	r4, [r2, #0]
 800ad02:	4628      	mov	r0, r5
 800ad04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad08:	f000 bc30 	b.w	800b56c <__malloc_unlock>
 800ad0c:	42a3      	cmp	r3, r4
 800ad0e:	d908      	bls.n	800ad22 <_free_r+0x42>
 800ad10:	6820      	ldr	r0, [r4, #0]
 800ad12:	1821      	adds	r1, r4, r0
 800ad14:	428b      	cmp	r3, r1
 800ad16:	bf01      	itttt	eq
 800ad18:	6819      	ldreq	r1, [r3, #0]
 800ad1a:	685b      	ldreq	r3, [r3, #4]
 800ad1c:	1809      	addeq	r1, r1, r0
 800ad1e:	6021      	streq	r1, [r4, #0]
 800ad20:	e7ed      	b.n	800acfe <_free_r+0x1e>
 800ad22:	461a      	mov	r2, r3
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	b10b      	cbz	r3, 800ad2c <_free_r+0x4c>
 800ad28:	42a3      	cmp	r3, r4
 800ad2a:	d9fa      	bls.n	800ad22 <_free_r+0x42>
 800ad2c:	6811      	ldr	r1, [r2, #0]
 800ad2e:	1850      	adds	r0, r2, r1
 800ad30:	42a0      	cmp	r0, r4
 800ad32:	d10b      	bne.n	800ad4c <_free_r+0x6c>
 800ad34:	6820      	ldr	r0, [r4, #0]
 800ad36:	4401      	add	r1, r0
 800ad38:	1850      	adds	r0, r2, r1
 800ad3a:	4283      	cmp	r3, r0
 800ad3c:	6011      	str	r1, [r2, #0]
 800ad3e:	d1e0      	bne.n	800ad02 <_free_r+0x22>
 800ad40:	6818      	ldr	r0, [r3, #0]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	6053      	str	r3, [r2, #4]
 800ad46:	4408      	add	r0, r1
 800ad48:	6010      	str	r0, [r2, #0]
 800ad4a:	e7da      	b.n	800ad02 <_free_r+0x22>
 800ad4c:	d902      	bls.n	800ad54 <_free_r+0x74>
 800ad4e:	230c      	movs	r3, #12
 800ad50:	602b      	str	r3, [r5, #0]
 800ad52:	e7d6      	b.n	800ad02 <_free_r+0x22>
 800ad54:	6820      	ldr	r0, [r4, #0]
 800ad56:	1821      	adds	r1, r4, r0
 800ad58:	428b      	cmp	r3, r1
 800ad5a:	bf04      	itt	eq
 800ad5c:	6819      	ldreq	r1, [r3, #0]
 800ad5e:	685b      	ldreq	r3, [r3, #4]
 800ad60:	6063      	str	r3, [r4, #4]
 800ad62:	bf04      	itt	eq
 800ad64:	1809      	addeq	r1, r1, r0
 800ad66:	6021      	streq	r1, [r4, #0]
 800ad68:	6054      	str	r4, [r2, #4]
 800ad6a:	e7ca      	b.n	800ad02 <_free_r+0x22>
 800ad6c:	bd38      	pop	{r3, r4, r5, pc}
 800ad6e:	bf00      	nop
 800ad70:	200028ac 	.word	0x200028ac

0800ad74 <rshift>:
 800ad74:	6903      	ldr	r3, [r0, #16]
 800ad76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ad7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ad82:	f100 0414 	add.w	r4, r0, #20
 800ad86:	dd45      	ble.n	800ae14 <rshift+0xa0>
 800ad88:	f011 011f 	ands.w	r1, r1, #31
 800ad8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ad90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ad94:	d10c      	bne.n	800adb0 <rshift+0x3c>
 800ad96:	f100 0710 	add.w	r7, r0, #16
 800ad9a:	4629      	mov	r1, r5
 800ad9c:	42b1      	cmp	r1, r6
 800ad9e:	d334      	bcc.n	800ae0a <rshift+0x96>
 800ada0:	1a9b      	subs	r3, r3, r2
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	1eea      	subs	r2, r5, #3
 800ada6:	4296      	cmp	r6, r2
 800ada8:	bf38      	it	cc
 800adaa:	2300      	movcc	r3, #0
 800adac:	4423      	add	r3, r4
 800adae:	e015      	b.n	800addc <rshift+0x68>
 800adb0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800adb4:	f1c1 0820 	rsb	r8, r1, #32
 800adb8:	40cf      	lsrs	r7, r1
 800adba:	f105 0e04 	add.w	lr, r5, #4
 800adbe:	46a1      	mov	r9, r4
 800adc0:	4576      	cmp	r6, lr
 800adc2:	46f4      	mov	ip, lr
 800adc4:	d815      	bhi.n	800adf2 <rshift+0x7e>
 800adc6:	1a9a      	subs	r2, r3, r2
 800adc8:	0092      	lsls	r2, r2, #2
 800adca:	3a04      	subs	r2, #4
 800adcc:	3501      	adds	r5, #1
 800adce:	42ae      	cmp	r6, r5
 800add0:	bf38      	it	cc
 800add2:	2200      	movcc	r2, #0
 800add4:	18a3      	adds	r3, r4, r2
 800add6:	50a7      	str	r7, [r4, r2]
 800add8:	b107      	cbz	r7, 800addc <rshift+0x68>
 800adda:	3304      	adds	r3, #4
 800addc:	1b1a      	subs	r2, r3, r4
 800adde:	42a3      	cmp	r3, r4
 800ade0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ade4:	bf08      	it	eq
 800ade6:	2300      	moveq	r3, #0
 800ade8:	6102      	str	r2, [r0, #16]
 800adea:	bf08      	it	eq
 800adec:	6143      	streq	r3, [r0, #20]
 800adee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adf2:	f8dc c000 	ldr.w	ip, [ip]
 800adf6:	fa0c fc08 	lsl.w	ip, ip, r8
 800adfa:	ea4c 0707 	orr.w	r7, ip, r7
 800adfe:	f849 7b04 	str.w	r7, [r9], #4
 800ae02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ae06:	40cf      	lsrs	r7, r1
 800ae08:	e7da      	b.n	800adc0 <rshift+0x4c>
 800ae0a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ae0e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ae12:	e7c3      	b.n	800ad9c <rshift+0x28>
 800ae14:	4623      	mov	r3, r4
 800ae16:	e7e1      	b.n	800addc <rshift+0x68>

0800ae18 <__hexdig_fun>:
 800ae18:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ae1c:	2b09      	cmp	r3, #9
 800ae1e:	d802      	bhi.n	800ae26 <__hexdig_fun+0xe>
 800ae20:	3820      	subs	r0, #32
 800ae22:	b2c0      	uxtb	r0, r0
 800ae24:	4770      	bx	lr
 800ae26:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ae2a:	2b05      	cmp	r3, #5
 800ae2c:	d801      	bhi.n	800ae32 <__hexdig_fun+0x1a>
 800ae2e:	3847      	subs	r0, #71	@ 0x47
 800ae30:	e7f7      	b.n	800ae22 <__hexdig_fun+0xa>
 800ae32:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ae36:	2b05      	cmp	r3, #5
 800ae38:	d801      	bhi.n	800ae3e <__hexdig_fun+0x26>
 800ae3a:	3827      	subs	r0, #39	@ 0x27
 800ae3c:	e7f1      	b.n	800ae22 <__hexdig_fun+0xa>
 800ae3e:	2000      	movs	r0, #0
 800ae40:	4770      	bx	lr
	...

0800ae44 <__gethex>:
 800ae44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae48:	b085      	sub	sp, #20
 800ae4a:	468a      	mov	sl, r1
 800ae4c:	9302      	str	r3, [sp, #8]
 800ae4e:	680b      	ldr	r3, [r1, #0]
 800ae50:	9001      	str	r0, [sp, #4]
 800ae52:	4690      	mov	r8, r2
 800ae54:	1c9c      	adds	r4, r3, #2
 800ae56:	46a1      	mov	r9, r4
 800ae58:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ae5c:	2830      	cmp	r0, #48	@ 0x30
 800ae5e:	d0fa      	beq.n	800ae56 <__gethex+0x12>
 800ae60:	eba9 0303 	sub.w	r3, r9, r3
 800ae64:	f1a3 0b02 	sub.w	fp, r3, #2
 800ae68:	f7ff ffd6 	bl	800ae18 <__hexdig_fun>
 800ae6c:	4605      	mov	r5, r0
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	d168      	bne.n	800af44 <__gethex+0x100>
 800ae72:	49a0      	ldr	r1, [pc, #640]	@ (800b0f4 <__gethex+0x2b0>)
 800ae74:	2201      	movs	r2, #1
 800ae76:	4648      	mov	r0, r9
 800ae78:	f7fe ffbb 	bl	8009df2 <strncmp>
 800ae7c:	4607      	mov	r7, r0
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	d167      	bne.n	800af52 <__gethex+0x10e>
 800ae82:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ae86:	4626      	mov	r6, r4
 800ae88:	f7ff ffc6 	bl	800ae18 <__hexdig_fun>
 800ae8c:	2800      	cmp	r0, #0
 800ae8e:	d062      	beq.n	800af56 <__gethex+0x112>
 800ae90:	4623      	mov	r3, r4
 800ae92:	7818      	ldrb	r0, [r3, #0]
 800ae94:	2830      	cmp	r0, #48	@ 0x30
 800ae96:	4699      	mov	r9, r3
 800ae98:	f103 0301 	add.w	r3, r3, #1
 800ae9c:	d0f9      	beq.n	800ae92 <__gethex+0x4e>
 800ae9e:	f7ff ffbb 	bl	800ae18 <__hexdig_fun>
 800aea2:	fab0 f580 	clz	r5, r0
 800aea6:	096d      	lsrs	r5, r5, #5
 800aea8:	f04f 0b01 	mov.w	fp, #1
 800aeac:	464a      	mov	r2, r9
 800aeae:	4616      	mov	r6, r2
 800aeb0:	3201      	adds	r2, #1
 800aeb2:	7830      	ldrb	r0, [r6, #0]
 800aeb4:	f7ff ffb0 	bl	800ae18 <__hexdig_fun>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	d1f8      	bne.n	800aeae <__gethex+0x6a>
 800aebc:	498d      	ldr	r1, [pc, #564]	@ (800b0f4 <__gethex+0x2b0>)
 800aebe:	2201      	movs	r2, #1
 800aec0:	4630      	mov	r0, r6
 800aec2:	f7fe ff96 	bl	8009df2 <strncmp>
 800aec6:	2800      	cmp	r0, #0
 800aec8:	d13f      	bne.n	800af4a <__gethex+0x106>
 800aeca:	b944      	cbnz	r4, 800aede <__gethex+0x9a>
 800aecc:	1c74      	adds	r4, r6, #1
 800aece:	4622      	mov	r2, r4
 800aed0:	4616      	mov	r6, r2
 800aed2:	3201      	adds	r2, #1
 800aed4:	7830      	ldrb	r0, [r6, #0]
 800aed6:	f7ff ff9f 	bl	800ae18 <__hexdig_fun>
 800aeda:	2800      	cmp	r0, #0
 800aedc:	d1f8      	bne.n	800aed0 <__gethex+0x8c>
 800aede:	1ba4      	subs	r4, r4, r6
 800aee0:	00a7      	lsls	r7, r4, #2
 800aee2:	7833      	ldrb	r3, [r6, #0]
 800aee4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800aee8:	2b50      	cmp	r3, #80	@ 0x50
 800aeea:	d13e      	bne.n	800af6a <__gethex+0x126>
 800aeec:	7873      	ldrb	r3, [r6, #1]
 800aeee:	2b2b      	cmp	r3, #43	@ 0x2b
 800aef0:	d033      	beq.n	800af5a <__gethex+0x116>
 800aef2:	2b2d      	cmp	r3, #45	@ 0x2d
 800aef4:	d034      	beq.n	800af60 <__gethex+0x11c>
 800aef6:	1c71      	adds	r1, r6, #1
 800aef8:	2400      	movs	r4, #0
 800aefa:	7808      	ldrb	r0, [r1, #0]
 800aefc:	f7ff ff8c 	bl	800ae18 <__hexdig_fun>
 800af00:	1e43      	subs	r3, r0, #1
 800af02:	b2db      	uxtb	r3, r3
 800af04:	2b18      	cmp	r3, #24
 800af06:	d830      	bhi.n	800af6a <__gethex+0x126>
 800af08:	f1a0 0210 	sub.w	r2, r0, #16
 800af0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800af10:	f7ff ff82 	bl	800ae18 <__hexdig_fun>
 800af14:	f100 3cff 	add.w	ip, r0, #4294967295
 800af18:	fa5f fc8c 	uxtb.w	ip, ip
 800af1c:	f1bc 0f18 	cmp.w	ip, #24
 800af20:	f04f 030a 	mov.w	r3, #10
 800af24:	d91e      	bls.n	800af64 <__gethex+0x120>
 800af26:	b104      	cbz	r4, 800af2a <__gethex+0xe6>
 800af28:	4252      	negs	r2, r2
 800af2a:	4417      	add	r7, r2
 800af2c:	f8ca 1000 	str.w	r1, [sl]
 800af30:	b1ed      	cbz	r5, 800af6e <__gethex+0x12a>
 800af32:	f1bb 0f00 	cmp.w	fp, #0
 800af36:	bf0c      	ite	eq
 800af38:	2506      	moveq	r5, #6
 800af3a:	2500      	movne	r5, #0
 800af3c:	4628      	mov	r0, r5
 800af3e:	b005      	add	sp, #20
 800af40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af44:	2500      	movs	r5, #0
 800af46:	462c      	mov	r4, r5
 800af48:	e7b0      	b.n	800aeac <__gethex+0x68>
 800af4a:	2c00      	cmp	r4, #0
 800af4c:	d1c7      	bne.n	800aede <__gethex+0x9a>
 800af4e:	4627      	mov	r7, r4
 800af50:	e7c7      	b.n	800aee2 <__gethex+0x9e>
 800af52:	464e      	mov	r6, r9
 800af54:	462f      	mov	r7, r5
 800af56:	2501      	movs	r5, #1
 800af58:	e7c3      	b.n	800aee2 <__gethex+0x9e>
 800af5a:	2400      	movs	r4, #0
 800af5c:	1cb1      	adds	r1, r6, #2
 800af5e:	e7cc      	b.n	800aefa <__gethex+0xb6>
 800af60:	2401      	movs	r4, #1
 800af62:	e7fb      	b.n	800af5c <__gethex+0x118>
 800af64:	fb03 0002 	mla	r0, r3, r2, r0
 800af68:	e7ce      	b.n	800af08 <__gethex+0xc4>
 800af6a:	4631      	mov	r1, r6
 800af6c:	e7de      	b.n	800af2c <__gethex+0xe8>
 800af6e:	eba6 0309 	sub.w	r3, r6, r9
 800af72:	3b01      	subs	r3, #1
 800af74:	4629      	mov	r1, r5
 800af76:	2b07      	cmp	r3, #7
 800af78:	dc0a      	bgt.n	800af90 <__gethex+0x14c>
 800af7a:	9801      	ldr	r0, [sp, #4]
 800af7c:	f000 fafc 	bl	800b578 <_Balloc>
 800af80:	4604      	mov	r4, r0
 800af82:	b940      	cbnz	r0, 800af96 <__gethex+0x152>
 800af84:	4b5c      	ldr	r3, [pc, #368]	@ (800b0f8 <__gethex+0x2b4>)
 800af86:	4602      	mov	r2, r0
 800af88:	21e4      	movs	r1, #228	@ 0xe4
 800af8a:	485c      	ldr	r0, [pc, #368]	@ (800b0fc <__gethex+0x2b8>)
 800af8c:	f7ff f83e 	bl	800a00c <__assert_func>
 800af90:	3101      	adds	r1, #1
 800af92:	105b      	asrs	r3, r3, #1
 800af94:	e7ef      	b.n	800af76 <__gethex+0x132>
 800af96:	f100 0a14 	add.w	sl, r0, #20
 800af9a:	2300      	movs	r3, #0
 800af9c:	4655      	mov	r5, sl
 800af9e:	469b      	mov	fp, r3
 800afa0:	45b1      	cmp	r9, r6
 800afa2:	d337      	bcc.n	800b014 <__gethex+0x1d0>
 800afa4:	f845 bb04 	str.w	fp, [r5], #4
 800afa8:	eba5 050a 	sub.w	r5, r5, sl
 800afac:	10ad      	asrs	r5, r5, #2
 800afae:	6125      	str	r5, [r4, #16]
 800afb0:	4658      	mov	r0, fp
 800afb2:	f000 fbd3 	bl	800b75c <__hi0bits>
 800afb6:	016d      	lsls	r5, r5, #5
 800afb8:	f8d8 6000 	ldr.w	r6, [r8]
 800afbc:	1a2d      	subs	r5, r5, r0
 800afbe:	42b5      	cmp	r5, r6
 800afc0:	dd54      	ble.n	800b06c <__gethex+0x228>
 800afc2:	1bad      	subs	r5, r5, r6
 800afc4:	4629      	mov	r1, r5
 800afc6:	4620      	mov	r0, r4
 800afc8:	f000 ff67 	bl	800be9a <__any_on>
 800afcc:	4681      	mov	r9, r0
 800afce:	b178      	cbz	r0, 800aff0 <__gethex+0x1ac>
 800afd0:	1e6b      	subs	r3, r5, #1
 800afd2:	1159      	asrs	r1, r3, #5
 800afd4:	f003 021f 	and.w	r2, r3, #31
 800afd8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800afdc:	f04f 0901 	mov.w	r9, #1
 800afe0:	fa09 f202 	lsl.w	r2, r9, r2
 800afe4:	420a      	tst	r2, r1
 800afe6:	d003      	beq.n	800aff0 <__gethex+0x1ac>
 800afe8:	454b      	cmp	r3, r9
 800afea:	dc36      	bgt.n	800b05a <__gethex+0x216>
 800afec:	f04f 0902 	mov.w	r9, #2
 800aff0:	4629      	mov	r1, r5
 800aff2:	4620      	mov	r0, r4
 800aff4:	f7ff febe 	bl	800ad74 <rshift>
 800aff8:	442f      	add	r7, r5
 800affa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800affe:	42bb      	cmp	r3, r7
 800b000:	da42      	bge.n	800b088 <__gethex+0x244>
 800b002:	9801      	ldr	r0, [sp, #4]
 800b004:	4621      	mov	r1, r4
 800b006:	f000 faf7 	bl	800b5f8 <_Bfree>
 800b00a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b00c:	2300      	movs	r3, #0
 800b00e:	6013      	str	r3, [r2, #0]
 800b010:	25a3      	movs	r5, #163	@ 0xa3
 800b012:	e793      	b.n	800af3c <__gethex+0xf8>
 800b014:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b018:	2a2e      	cmp	r2, #46	@ 0x2e
 800b01a:	d012      	beq.n	800b042 <__gethex+0x1fe>
 800b01c:	2b20      	cmp	r3, #32
 800b01e:	d104      	bne.n	800b02a <__gethex+0x1e6>
 800b020:	f845 bb04 	str.w	fp, [r5], #4
 800b024:	f04f 0b00 	mov.w	fp, #0
 800b028:	465b      	mov	r3, fp
 800b02a:	7830      	ldrb	r0, [r6, #0]
 800b02c:	9303      	str	r3, [sp, #12]
 800b02e:	f7ff fef3 	bl	800ae18 <__hexdig_fun>
 800b032:	9b03      	ldr	r3, [sp, #12]
 800b034:	f000 000f 	and.w	r0, r0, #15
 800b038:	4098      	lsls	r0, r3
 800b03a:	ea4b 0b00 	orr.w	fp, fp, r0
 800b03e:	3304      	adds	r3, #4
 800b040:	e7ae      	b.n	800afa0 <__gethex+0x15c>
 800b042:	45b1      	cmp	r9, r6
 800b044:	d8ea      	bhi.n	800b01c <__gethex+0x1d8>
 800b046:	492b      	ldr	r1, [pc, #172]	@ (800b0f4 <__gethex+0x2b0>)
 800b048:	9303      	str	r3, [sp, #12]
 800b04a:	2201      	movs	r2, #1
 800b04c:	4630      	mov	r0, r6
 800b04e:	f7fe fed0 	bl	8009df2 <strncmp>
 800b052:	9b03      	ldr	r3, [sp, #12]
 800b054:	2800      	cmp	r0, #0
 800b056:	d1e1      	bne.n	800b01c <__gethex+0x1d8>
 800b058:	e7a2      	b.n	800afa0 <__gethex+0x15c>
 800b05a:	1ea9      	subs	r1, r5, #2
 800b05c:	4620      	mov	r0, r4
 800b05e:	f000 ff1c 	bl	800be9a <__any_on>
 800b062:	2800      	cmp	r0, #0
 800b064:	d0c2      	beq.n	800afec <__gethex+0x1a8>
 800b066:	f04f 0903 	mov.w	r9, #3
 800b06a:	e7c1      	b.n	800aff0 <__gethex+0x1ac>
 800b06c:	da09      	bge.n	800b082 <__gethex+0x23e>
 800b06e:	1b75      	subs	r5, r6, r5
 800b070:	4621      	mov	r1, r4
 800b072:	9801      	ldr	r0, [sp, #4]
 800b074:	462a      	mov	r2, r5
 800b076:	f000 fcd7 	bl	800ba28 <__lshift>
 800b07a:	1b7f      	subs	r7, r7, r5
 800b07c:	4604      	mov	r4, r0
 800b07e:	f100 0a14 	add.w	sl, r0, #20
 800b082:	f04f 0900 	mov.w	r9, #0
 800b086:	e7b8      	b.n	800affa <__gethex+0x1b6>
 800b088:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b08c:	42bd      	cmp	r5, r7
 800b08e:	dd6f      	ble.n	800b170 <__gethex+0x32c>
 800b090:	1bed      	subs	r5, r5, r7
 800b092:	42ae      	cmp	r6, r5
 800b094:	dc34      	bgt.n	800b100 <__gethex+0x2bc>
 800b096:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	d022      	beq.n	800b0e4 <__gethex+0x2a0>
 800b09e:	2b03      	cmp	r3, #3
 800b0a0:	d024      	beq.n	800b0ec <__gethex+0x2a8>
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d115      	bne.n	800b0d2 <__gethex+0x28e>
 800b0a6:	42ae      	cmp	r6, r5
 800b0a8:	d113      	bne.n	800b0d2 <__gethex+0x28e>
 800b0aa:	2e01      	cmp	r6, #1
 800b0ac:	d10b      	bne.n	800b0c6 <__gethex+0x282>
 800b0ae:	9a02      	ldr	r2, [sp, #8]
 800b0b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b0b4:	6013      	str	r3, [r2, #0]
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	6123      	str	r3, [r4, #16]
 800b0ba:	f8ca 3000 	str.w	r3, [sl]
 800b0be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0c0:	2562      	movs	r5, #98	@ 0x62
 800b0c2:	601c      	str	r4, [r3, #0]
 800b0c4:	e73a      	b.n	800af3c <__gethex+0xf8>
 800b0c6:	1e71      	subs	r1, r6, #1
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	f000 fee6 	bl	800be9a <__any_on>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	d1ed      	bne.n	800b0ae <__gethex+0x26a>
 800b0d2:	9801      	ldr	r0, [sp, #4]
 800b0d4:	4621      	mov	r1, r4
 800b0d6:	f000 fa8f 	bl	800b5f8 <_Bfree>
 800b0da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0dc:	2300      	movs	r3, #0
 800b0de:	6013      	str	r3, [r2, #0]
 800b0e0:	2550      	movs	r5, #80	@ 0x50
 800b0e2:	e72b      	b.n	800af3c <__gethex+0xf8>
 800b0e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d1f3      	bne.n	800b0d2 <__gethex+0x28e>
 800b0ea:	e7e0      	b.n	800b0ae <__gethex+0x26a>
 800b0ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1dd      	bne.n	800b0ae <__gethex+0x26a>
 800b0f2:	e7ee      	b.n	800b0d2 <__gethex+0x28e>
 800b0f4:	08011eb4 	.word	0x08011eb4
 800b0f8:	0801205b 	.word	0x0801205b
 800b0fc:	0801206c 	.word	0x0801206c
 800b100:	1e6f      	subs	r7, r5, #1
 800b102:	f1b9 0f00 	cmp.w	r9, #0
 800b106:	d130      	bne.n	800b16a <__gethex+0x326>
 800b108:	b127      	cbz	r7, 800b114 <__gethex+0x2d0>
 800b10a:	4639      	mov	r1, r7
 800b10c:	4620      	mov	r0, r4
 800b10e:	f000 fec4 	bl	800be9a <__any_on>
 800b112:	4681      	mov	r9, r0
 800b114:	117a      	asrs	r2, r7, #5
 800b116:	2301      	movs	r3, #1
 800b118:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b11c:	f007 071f 	and.w	r7, r7, #31
 800b120:	40bb      	lsls	r3, r7
 800b122:	4213      	tst	r3, r2
 800b124:	4629      	mov	r1, r5
 800b126:	4620      	mov	r0, r4
 800b128:	bf18      	it	ne
 800b12a:	f049 0902 	orrne.w	r9, r9, #2
 800b12e:	f7ff fe21 	bl	800ad74 <rshift>
 800b132:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b136:	1b76      	subs	r6, r6, r5
 800b138:	2502      	movs	r5, #2
 800b13a:	f1b9 0f00 	cmp.w	r9, #0
 800b13e:	d047      	beq.n	800b1d0 <__gethex+0x38c>
 800b140:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b144:	2b02      	cmp	r3, #2
 800b146:	d015      	beq.n	800b174 <__gethex+0x330>
 800b148:	2b03      	cmp	r3, #3
 800b14a:	d017      	beq.n	800b17c <__gethex+0x338>
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d109      	bne.n	800b164 <__gethex+0x320>
 800b150:	f019 0f02 	tst.w	r9, #2
 800b154:	d006      	beq.n	800b164 <__gethex+0x320>
 800b156:	f8da 3000 	ldr.w	r3, [sl]
 800b15a:	ea49 0903 	orr.w	r9, r9, r3
 800b15e:	f019 0f01 	tst.w	r9, #1
 800b162:	d10e      	bne.n	800b182 <__gethex+0x33e>
 800b164:	f045 0510 	orr.w	r5, r5, #16
 800b168:	e032      	b.n	800b1d0 <__gethex+0x38c>
 800b16a:	f04f 0901 	mov.w	r9, #1
 800b16e:	e7d1      	b.n	800b114 <__gethex+0x2d0>
 800b170:	2501      	movs	r5, #1
 800b172:	e7e2      	b.n	800b13a <__gethex+0x2f6>
 800b174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b176:	f1c3 0301 	rsb	r3, r3, #1
 800b17a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d0f0      	beq.n	800b164 <__gethex+0x320>
 800b182:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b186:	f104 0314 	add.w	r3, r4, #20
 800b18a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b18e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b192:	f04f 0c00 	mov.w	ip, #0
 800b196:	4618      	mov	r0, r3
 800b198:	f853 2b04 	ldr.w	r2, [r3], #4
 800b19c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b1a0:	d01b      	beq.n	800b1da <__gethex+0x396>
 800b1a2:	3201      	adds	r2, #1
 800b1a4:	6002      	str	r2, [r0, #0]
 800b1a6:	2d02      	cmp	r5, #2
 800b1a8:	f104 0314 	add.w	r3, r4, #20
 800b1ac:	d13c      	bne.n	800b228 <__gethex+0x3e4>
 800b1ae:	f8d8 2000 	ldr.w	r2, [r8]
 800b1b2:	3a01      	subs	r2, #1
 800b1b4:	42b2      	cmp	r2, r6
 800b1b6:	d109      	bne.n	800b1cc <__gethex+0x388>
 800b1b8:	1171      	asrs	r1, r6, #5
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b1c0:	f006 061f 	and.w	r6, r6, #31
 800b1c4:	fa02 f606 	lsl.w	r6, r2, r6
 800b1c8:	421e      	tst	r6, r3
 800b1ca:	d13a      	bne.n	800b242 <__gethex+0x3fe>
 800b1cc:	f045 0520 	orr.w	r5, r5, #32
 800b1d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1d2:	601c      	str	r4, [r3, #0]
 800b1d4:	9b02      	ldr	r3, [sp, #8]
 800b1d6:	601f      	str	r7, [r3, #0]
 800b1d8:	e6b0      	b.n	800af3c <__gethex+0xf8>
 800b1da:	4299      	cmp	r1, r3
 800b1dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800b1e0:	d8d9      	bhi.n	800b196 <__gethex+0x352>
 800b1e2:	68a3      	ldr	r3, [r4, #8]
 800b1e4:	459b      	cmp	fp, r3
 800b1e6:	db17      	blt.n	800b218 <__gethex+0x3d4>
 800b1e8:	6861      	ldr	r1, [r4, #4]
 800b1ea:	9801      	ldr	r0, [sp, #4]
 800b1ec:	3101      	adds	r1, #1
 800b1ee:	f000 f9c3 	bl	800b578 <_Balloc>
 800b1f2:	4681      	mov	r9, r0
 800b1f4:	b918      	cbnz	r0, 800b1fe <__gethex+0x3ba>
 800b1f6:	4b1a      	ldr	r3, [pc, #104]	@ (800b260 <__gethex+0x41c>)
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	2184      	movs	r1, #132	@ 0x84
 800b1fc:	e6c5      	b.n	800af8a <__gethex+0x146>
 800b1fe:	6922      	ldr	r2, [r4, #16]
 800b200:	3202      	adds	r2, #2
 800b202:	f104 010c 	add.w	r1, r4, #12
 800b206:	0092      	lsls	r2, r2, #2
 800b208:	300c      	adds	r0, #12
 800b20a:	f7fe fee0 	bl	8009fce <memcpy>
 800b20e:	4621      	mov	r1, r4
 800b210:	9801      	ldr	r0, [sp, #4]
 800b212:	f000 f9f1 	bl	800b5f8 <_Bfree>
 800b216:	464c      	mov	r4, r9
 800b218:	6923      	ldr	r3, [r4, #16]
 800b21a:	1c5a      	adds	r2, r3, #1
 800b21c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b220:	6122      	str	r2, [r4, #16]
 800b222:	2201      	movs	r2, #1
 800b224:	615a      	str	r2, [r3, #20]
 800b226:	e7be      	b.n	800b1a6 <__gethex+0x362>
 800b228:	6922      	ldr	r2, [r4, #16]
 800b22a:	455a      	cmp	r2, fp
 800b22c:	dd0b      	ble.n	800b246 <__gethex+0x402>
 800b22e:	2101      	movs	r1, #1
 800b230:	4620      	mov	r0, r4
 800b232:	f7ff fd9f 	bl	800ad74 <rshift>
 800b236:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b23a:	3701      	adds	r7, #1
 800b23c:	42bb      	cmp	r3, r7
 800b23e:	f6ff aee0 	blt.w	800b002 <__gethex+0x1be>
 800b242:	2501      	movs	r5, #1
 800b244:	e7c2      	b.n	800b1cc <__gethex+0x388>
 800b246:	f016 061f 	ands.w	r6, r6, #31
 800b24a:	d0fa      	beq.n	800b242 <__gethex+0x3fe>
 800b24c:	4453      	add	r3, sl
 800b24e:	f1c6 0620 	rsb	r6, r6, #32
 800b252:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b256:	f000 fa81 	bl	800b75c <__hi0bits>
 800b25a:	42b0      	cmp	r0, r6
 800b25c:	dbe7      	blt.n	800b22e <__gethex+0x3ea>
 800b25e:	e7f0      	b.n	800b242 <__gethex+0x3fe>
 800b260:	0801205b 	.word	0x0801205b

0800b264 <L_shift>:
 800b264:	f1c2 0208 	rsb	r2, r2, #8
 800b268:	0092      	lsls	r2, r2, #2
 800b26a:	b570      	push	{r4, r5, r6, lr}
 800b26c:	f1c2 0620 	rsb	r6, r2, #32
 800b270:	6843      	ldr	r3, [r0, #4]
 800b272:	6804      	ldr	r4, [r0, #0]
 800b274:	fa03 f506 	lsl.w	r5, r3, r6
 800b278:	432c      	orrs	r4, r5
 800b27a:	40d3      	lsrs	r3, r2
 800b27c:	6004      	str	r4, [r0, #0]
 800b27e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b282:	4288      	cmp	r0, r1
 800b284:	d3f4      	bcc.n	800b270 <L_shift+0xc>
 800b286:	bd70      	pop	{r4, r5, r6, pc}

0800b288 <__match>:
 800b288:	b530      	push	{r4, r5, lr}
 800b28a:	6803      	ldr	r3, [r0, #0]
 800b28c:	3301      	adds	r3, #1
 800b28e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b292:	b914      	cbnz	r4, 800b29a <__match+0x12>
 800b294:	6003      	str	r3, [r0, #0]
 800b296:	2001      	movs	r0, #1
 800b298:	bd30      	pop	{r4, r5, pc}
 800b29a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b29e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b2a2:	2d19      	cmp	r5, #25
 800b2a4:	bf98      	it	ls
 800b2a6:	3220      	addls	r2, #32
 800b2a8:	42a2      	cmp	r2, r4
 800b2aa:	d0f0      	beq.n	800b28e <__match+0x6>
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	e7f3      	b.n	800b298 <__match+0x10>

0800b2b0 <__hexnan>:
 800b2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b4:	680b      	ldr	r3, [r1, #0]
 800b2b6:	6801      	ldr	r1, [r0, #0]
 800b2b8:	115e      	asrs	r6, r3, #5
 800b2ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b2be:	f013 031f 	ands.w	r3, r3, #31
 800b2c2:	b087      	sub	sp, #28
 800b2c4:	bf18      	it	ne
 800b2c6:	3604      	addne	r6, #4
 800b2c8:	2500      	movs	r5, #0
 800b2ca:	1f37      	subs	r7, r6, #4
 800b2cc:	4682      	mov	sl, r0
 800b2ce:	4690      	mov	r8, r2
 800b2d0:	9301      	str	r3, [sp, #4]
 800b2d2:	f846 5c04 	str.w	r5, [r6, #-4]
 800b2d6:	46b9      	mov	r9, r7
 800b2d8:	463c      	mov	r4, r7
 800b2da:	9502      	str	r5, [sp, #8]
 800b2dc:	46ab      	mov	fp, r5
 800b2de:	784a      	ldrb	r2, [r1, #1]
 800b2e0:	1c4b      	adds	r3, r1, #1
 800b2e2:	9303      	str	r3, [sp, #12]
 800b2e4:	b342      	cbz	r2, 800b338 <__hexnan+0x88>
 800b2e6:	4610      	mov	r0, r2
 800b2e8:	9105      	str	r1, [sp, #20]
 800b2ea:	9204      	str	r2, [sp, #16]
 800b2ec:	f7ff fd94 	bl	800ae18 <__hexdig_fun>
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	d151      	bne.n	800b398 <__hexnan+0xe8>
 800b2f4:	9a04      	ldr	r2, [sp, #16]
 800b2f6:	9905      	ldr	r1, [sp, #20]
 800b2f8:	2a20      	cmp	r2, #32
 800b2fa:	d818      	bhi.n	800b32e <__hexnan+0x7e>
 800b2fc:	9b02      	ldr	r3, [sp, #8]
 800b2fe:	459b      	cmp	fp, r3
 800b300:	dd13      	ble.n	800b32a <__hexnan+0x7a>
 800b302:	454c      	cmp	r4, r9
 800b304:	d206      	bcs.n	800b314 <__hexnan+0x64>
 800b306:	2d07      	cmp	r5, #7
 800b308:	dc04      	bgt.n	800b314 <__hexnan+0x64>
 800b30a:	462a      	mov	r2, r5
 800b30c:	4649      	mov	r1, r9
 800b30e:	4620      	mov	r0, r4
 800b310:	f7ff ffa8 	bl	800b264 <L_shift>
 800b314:	4544      	cmp	r4, r8
 800b316:	d952      	bls.n	800b3be <__hexnan+0x10e>
 800b318:	2300      	movs	r3, #0
 800b31a:	f1a4 0904 	sub.w	r9, r4, #4
 800b31e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b322:	f8cd b008 	str.w	fp, [sp, #8]
 800b326:	464c      	mov	r4, r9
 800b328:	461d      	mov	r5, r3
 800b32a:	9903      	ldr	r1, [sp, #12]
 800b32c:	e7d7      	b.n	800b2de <__hexnan+0x2e>
 800b32e:	2a29      	cmp	r2, #41	@ 0x29
 800b330:	d157      	bne.n	800b3e2 <__hexnan+0x132>
 800b332:	3102      	adds	r1, #2
 800b334:	f8ca 1000 	str.w	r1, [sl]
 800b338:	f1bb 0f00 	cmp.w	fp, #0
 800b33c:	d051      	beq.n	800b3e2 <__hexnan+0x132>
 800b33e:	454c      	cmp	r4, r9
 800b340:	d206      	bcs.n	800b350 <__hexnan+0xa0>
 800b342:	2d07      	cmp	r5, #7
 800b344:	dc04      	bgt.n	800b350 <__hexnan+0xa0>
 800b346:	462a      	mov	r2, r5
 800b348:	4649      	mov	r1, r9
 800b34a:	4620      	mov	r0, r4
 800b34c:	f7ff ff8a 	bl	800b264 <L_shift>
 800b350:	4544      	cmp	r4, r8
 800b352:	d936      	bls.n	800b3c2 <__hexnan+0x112>
 800b354:	f1a8 0204 	sub.w	r2, r8, #4
 800b358:	4623      	mov	r3, r4
 800b35a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b35e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b362:	429f      	cmp	r7, r3
 800b364:	d2f9      	bcs.n	800b35a <__hexnan+0xaa>
 800b366:	1b3b      	subs	r3, r7, r4
 800b368:	f023 0303 	bic.w	r3, r3, #3
 800b36c:	3304      	adds	r3, #4
 800b36e:	3401      	adds	r4, #1
 800b370:	3e03      	subs	r6, #3
 800b372:	42b4      	cmp	r4, r6
 800b374:	bf88      	it	hi
 800b376:	2304      	movhi	r3, #4
 800b378:	4443      	add	r3, r8
 800b37a:	2200      	movs	r2, #0
 800b37c:	f843 2b04 	str.w	r2, [r3], #4
 800b380:	429f      	cmp	r7, r3
 800b382:	d2fb      	bcs.n	800b37c <__hexnan+0xcc>
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	b91b      	cbnz	r3, 800b390 <__hexnan+0xe0>
 800b388:	4547      	cmp	r7, r8
 800b38a:	d128      	bne.n	800b3de <__hexnan+0x12e>
 800b38c:	2301      	movs	r3, #1
 800b38e:	603b      	str	r3, [r7, #0]
 800b390:	2005      	movs	r0, #5
 800b392:	b007      	add	sp, #28
 800b394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b398:	3501      	adds	r5, #1
 800b39a:	2d08      	cmp	r5, #8
 800b39c:	f10b 0b01 	add.w	fp, fp, #1
 800b3a0:	dd06      	ble.n	800b3b0 <__hexnan+0x100>
 800b3a2:	4544      	cmp	r4, r8
 800b3a4:	d9c1      	bls.n	800b32a <__hexnan+0x7a>
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b3ac:	2501      	movs	r5, #1
 800b3ae:	3c04      	subs	r4, #4
 800b3b0:	6822      	ldr	r2, [r4, #0]
 800b3b2:	f000 000f 	and.w	r0, r0, #15
 800b3b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b3ba:	6020      	str	r0, [r4, #0]
 800b3bc:	e7b5      	b.n	800b32a <__hexnan+0x7a>
 800b3be:	2508      	movs	r5, #8
 800b3c0:	e7b3      	b.n	800b32a <__hexnan+0x7a>
 800b3c2:	9b01      	ldr	r3, [sp, #4]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d0dd      	beq.n	800b384 <__hexnan+0xd4>
 800b3c8:	f1c3 0320 	rsb	r3, r3, #32
 800b3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b3d0:	40da      	lsrs	r2, r3
 800b3d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b3d6:	4013      	ands	r3, r2
 800b3d8:	f846 3c04 	str.w	r3, [r6, #-4]
 800b3dc:	e7d2      	b.n	800b384 <__hexnan+0xd4>
 800b3de:	3f04      	subs	r7, #4
 800b3e0:	e7d0      	b.n	800b384 <__hexnan+0xd4>
 800b3e2:	2004      	movs	r0, #4
 800b3e4:	e7d5      	b.n	800b392 <__hexnan+0xe2>
	...

0800b3e8 <malloc>:
 800b3e8:	4b02      	ldr	r3, [pc, #8]	@ (800b3f4 <malloc+0xc>)
 800b3ea:	4601      	mov	r1, r0
 800b3ec:	6818      	ldr	r0, [r3, #0]
 800b3ee:	f000 b825 	b.w	800b43c <_malloc_r>
 800b3f2:	bf00      	nop
 800b3f4:	200001bc 	.word	0x200001bc

0800b3f8 <sbrk_aligned>:
 800b3f8:	b570      	push	{r4, r5, r6, lr}
 800b3fa:	4e0f      	ldr	r6, [pc, #60]	@ (800b438 <sbrk_aligned+0x40>)
 800b3fc:	460c      	mov	r4, r1
 800b3fe:	6831      	ldr	r1, [r6, #0]
 800b400:	4605      	mov	r5, r0
 800b402:	b911      	cbnz	r1, 800b40a <sbrk_aligned+0x12>
 800b404:	f001 f822 	bl	800c44c <_sbrk_r>
 800b408:	6030      	str	r0, [r6, #0]
 800b40a:	4621      	mov	r1, r4
 800b40c:	4628      	mov	r0, r5
 800b40e:	f001 f81d 	bl	800c44c <_sbrk_r>
 800b412:	1c43      	adds	r3, r0, #1
 800b414:	d103      	bne.n	800b41e <sbrk_aligned+0x26>
 800b416:	f04f 34ff 	mov.w	r4, #4294967295
 800b41a:	4620      	mov	r0, r4
 800b41c:	bd70      	pop	{r4, r5, r6, pc}
 800b41e:	1cc4      	adds	r4, r0, #3
 800b420:	f024 0403 	bic.w	r4, r4, #3
 800b424:	42a0      	cmp	r0, r4
 800b426:	d0f8      	beq.n	800b41a <sbrk_aligned+0x22>
 800b428:	1a21      	subs	r1, r4, r0
 800b42a:	4628      	mov	r0, r5
 800b42c:	f001 f80e 	bl	800c44c <_sbrk_r>
 800b430:	3001      	adds	r0, #1
 800b432:	d1f2      	bne.n	800b41a <sbrk_aligned+0x22>
 800b434:	e7ef      	b.n	800b416 <sbrk_aligned+0x1e>
 800b436:	bf00      	nop
 800b438:	200028a8 	.word	0x200028a8

0800b43c <_malloc_r>:
 800b43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b440:	1ccd      	adds	r5, r1, #3
 800b442:	f025 0503 	bic.w	r5, r5, #3
 800b446:	3508      	adds	r5, #8
 800b448:	2d0c      	cmp	r5, #12
 800b44a:	bf38      	it	cc
 800b44c:	250c      	movcc	r5, #12
 800b44e:	2d00      	cmp	r5, #0
 800b450:	4606      	mov	r6, r0
 800b452:	db01      	blt.n	800b458 <_malloc_r+0x1c>
 800b454:	42a9      	cmp	r1, r5
 800b456:	d904      	bls.n	800b462 <_malloc_r+0x26>
 800b458:	230c      	movs	r3, #12
 800b45a:	6033      	str	r3, [r6, #0]
 800b45c:	2000      	movs	r0, #0
 800b45e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b462:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b538 <_malloc_r+0xfc>
 800b466:	f000 f87b 	bl	800b560 <__malloc_lock>
 800b46a:	f8d8 3000 	ldr.w	r3, [r8]
 800b46e:	461c      	mov	r4, r3
 800b470:	bb44      	cbnz	r4, 800b4c4 <_malloc_r+0x88>
 800b472:	4629      	mov	r1, r5
 800b474:	4630      	mov	r0, r6
 800b476:	f7ff ffbf 	bl	800b3f8 <sbrk_aligned>
 800b47a:	1c43      	adds	r3, r0, #1
 800b47c:	4604      	mov	r4, r0
 800b47e:	d158      	bne.n	800b532 <_malloc_r+0xf6>
 800b480:	f8d8 4000 	ldr.w	r4, [r8]
 800b484:	4627      	mov	r7, r4
 800b486:	2f00      	cmp	r7, #0
 800b488:	d143      	bne.n	800b512 <_malloc_r+0xd6>
 800b48a:	2c00      	cmp	r4, #0
 800b48c:	d04b      	beq.n	800b526 <_malloc_r+0xea>
 800b48e:	6823      	ldr	r3, [r4, #0]
 800b490:	4639      	mov	r1, r7
 800b492:	4630      	mov	r0, r6
 800b494:	eb04 0903 	add.w	r9, r4, r3
 800b498:	f000 ffd8 	bl	800c44c <_sbrk_r>
 800b49c:	4581      	cmp	r9, r0
 800b49e:	d142      	bne.n	800b526 <_malloc_r+0xea>
 800b4a0:	6821      	ldr	r1, [r4, #0]
 800b4a2:	1a6d      	subs	r5, r5, r1
 800b4a4:	4629      	mov	r1, r5
 800b4a6:	4630      	mov	r0, r6
 800b4a8:	f7ff ffa6 	bl	800b3f8 <sbrk_aligned>
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	d03a      	beq.n	800b526 <_malloc_r+0xea>
 800b4b0:	6823      	ldr	r3, [r4, #0]
 800b4b2:	442b      	add	r3, r5
 800b4b4:	6023      	str	r3, [r4, #0]
 800b4b6:	f8d8 3000 	ldr.w	r3, [r8]
 800b4ba:	685a      	ldr	r2, [r3, #4]
 800b4bc:	bb62      	cbnz	r2, 800b518 <_malloc_r+0xdc>
 800b4be:	f8c8 7000 	str.w	r7, [r8]
 800b4c2:	e00f      	b.n	800b4e4 <_malloc_r+0xa8>
 800b4c4:	6822      	ldr	r2, [r4, #0]
 800b4c6:	1b52      	subs	r2, r2, r5
 800b4c8:	d420      	bmi.n	800b50c <_malloc_r+0xd0>
 800b4ca:	2a0b      	cmp	r2, #11
 800b4cc:	d917      	bls.n	800b4fe <_malloc_r+0xc2>
 800b4ce:	1961      	adds	r1, r4, r5
 800b4d0:	42a3      	cmp	r3, r4
 800b4d2:	6025      	str	r5, [r4, #0]
 800b4d4:	bf18      	it	ne
 800b4d6:	6059      	strne	r1, [r3, #4]
 800b4d8:	6863      	ldr	r3, [r4, #4]
 800b4da:	bf08      	it	eq
 800b4dc:	f8c8 1000 	streq.w	r1, [r8]
 800b4e0:	5162      	str	r2, [r4, r5]
 800b4e2:	604b      	str	r3, [r1, #4]
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	f000 f841 	bl	800b56c <__malloc_unlock>
 800b4ea:	f104 000b 	add.w	r0, r4, #11
 800b4ee:	1d23      	adds	r3, r4, #4
 800b4f0:	f020 0007 	bic.w	r0, r0, #7
 800b4f4:	1ac2      	subs	r2, r0, r3
 800b4f6:	bf1c      	itt	ne
 800b4f8:	1a1b      	subne	r3, r3, r0
 800b4fa:	50a3      	strne	r3, [r4, r2]
 800b4fc:	e7af      	b.n	800b45e <_malloc_r+0x22>
 800b4fe:	6862      	ldr	r2, [r4, #4]
 800b500:	42a3      	cmp	r3, r4
 800b502:	bf0c      	ite	eq
 800b504:	f8c8 2000 	streq.w	r2, [r8]
 800b508:	605a      	strne	r2, [r3, #4]
 800b50a:	e7eb      	b.n	800b4e4 <_malloc_r+0xa8>
 800b50c:	4623      	mov	r3, r4
 800b50e:	6864      	ldr	r4, [r4, #4]
 800b510:	e7ae      	b.n	800b470 <_malloc_r+0x34>
 800b512:	463c      	mov	r4, r7
 800b514:	687f      	ldr	r7, [r7, #4]
 800b516:	e7b6      	b.n	800b486 <_malloc_r+0x4a>
 800b518:	461a      	mov	r2, r3
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	42a3      	cmp	r3, r4
 800b51e:	d1fb      	bne.n	800b518 <_malloc_r+0xdc>
 800b520:	2300      	movs	r3, #0
 800b522:	6053      	str	r3, [r2, #4]
 800b524:	e7de      	b.n	800b4e4 <_malloc_r+0xa8>
 800b526:	230c      	movs	r3, #12
 800b528:	6033      	str	r3, [r6, #0]
 800b52a:	4630      	mov	r0, r6
 800b52c:	f000 f81e 	bl	800b56c <__malloc_unlock>
 800b530:	e794      	b.n	800b45c <_malloc_r+0x20>
 800b532:	6005      	str	r5, [r0, #0]
 800b534:	e7d6      	b.n	800b4e4 <_malloc_r+0xa8>
 800b536:	bf00      	nop
 800b538:	200028ac 	.word	0x200028ac

0800b53c <__ascii_mbtowc>:
 800b53c:	b082      	sub	sp, #8
 800b53e:	b901      	cbnz	r1, 800b542 <__ascii_mbtowc+0x6>
 800b540:	a901      	add	r1, sp, #4
 800b542:	b142      	cbz	r2, 800b556 <__ascii_mbtowc+0x1a>
 800b544:	b14b      	cbz	r3, 800b55a <__ascii_mbtowc+0x1e>
 800b546:	7813      	ldrb	r3, [r2, #0]
 800b548:	600b      	str	r3, [r1, #0]
 800b54a:	7812      	ldrb	r2, [r2, #0]
 800b54c:	1e10      	subs	r0, r2, #0
 800b54e:	bf18      	it	ne
 800b550:	2001      	movne	r0, #1
 800b552:	b002      	add	sp, #8
 800b554:	4770      	bx	lr
 800b556:	4610      	mov	r0, r2
 800b558:	e7fb      	b.n	800b552 <__ascii_mbtowc+0x16>
 800b55a:	f06f 0001 	mvn.w	r0, #1
 800b55e:	e7f8      	b.n	800b552 <__ascii_mbtowc+0x16>

0800b560 <__malloc_lock>:
 800b560:	4801      	ldr	r0, [pc, #4]	@ (800b568 <__malloc_lock+0x8>)
 800b562:	f7fe bd2a 	b.w	8009fba <__retarget_lock_acquire_recursive>
 800b566:	bf00      	nop
 800b568:	200028a4 	.word	0x200028a4

0800b56c <__malloc_unlock>:
 800b56c:	4801      	ldr	r0, [pc, #4]	@ (800b574 <__malloc_unlock+0x8>)
 800b56e:	f7fe bd25 	b.w	8009fbc <__retarget_lock_release_recursive>
 800b572:	bf00      	nop
 800b574:	200028a4 	.word	0x200028a4

0800b578 <_Balloc>:
 800b578:	b570      	push	{r4, r5, r6, lr}
 800b57a:	69c6      	ldr	r6, [r0, #28]
 800b57c:	4604      	mov	r4, r0
 800b57e:	460d      	mov	r5, r1
 800b580:	b976      	cbnz	r6, 800b5a0 <_Balloc+0x28>
 800b582:	2010      	movs	r0, #16
 800b584:	f7ff ff30 	bl	800b3e8 <malloc>
 800b588:	4602      	mov	r2, r0
 800b58a:	61e0      	str	r0, [r4, #28]
 800b58c:	b920      	cbnz	r0, 800b598 <_Balloc+0x20>
 800b58e:	4b18      	ldr	r3, [pc, #96]	@ (800b5f0 <_Balloc+0x78>)
 800b590:	4818      	ldr	r0, [pc, #96]	@ (800b5f4 <_Balloc+0x7c>)
 800b592:	216b      	movs	r1, #107	@ 0x6b
 800b594:	f7fe fd3a 	bl	800a00c <__assert_func>
 800b598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b59c:	6006      	str	r6, [r0, #0]
 800b59e:	60c6      	str	r6, [r0, #12]
 800b5a0:	69e6      	ldr	r6, [r4, #28]
 800b5a2:	68f3      	ldr	r3, [r6, #12]
 800b5a4:	b183      	cbz	r3, 800b5c8 <_Balloc+0x50>
 800b5a6:	69e3      	ldr	r3, [r4, #28]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5ae:	b9b8      	cbnz	r0, 800b5e0 <_Balloc+0x68>
 800b5b0:	2101      	movs	r1, #1
 800b5b2:	fa01 f605 	lsl.w	r6, r1, r5
 800b5b6:	1d72      	adds	r2, r6, #5
 800b5b8:	0092      	lsls	r2, r2, #2
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f000 ff5d 	bl	800c47a <_calloc_r>
 800b5c0:	b160      	cbz	r0, 800b5dc <_Balloc+0x64>
 800b5c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5c6:	e00e      	b.n	800b5e6 <_Balloc+0x6e>
 800b5c8:	2221      	movs	r2, #33	@ 0x21
 800b5ca:	2104      	movs	r1, #4
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	f000 ff54 	bl	800c47a <_calloc_r>
 800b5d2:	69e3      	ldr	r3, [r4, #28]
 800b5d4:	60f0      	str	r0, [r6, #12]
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1e4      	bne.n	800b5a6 <_Balloc+0x2e>
 800b5dc:	2000      	movs	r0, #0
 800b5de:	bd70      	pop	{r4, r5, r6, pc}
 800b5e0:	6802      	ldr	r2, [r0, #0]
 800b5e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5ec:	e7f7      	b.n	800b5de <_Balloc+0x66>
 800b5ee:	bf00      	nop
 800b5f0:	08011f41 	.word	0x08011f41
 800b5f4:	080120cc 	.word	0x080120cc

0800b5f8 <_Bfree>:
 800b5f8:	b570      	push	{r4, r5, r6, lr}
 800b5fa:	69c6      	ldr	r6, [r0, #28]
 800b5fc:	4605      	mov	r5, r0
 800b5fe:	460c      	mov	r4, r1
 800b600:	b976      	cbnz	r6, 800b620 <_Bfree+0x28>
 800b602:	2010      	movs	r0, #16
 800b604:	f7ff fef0 	bl	800b3e8 <malloc>
 800b608:	4602      	mov	r2, r0
 800b60a:	61e8      	str	r0, [r5, #28]
 800b60c:	b920      	cbnz	r0, 800b618 <_Bfree+0x20>
 800b60e:	4b09      	ldr	r3, [pc, #36]	@ (800b634 <_Bfree+0x3c>)
 800b610:	4809      	ldr	r0, [pc, #36]	@ (800b638 <_Bfree+0x40>)
 800b612:	218f      	movs	r1, #143	@ 0x8f
 800b614:	f7fe fcfa 	bl	800a00c <__assert_func>
 800b618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b61c:	6006      	str	r6, [r0, #0]
 800b61e:	60c6      	str	r6, [r0, #12]
 800b620:	b13c      	cbz	r4, 800b632 <_Bfree+0x3a>
 800b622:	69eb      	ldr	r3, [r5, #28]
 800b624:	6862      	ldr	r2, [r4, #4]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b62c:	6021      	str	r1, [r4, #0]
 800b62e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b632:	bd70      	pop	{r4, r5, r6, pc}
 800b634:	08011f41 	.word	0x08011f41
 800b638:	080120cc 	.word	0x080120cc

0800b63c <__multadd>:
 800b63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b640:	690d      	ldr	r5, [r1, #16]
 800b642:	4607      	mov	r7, r0
 800b644:	460c      	mov	r4, r1
 800b646:	461e      	mov	r6, r3
 800b648:	f101 0c14 	add.w	ip, r1, #20
 800b64c:	2000      	movs	r0, #0
 800b64e:	f8dc 3000 	ldr.w	r3, [ip]
 800b652:	b299      	uxth	r1, r3
 800b654:	fb02 6101 	mla	r1, r2, r1, r6
 800b658:	0c1e      	lsrs	r6, r3, #16
 800b65a:	0c0b      	lsrs	r3, r1, #16
 800b65c:	fb02 3306 	mla	r3, r2, r6, r3
 800b660:	b289      	uxth	r1, r1
 800b662:	3001      	adds	r0, #1
 800b664:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b668:	4285      	cmp	r5, r0
 800b66a:	f84c 1b04 	str.w	r1, [ip], #4
 800b66e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b672:	dcec      	bgt.n	800b64e <__multadd+0x12>
 800b674:	b30e      	cbz	r6, 800b6ba <__multadd+0x7e>
 800b676:	68a3      	ldr	r3, [r4, #8]
 800b678:	42ab      	cmp	r3, r5
 800b67a:	dc19      	bgt.n	800b6b0 <__multadd+0x74>
 800b67c:	6861      	ldr	r1, [r4, #4]
 800b67e:	4638      	mov	r0, r7
 800b680:	3101      	adds	r1, #1
 800b682:	f7ff ff79 	bl	800b578 <_Balloc>
 800b686:	4680      	mov	r8, r0
 800b688:	b928      	cbnz	r0, 800b696 <__multadd+0x5a>
 800b68a:	4602      	mov	r2, r0
 800b68c:	4b0c      	ldr	r3, [pc, #48]	@ (800b6c0 <__multadd+0x84>)
 800b68e:	480d      	ldr	r0, [pc, #52]	@ (800b6c4 <__multadd+0x88>)
 800b690:	21ba      	movs	r1, #186	@ 0xba
 800b692:	f7fe fcbb 	bl	800a00c <__assert_func>
 800b696:	6922      	ldr	r2, [r4, #16]
 800b698:	3202      	adds	r2, #2
 800b69a:	f104 010c 	add.w	r1, r4, #12
 800b69e:	0092      	lsls	r2, r2, #2
 800b6a0:	300c      	adds	r0, #12
 800b6a2:	f7fe fc94 	bl	8009fce <memcpy>
 800b6a6:	4621      	mov	r1, r4
 800b6a8:	4638      	mov	r0, r7
 800b6aa:	f7ff ffa5 	bl	800b5f8 <_Bfree>
 800b6ae:	4644      	mov	r4, r8
 800b6b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6b4:	3501      	adds	r5, #1
 800b6b6:	615e      	str	r6, [r3, #20]
 800b6b8:	6125      	str	r5, [r4, #16]
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6c0:	0801205b 	.word	0x0801205b
 800b6c4:	080120cc 	.word	0x080120cc

0800b6c8 <__s2b>:
 800b6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6cc:	460c      	mov	r4, r1
 800b6ce:	4615      	mov	r5, r2
 800b6d0:	461f      	mov	r7, r3
 800b6d2:	2209      	movs	r2, #9
 800b6d4:	3308      	adds	r3, #8
 800b6d6:	4606      	mov	r6, r0
 800b6d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6dc:	2100      	movs	r1, #0
 800b6de:	2201      	movs	r2, #1
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	db09      	blt.n	800b6f8 <__s2b+0x30>
 800b6e4:	4630      	mov	r0, r6
 800b6e6:	f7ff ff47 	bl	800b578 <_Balloc>
 800b6ea:	b940      	cbnz	r0, 800b6fe <__s2b+0x36>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	4b19      	ldr	r3, [pc, #100]	@ (800b754 <__s2b+0x8c>)
 800b6f0:	4819      	ldr	r0, [pc, #100]	@ (800b758 <__s2b+0x90>)
 800b6f2:	21d3      	movs	r1, #211	@ 0xd3
 800b6f4:	f7fe fc8a 	bl	800a00c <__assert_func>
 800b6f8:	0052      	lsls	r2, r2, #1
 800b6fa:	3101      	adds	r1, #1
 800b6fc:	e7f0      	b.n	800b6e0 <__s2b+0x18>
 800b6fe:	9b08      	ldr	r3, [sp, #32]
 800b700:	6143      	str	r3, [r0, #20]
 800b702:	2d09      	cmp	r5, #9
 800b704:	f04f 0301 	mov.w	r3, #1
 800b708:	6103      	str	r3, [r0, #16]
 800b70a:	dd16      	ble.n	800b73a <__s2b+0x72>
 800b70c:	f104 0909 	add.w	r9, r4, #9
 800b710:	46c8      	mov	r8, r9
 800b712:	442c      	add	r4, r5
 800b714:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b718:	4601      	mov	r1, r0
 800b71a:	3b30      	subs	r3, #48	@ 0x30
 800b71c:	220a      	movs	r2, #10
 800b71e:	4630      	mov	r0, r6
 800b720:	f7ff ff8c 	bl	800b63c <__multadd>
 800b724:	45a0      	cmp	r8, r4
 800b726:	d1f5      	bne.n	800b714 <__s2b+0x4c>
 800b728:	f1a5 0408 	sub.w	r4, r5, #8
 800b72c:	444c      	add	r4, r9
 800b72e:	1b2d      	subs	r5, r5, r4
 800b730:	1963      	adds	r3, r4, r5
 800b732:	42bb      	cmp	r3, r7
 800b734:	db04      	blt.n	800b740 <__s2b+0x78>
 800b736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b73a:	340a      	adds	r4, #10
 800b73c:	2509      	movs	r5, #9
 800b73e:	e7f6      	b.n	800b72e <__s2b+0x66>
 800b740:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b744:	4601      	mov	r1, r0
 800b746:	3b30      	subs	r3, #48	@ 0x30
 800b748:	220a      	movs	r2, #10
 800b74a:	4630      	mov	r0, r6
 800b74c:	f7ff ff76 	bl	800b63c <__multadd>
 800b750:	e7ee      	b.n	800b730 <__s2b+0x68>
 800b752:	bf00      	nop
 800b754:	0801205b 	.word	0x0801205b
 800b758:	080120cc 	.word	0x080120cc

0800b75c <__hi0bits>:
 800b75c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b760:	4603      	mov	r3, r0
 800b762:	bf36      	itet	cc
 800b764:	0403      	lslcc	r3, r0, #16
 800b766:	2000      	movcs	r0, #0
 800b768:	2010      	movcc	r0, #16
 800b76a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b76e:	bf3c      	itt	cc
 800b770:	021b      	lslcc	r3, r3, #8
 800b772:	3008      	addcc	r0, #8
 800b774:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b778:	bf3c      	itt	cc
 800b77a:	011b      	lslcc	r3, r3, #4
 800b77c:	3004      	addcc	r0, #4
 800b77e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b782:	bf3c      	itt	cc
 800b784:	009b      	lslcc	r3, r3, #2
 800b786:	3002      	addcc	r0, #2
 800b788:	2b00      	cmp	r3, #0
 800b78a:	db05      	blt.n	800b798 <__hi0bits+0x3c>
 800b78c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b790:	f100 0001 	add.w	r0, r0, #1
 800b794:	bf08      	it	eq
 800b796:	2020      	moveq	r0, #32
 800b798:	4770      	bx	lr

0800b79a <__lo0bits>:
 800b79a:	6803      	ldr	r3, [r0, #0]
 800b79c:	4602      	mov	r2, r0
 800b79e:	f013 0007 	ands.w	r0, r3, #7
 800b7a2:	d00b      	beq.n	800b7bc <__lo0bits+0x22>
 800b7a4:	07d9      	lsls	r1, r3, #31
 800b7a6:	d421      	bmi.n	800b7ec <__lo0bits+0x52>
 800b7a8:	0798      	lsls	r0, r3, #30
 800b7aa:	bf49      	itett	mi
 800b7ac:	085b      	lsrmi	r3, r3, #1
 800b7ae:	089b      	lsrpl	r3, r3, #2
 800b7b0:	2001      	movmi	r0, #1
 800b7b2:	6013      	strmi	r3, [r2, #0]
 800b7b4:	bf5c      	itt	pl
 800b7b6:	6013      	strpl	r3, [r2, #0]
 800b7b8:	2002      	movpl	r0, #2
 800b7ba:	4770      	bx	lr
 800b7bc:	b299      	uxth	r1, r3
 800b7be:	b909      	cbnz	r1, 800b7c4 <__lo0bits+0x2a>
 800b7c0:	0c1b      	lsrs	r3, r3, #16
 800b7c2:	2010      	movs	r0, #16
 800b7c4:	b2d9      	uxtb	r1, r3
 800b7c6:	b909      	cbnz	r1, 800b7cc <__lo0bits+0x32>
 800b7c8:	3008      	adds	r0, #8
 800b7ca:	0a1b      	lsrs	r3, r3, #8
 800b7cc:	0719      	lsls	r1, r3, #28
 800b7ce:	bf04      	itt	eq
 800b7d0:	091b      	lsreq	r3, r3, #4
 800b7d2:	3004      	addeq	r0, #4
 800b7d4:	0799      	lsls	r1, r3, #30
 800b7d6:	bf04      	itt	eq
 800b7d8:	089b      	lsreq	r3, r3, #2
 800b7da:	3002      	addeq	r0, #2
 800b7dc:	07d9      	lsls	r1, r3, #31
 800b7de:	d403      	bmi.n	800b7e8 <__lo0bits+0x4e>
 800b7e0:	085b      	lsrs	r3, r3, #1
 800b7e2:	f100 0001 	add.w	r0, r0, #1
 800b7e6:	d003      	beq.n	800b7f0 <__lo0bits+0x56>
 800b7e8:	6013      	str	r3, [r2, #0]
 800b7ea:	4770      	bx	lr
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	4770      	bx	lr
 800b7f0:	2020      	movs	r0, #32
 800b7f2:	4770      	bx	lr

0800b7f4 <__i2b>:
 800b7f4:	b510      	push	{r4, lr}
 800b7f6:	460c      	mov	r4, r1
 800b7f8:	2101      	movs	r1, #1
 800b7fa:	f7ff febd 	bl	800b578 <_Balloc>
 800b7fe:	4602      	mov	r2, r0
 800b800:	b928      	cbnz	r0, 800b80e <__i2b+0x1a>
 800b802:	4b05      	ldr	r3, [pc, #20]	@ (800b818 <__i2b+0x24>)
 800b804:	4805      	ldr	r0, [pc, #20]	@ (800b81c <__i2b+0x28>)
 800b806:	f240 1145 	movw	r1, #325	@ 0x145
 800b80a:	f7fe fbff 	bl	800a00c <__assert_func>
 800b80e:	2301      	movs	r3, #1
 800b810:	6144      	str	r4, [r0, #20]
 800b812:	6103      	str	r3, [r0, #16]
 800b814:	bd10      	pop	{r4, pc}
 800b816:	bf00      	nop
 800b818:	0801205b 	.word	0x0801205b
 800b81c:	080120cc 	.word	0x080120cc

0800b820 <__multiply>:
 800b820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b824:	4614      	mov	r4, r2
 800b826:	690a      	ldr	r2, [r1, #16]
 800b828:	6923      	ldr	r3, [r4, #16]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	bfa8      	it	ge
 800b82e:	4623      	movge	r3, r4
 800b830:	460f      	mov	r7, r1
 800b832:	bfa4      	itt	ge
 800b834:	460c      	movge	r4, r1
 800b836:	461f      	movge	r7, r3
 800b838:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b83c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b840:	68a3      	ldr	r3, [r4, #8]
 800b842:	6861      	ldr	r1, [r4, #4]
 800b844:	eb0a 0609 	add.w	r6, sl, r9
 800b848:	42b3      	cmp	r3, r6
 800b84a:	b085      	sub	sp, #20
 800b84c:	bfb8      	it	lt
 800b84e:	3101      	addlt	r1, #1
 800b850:	f7ff fe92 	bl	800b578 <_Balloc>
 800b854:	b930      	cbnz	r0, 800b864 <__multiply+0x44>
 800b856:	4602      	mov	r2, r0
 800b858:	4b44      	ldr	r3, [pc, #272]	@ (800b96c <__multiply+0x14c>)
 800b85a:	4845      	ldr	r0, [pc, #276]	@ (800b970 <__multiply+0x150>)
 800b85c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b860:	f7fe fbd4 	bl	800a00c <__assert_func>
 800b864:	f100 0514 	add.w	r5, r0, #20
 800b868:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b86c:	462b      	mov	r3, r5
 800b86e:	2200      	movs	r2, #0
 800b870:	4543      	cmp	r3, r8
 800b872:	d321      	bcc.n	800b8b8 <__multiply+0x98>
 800b874:	f107 0114 	add.w	r1, r7, #20
 800b878:	f104 0214 	add.w	r2, r4, #20
 800b87c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b880:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b884:	9302      	str	r3, [sp, #8]
 800b886:	1b13      	subs	r3, r2, r4
 800b888:	3b15      	subs	r3, #21
 800b88a:	f023 0303 	bic.w	r3, r3, #3
 800b88e:	3304      	adds	r3, #4
 800b890:	f104 0715 	add.w	r7, r4, #21
 800b894:	42ba      	cmp	r2, r7
 800b896:	bf38      	it	cc
 800b898:	2304      	movcc	r3, #4
 800b89a:	9301      	str	r3, [sp, #4]
 800b89c:	9b02      	ldr	r3, [sp, #8]
 800b89e:	9103      	str	r1, [sp, #12]
 800b8a0:	428b      	cmp	r3, r1
 800b8a2:	d80c      	bhi.n	800b8be <__multiply+0x9e>
 800b8a4:	2e00      	cmp	r6, #0
 800b8a6:	dd03      	ble.n	800b8b0 <__multiply+0x90>
 800b8a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d05b      	beq.n	800b968 <__multiply+0x148>
 800b8b0:	6106      	str	r6, [r0, #16]
 800b8b2:	b005      	add	sp, #20
 800b8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b8:	f843 2b04 	str.w	r2, [r3], #4
 800b8bc:	e7d8      	b.n	800b870 <__multiply+0x50>
 800b8be:	f8b1 a000 	ldrh.w	sl, [r1]
 800b8c2:	f1ba 0f00 	cmp.w	sl, #0
 800b8c6:	d024      	beq.n	800b912 <__multiply+0xf2>
 800b8c8:	f104 0e14 	add.w	lr, r4, #20
 800b8cc:	46a9      	mov	r9, r5
 800b8ce:	f04f 0c00 	mov.w	ip, #0
 800b8d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b8d6:	f8d9 3000 	ldr.w	r3, [r9]
 800b8da:	fa1f fb87 	uxth.w	fp, r7
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	fb0a 330b 	mla	r3, sl, fp, r3
 800b8e4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b8e8:	f8d9 7000 	ldr.w	r7, [r9]
 800b8ec:	4463      	add	r3, ip
 800b8ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b8f2:	fb0a c70b 	mla	r7, sl, fp, ip
 800b8f6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b900:	4572      	cmp	r2, lr
 800b902:	f849 3b04 	str.w	r3, [r9], #4
 800b906:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b90a:	d8e2      	bhi.n	800b8d2 <__multiply+0xb2>
 800b90c:	9b01      	ldr	r3, [sp, #4]
 800b90e:	f845 c003 	str.w	ip, [r5, r3]
 800b912:	9b03      	ldr	r3, [sp, #12]
 800b914:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b918:	3104      	adds	r1, #4
 800b91a:	f1b9 0f00 	cmp.w	r9, #0
 800b91e:	d021      	beq.n	800b964 <__multiply+0x144>
 800b920:	682b      	ldr	r3, [r5, #0]
 800b922:	f104 0c14 	add.w	ip, r4, #20
 800b926:	46ae      	mov	lr, r5
 800b928:	f04f 0a00 	mov.w	sl, #0
 800b92c:	f8bc b000 	ldrh.w	fp, [ip]
 800b930:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b934:	fb09 770b 	mla	r7, r9, fp, r7
 800b938:	4457      	add	r7, sl
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b940:	f84e 3b04 	str.w	r3, [lr], #4
 800b944:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b948:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b94c:	f8be 3000 	ldrh.w	r3, [lr]
 800b950:	fb09 330a 	mla	r3, r9, sl, r3
 800b954:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b958:	4562      	cmp	r2, ip
 800b95a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b95e:	d8e5      	bhi.n	800b92c <__multiply+0x10c>
 800b960:	9f01      	ldr	r7, [sp, #4]
 800b962:	51eb      	str	r3, [r5, r7]
 800b964:	3504      	adds	r5, #4
 800b966:	e799      	b.n	800b89c <__multiply+0x7c>
 800b968:	3e01      	subs	r6, #1
 800b96a:	e79b      	b.n	800b8a4 <__multiply+0x84>
 800b96c:	0801205b 	.word	0x0801205b
 800b970:	080120cc 	.word	0x080120cc

0800b974 <__pow5mult>:
 800b974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b978:	4615      	mov	r5, r2
 800b97a:	f012 0203 	ands.w	r2, r2, #3
 800b97e:	4607      	mov	r7, r0
 800b980:	460e      	mov	r6, r1
 800b982:	d007      	beq.n	800b994 <__pow5mult+0x20>
 800b984:	4c25      	ldr	r4, [pc, #148]	@ (800ba1c <__pow5mult+0xa8>)
 800b986:	3a01      	subs	r2, #1
 800b988:	2300      	movs	r3, #0
 800b98a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b98e:	f7ff fe55 	bl	800b63c <__multadd>
 800b992:	4606      	mov	r6, r0
 800b994:	10ad      	asrs	r5, r5, #2
 800b996:	d03d      	beq.n	800ba14 <__pow5mult+0xa0>
 800b998:	69fc      	ldr	r4, [r7, #28]
 800b99a:	b97c      	cbnz	r4, 800b9bc <__pow5mult+0x48>
 800b99c:	2010      	movs	r0, #16
 800b99e:	f7ff fd23 	bl	800b3e8 <malloc>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	61f8      	str	r0, [r7, #28]
 800b9a6:	b928      	cbnz	r0, 800b9b4 <__pow5mult+0x40>
 800b9a8:	4b1d      	ldr	r3, [pc, #116]	@ (800ba20 <__pow5mult+0xac>)
 800b9aa:	481e      	ldr	r0, [pc, #120]	@ (800ba24 <__pow5mult+0xb0>)
 800b9ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b9b0:	f7fe fb2c 	bl	800a00c <__assert_func>
 800b9b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9b8:	6004      	str	r4, [r0, #0]
 800b9ba:	60c4      	str	r4, [r0, #12]
 800b9bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b9c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9c4:	b94c      	cbnz	r4, 800b9da <__pow5mult+0x66>
 800b9c6:	f240 2171 	movw	r1, #625	@ 0x271
 800b9ca:	4638      	mov	r0, r7
 800b9cc:	f7ff ff12 	bl	800b7f4 <__i2b>
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b9d6:	4604      	mov	r4, r0
 800b9d8:	6003      	str	r3, [r0, #0]
 800b9da:	f04f 0900 	mov.w	r9, #0
 800b9de:	07eb      	lsls	r3, r5, #31
 800b9e0:	d50a      	bpl.n	800b9f8 <__pow5mult+0x84>
 800b9e2:	4631      	mov	r1, r6
 800b9e4:	4622      	mov	r2, r4
 800b9e6:	4638      	mov	r0, r7
 800b9e8:	f7ff ff1a 	bl	800b820 <__multiply>
 800b9ec:	4631      	mov	r1, r6
 800b9ee:	4680      	mov	r8, r0
 800b9f0:	4638      	mov	r0, r7
 800b9f2:	f7ff fe01 	bl	800b5f8 <_Bfree>
 800b9f6:	4646      	mov	r6, r8
 800b9f8:	106d      	asrs	r5, r5, #1
 800b9fa:	d00b      	beq.n	800ba14 <__pow5mult+0xa0>
 800b9fc:	6820      	ldr	r0, [r4, #0]
 800b9fe:	b938      	cbnz	r0, 800ba10 <__pow5mult+0x9c>
 800ba00:	4622      	mov	r2, r4
 800ba02:	4621      	mov	r1, r4
 800ba04:	4638      	mov	r0, r7
 800ba06:	f7ff ff0b 	bl	800b820 <__multiply>
 800ba0a:	6020      	str	r0, [r4, #0]
 800ba0c:	f8c0 9000 	str.w	r9, [r0]
 800ba10:	4604      	mov	r4, r0
 800ba12:	e7e4      	b.n	800b9de <__pow5mult+0x6a>
 800ba14:	4630      	mov	r0, r6
 800ba16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba1a:	bf00      	nop
 800ba1c:	08012128 	.word	0x08012128
 800ba20:	08011f41 	.word	0x08011f41
 800ba24:	080120cc 	.word	0x080120cc

0800ba28 <__lshift>:
 800ba28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba2c:	460c      	mov	r4, r1
 800ba2e:	6849      	ldr	r1, [r1, #4]
 800ba30:	6923      	ldr	r3, [r4, #16]
 800ba32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba36:	68a3      	ldr	r3, [r4, #8]
 800ba38:	4607      	mov	r7, r0
 800ba3a:	4691      	mov	r9, r2
 800ba3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba40:	f108 0601 	add.w	r6, r8, #1
 800ba44:	42b3      	cmp	r3, r6
 800ba46:	db0b      	blt.n	800ba60 <__lshift+0x38>
 800ba48:	4638      	mov	r0, r7
 800ba4a:	f7ff fd95 	bl	800b578 <_Balloc>
 800ba4e:	4605      	mov	r5, r0
 800ba50:	b948      	cbnz	r0, 800ba66 <__lshift+0x3e>
 800ba52:	4602      	mov	r2, r0
 800ba54:	4b28      	ldr	r3, [pc, #160]	@ (800baf8 <__lshift+0xd0>)
 800ba56:	4829      	ldr	r0, [pc, #164]	@ (800bafc <__lshift+0xd4>)
 800ba58:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ba5c:	f7fe fad6 	bl	800a00c <__assert_func>
 800ba60:	3101      	adds	r1, #1
 800ba62:	005b      	lsls	r3, r3, #1
 800ba64:	e7ee      	b.n	800ba44 <__lshift+0x1c>
 800ba66:	2300      	movs	r3, #0
 800ba68:	f100 0114 	add.w	r1, r0, #20
 800ba6c:	f100 0210 	add.w	r2, r0, #16
 800ba70:	4618      	mov	r0, r3
 800ba72:	4553      	cmp	r3, sl
 800ba74:	db33      	blt.n	800bade <__lshift+0xb6>
 800ba76:	6920      	ldr	r0, [r4, #16]
 800ba78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba7c:	f104 0314 	add.w	r3, r4, #20
 800ba80:	f019 091f 	ands.w	r9, r9, #31
 800ba84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba8c:	d02b      	beq.n	800bae6 <__lshift+0xbe>
 800ba8e:	f1c9 0e20 	rsb	lr, r9, #32
 800ba92:	468a      	mov	sl, r1
 800ba94:	2200      	movs	r2, #0
 800ba96:	6818      	ldr	r0, [r3, #0]
 800ba98:	fa00 f009 	lsl.w	r0, r0, r9
 800ba9c:	4310      	orrs	r0, r2
 800ba9e:	f84a 0b04 	str.w	r0, [sl], #4
 800baa2:	f853 2b04 	ldr.w	r2, [r3], #4
 800baa6:	459c      	cmp	ip, r3
 800baa8:	fa22 f20e 	lsr.w	r2, r2, lr
 800baac:	d8f3      	bhi.n	800ba96 <__lshift+0x6e>
 800baae:	ebac 0304 	sub.w	r3, ip, r4
 800bab2:	3b15      	subs	r3, #21
 800bab4:	f023 0303 	bic.w	r3, r3, #3
 800bab8:	3304      	adds	r3, #4
 800baba:	f104 0015 	add.w	r0, r4, #21
 800babe:	4584      	cmp	ip, r0
 800bac0:	bf38      	it	cc
 800bac2:	2304      	movcc	r3, #4
 800bac4:	50ca      	str	r2, [r1, r3]
 800bac6:	b10a      	cbz	r2, 800bacc <__lshift+0xa4>
 800bac8:	f108 0602 	add.w	r6, r8, #2
 800bacc:	3e01      	subs	r6, #1
 800bace:	4638      	mov	r0, r7
 800bad0:	612e      	str	r6, [r5, #16]
 800bad2:	4621      	mov	r1, r4
 800bad4:	f7ff fd90 	bl	800b5f8 <_Bfree>
 800bad8:	4628      	mov	r0, r5
 800bada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bade:	f842 0f04 	str.w	r0, [r2, #4]!
 800bae2:	3301      	adds	r3, #1
 800bae4:	e7c5      	b.n	800ba72 <__lshift+0x4a>
 800bae6:	3904      	subs	r1, #4
 800bae8:	f853 2b04 	ldr.w	r2, [r3], #4
 800baec:	f841 2f04 	str.w	r2, [r1, #4]!
 800baf0:	459c      	cmp	ip, r3
 800baf2:	d8f9      	bhi.n	800bae8 <__lshift+0xc0>
 800baf4:	e7ea      	b.n	800bacc <__lshift+0xa4>
 800baf6:	bf00      	nop
 800baf8:	0801205b 	.word	0x0801205b
 800bafc:	080120cc 	.word	0x080120cc

0800bb00 <__mcmp>:
 800bb00:	690a      	ldr	r2, [r1, #16]
 800bb02:	4603      	mov	r3, r0
 800bb04:	6900      	ldr	r0, [r0, #16]
 800bb06:	1a80      	subs	r0, r0, r2
 800bb08:	b530      	push	{r4, r5, lr}
 800bb0a:	d10e      	bne.n	800bb2a <__mcmp+0x2a>
 800bb0c:	3314      	adds	r3, #20
 800bb0e:	3114      	adds	r1, #20
 800bb10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bb14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bb18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bb1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bb20:	4295      	cmp	r5, r2
 800bb22:	d003      	beq.n	800bb2c <__mcmp+0x2c>
 800bb24:	d205      	bcs.n	800bb32 <__mcmp+0x32>
 800bb26:	f04f 30ff 	mov.w	r0, #4294967295
 800bb2a:	bd30      	pop	{r4, r5, pc}
 800bb2c:	42a3      	cmp	r3, r4
 800bb2e:	d3f3      	bcc.n	800bb18 <__mcmp+0x18>
 800bb30:	e7fb      	b.n	800bb2a <__mcmp+0x2a>
 800bb32:	2001      	movs	r0, #1
 800bb34:	e7f9      	b.n	800bb2a <__mcmp+0x2a>
	...

0800bb38 <__mdiff>:
 800bb38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb3c:	4689      	mov	r9, r1
 800bb3e:	4606      	mov	r6, r0
 800bb40:	4611      	mov	r1, r2
 800bb42:	4648      	mov	r0, r9
 800bb44:	4614      	mov	r4, r2
 800bb46:	f7ff ffdb 	bl	800bb00 <__mcmp>
 800bb4a:	1e05      	subs	r5, r0, #0
 800bb4c:	d112      	bne.n	800bb74 <__mdiff+0x3c>
 800bb4e:	4629      	mov	r1, r5
 800bb50:	4630      	mov	r0, r6
 800bb52:	f7ff fd11 	bl	800b578 <_Balloc>
 800bb56:	4602      	mov	r2, r0
 800bb58:	b928      	cbnz	r0, 800bb66 <__mdiff+0x2e>
 800bb5a:	4b3f      	ldr	r3, [pc, #252]	@ (800bc58 <__mdiff+0x120>)
 800bb5c:	f240 2137 	movw	r1, #567	@ 0x237
 800bb60:	483e      	ldr	r0, [pc, #248]	@ (800bc5c <__mdiff+0x124>)
 800bb62:	f7fe fa53 	bl	800a00c <__assert_func>
 800bb66:	2301      	movs	r3, #1
 800bb68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb6c:	4610      	mov	r0, r2
 800bb6e:	b003      	add	sp, #12
 800bb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb74:	bfbc      	itt	lt
 800bb76:	464b      	movlt	r3, r9
 800bb78:	46a1      	movlt	r9, r4
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bb80:	bfba      	itte	lt
 800bb82:	461c      	movlt	r4, r3
 800bb84:	2501      	movlt	r5, #1
 800bb86:	2500      	movge	r5, #0
 800bb88:	f7ff fcf6 	bl	800b578 <_Balloc>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	b918      	cbnz	r0, 800bb98 <__mdiff+0x60>
 800bb90:	4b31      	ldr	r3, [pc, #196]	@ (800bc58 <__mdiff+0x120>)
 800bb92:	f240 2145 	movw	r1, #581	@ 0x245
 800bb96:	e7e3      	b.n	800bb60 <__mdiff+0x28>
 800bb98:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bb9c:	6926      	ldr	r6, [r4, #16]
 800bb9e:	60c5      	str	r5, [r0, #12]
 800bba0:	f109 0310 	add.w	r3, r9, #16
 800bba4:	f109 0514 	add.w	r5, r9, #20
 800bba8:	f104 0e14 	add.w	lr, r4, #20
 800bbac:	f100 0b14 	add.w	fp, r0, #20
 800bbb0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bbb4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bbb8:	9301      	str	r3, [sp, #4]
 800bbba:	46d9      	mov	r9, fp
 800bbbc:	f04f 0c00 	mov.w	ip, #0
 800bbc0:	9b01      	ldr	r3, [sp, #4]
 800bbc2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bbc6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bbca:	9301      	str	r3, [sp, #4]
 800bbcc:	fa1f f38a 	uxth.w	r3, sl
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	b283      	uxth	r3, r0
 800bbd4:	1acb      	subs	r3, r1, r3
 800bbd6:	0c00      	lsrs	r0, r0, #16
 800bbd8:	4463      	add	r3, ip
 800bbda:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bbde:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bbe8:	4576      	cmp	r6, lr
 800bbea:	f849 3b04 	str.w	r3, [r9], #4
 800bbee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bbf2:	d8e5      	bhi.n	800bbc0 <__mdiff+0x88>
 800bbf4:	1b33      	subs	r3, r6, r4
 800bbf6:	3b15      	subs	r3, #21
 800bbf8:	f023 0303 	bic.w	r3, r3, #3
 800bbfc:	3415      	adds	r4, #21
 800bbfe:	3304      	adds	r3, #4
 800bc00:	42a6      	cmp	r6, r4
 800bc02:	bf38      	it	cc
 800bc04:	2304      	movcc	r3, #4
 800bc06:	441d      	add	r5, r3
 800bc08:	445b      	add	r3, fp
 800bc0a:	461e      	mov	r6, r3
 800bc0c:	462c      	mov	r4, r5
 800bc0e:	4544      	cmp	r4, r8
 800bc10:	d30e      	bcc.n	800bc30 <__mdiff+0xf8>
 800bc12:	f108 0103 	add.w	r1, r8, #3
 800bc16:	1b49      	subs	r1, r1, r5
 800bc18:	f021 0103 	bic.w	r1, r1, #3
 800bc1c:	3d03      	subs	r5, #3
 800bc1e:	45a8      	cmp	r8, r5
 800bc20:	bf38      	it	cc
 800bc22:	2100      	movcc	r1, #0
 800bc24:	440b      	add	r3, r1
 800bc26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bc2a:	b191      	cbz	r1, 800bc52 <__mdiff+0x11a>
 800bc2c:	6117      	str	r7, [r2, #16]
 800bc2e:	e79d      	b.n	800bb6c <__mdiff+0x34>
 800bc30:	f854 1b04 	ldr.w	r1, [r4], #4
 800bc34:	46e6      	mov	lr, ip
 800bc36:	0c08      	lsrs	r0, r1, #16
 800bc38:	fa1c fc81 	uxtah	ip, ip, r1
 800bc3c:	4471      	add	r1, lr
 800bc3e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bc42:	b289      	uxth	r1, r1
 800bc44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bc48:	f846 1b04 	str.w	r1, [r6], #4
 800bc4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc50:	e7dd      	b.n	800bc0e <__mdiff+0xd6>
 800bc52:	3f01      	subs	r7, #1
 800bc54:	e7e7      	b.n	800bc26 <__mdiff+0xee>
 800bc56:	bf00      	nop
 800bc58:	0801205b 	.word	0x0801205b
 800bc5c:	080120cc 	.word	0x080120cc

0800bc60 <__ulp>:
 800bc60:	b082      	sub	sp, #8
 800bc62:	ed8d 0b00 	vstr	d0, [sp]
 800bc66:	9a01      	ldr	r2, [sp, #4]
 800bc68:	4b0f      	ldr	r3, [pc, #60]	@ (800bca8 <__ulp+0x48>)
 800bc6a:	4013      	ands	r3, r2
 800bc6c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	dc08      	bgt.n	800bc86 <__ulp+0x26>
 800bc74:	425b      	negs	r3, r3
 800bc76:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bc7a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bc7e:	da04      	bge.n	800bc8a <__ulp+0x2a>
 800bc80:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bc84:	4113      	asrs	r3, r2
 800bc86:	2200      	movs	r2, #0
 800bc88:	e008      	b.n	800bc9c <__ulp+0x3c>
 800bc8a:	f1a2 0314 	sub.w	r3, r2, #20
 800bc8e:	2b1e      	cmp	r3, #30
 800bc90:	bfda      	itte	le
 800bc92:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bc96:	40da      	lsrle	r2, r3
 800bc98:	2201      	movgt	r2, #1
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	4610      	mov	r0, r2
 800bca0:	ec41 0b10 	vmov	d0, r0, r1
 800bca4:	b002      	add	sp, #8
 800bca6:	4770      	bx	lr
 800bca8:	7ff00000 	.word	0x7ff00000

0800bcac <__b2d>:
 800bcac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb0:	6906      	ldr	r6, [r0, #16]
 800bcb2:	f100 0814 	add.w	r8, r0, #20
 800bcb6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bcba:	1f37      	subs	r7, r6, #4
 800bcbc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bcc0:	4610      	mov	r0, r2
 800bcc2:	f7ff fd4b 	bl	800b75c <__hi0bits>
 800bcc6:	f1c0 0320 	rsb	r3, r0, #32
 800bcca:	280a      	cmp	r0, #10
 800bccc:	600b      	str	r3, [r1, #0]
 800bcce:	491b      	ldr	r1, [pc, #108]	@ (800bd3c <__b2d+0x90>)
 800bcd0:	dc15      	bgt.n	800bcfe <__b2d+0x52>
 800bcd2:	f1c0 0c0b 	rsb	ip, r0, #11
 800bcd6:	fa22 f30c 	lsr.w	r3, r2, ip
 800bcda:	45b8      	cmp	r8, r7
 800bcdc:	ea43 0501 	orr.w	r5, r3, r1
 800bce0:	bf34      	ite	cc
 800bce2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bce6:	2300      	movcs	r3, #0
 800bce8:	3015      	adds	r0, #21
 800bcea:	fa02 f000 	lsl.w	r0, r2, r0
 800bcee:	fa23 f30c 	lsr.w	r3, r3, ip
 800bcf2:	4303      	orrs	r3, r0
 800bcf4:	461c      	mov	r4, r3
 800bcf6:	ec45 4b10 	vmov	d0, r4, r5
 800bcfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcfe:	45b8      	cmp	r8, r7
 800bd00:	bf3a      	itte	cc
 800bd02:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bd06:	f1a6 0708 	subcc.w	r7, r6, #8
 800bd0a:	2300      	movcs	r3, #0
 800bd0c:	380b      	subs	r0, #11
 800bd0e:	d012      	beq.n	800bd36 <__b2d+0x8a>
 800bd10:	f1c0 0120 	rsb	r1, r0, #32
 800bd14:	fa23 f401 	lsr.w	r4, r3, r1
 800bd18:	4082      	lsls	r2, r0
 800bd1a:	4322      	orrs	r2, r4
 800bd1c:	4547      	cmp	r7, r8
 800bd1e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bd22:	bf8c      	ite	hi
 800bd24:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bd28:	2200      	movls	r2, #0
 800bd2a:	4083      	lsls	r3, r0
 800bd2c:	40ca      	lsrs	r2, r1
 800bd2e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bd32:	4313      	orrs	r3, r2
 800bd34:	e7de      	b.n	800bcf4 <__b2d+0x48>
 800bd36:	ea42 0501 	orr.w	r5, r2, r1
 800bd3a:	e7db      	b.n	800bcf4 <__b2d+0x48>
 800bd3c:	3ff00000 	.word	0x3ff00000

0800bd40 <__d2b>:
 800bd40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd44:	460f      	mov	r7, r1
 800bd46:	2101      	movs	r1, #1
 800bd48:	ec59 8b10 	vmov	r8, r9, d0
 800bd4c:	4616      	mov	r6, r2
 800bd4e:	f7ff fc13 	bl	800b578 <_Balloc>
 800bd52:	4604      	mov	r4, r0
 800bd54:	b930      	cbnz	r0, 800bd64 <__d2b+0x24>
 800bd56:	4602      	mov	r2, r0
 800bd58:	4b23      	ldr	r3, [pc, #140]	@ (800bde8 <__d2b+0xa8>)
 800bd5a:	4824      	ldr	r0, [pc, #144]	@ (800bdec <__d2b+0xac>)
 800bd5c:	f240 310f 	movw	r1, #783	@ 0x30f
 800bd60:	f7fe f954 	bl	800a00c <__assert_func>
 800bd64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bd68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd6c:	b10d      	cbz	r5, 800bd72 <__d2b+0x32>
 800bd6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bd72:	9301      	str	r3, [sp, #4]
 800bd74:	f1b8 0300 	subs.w	r3, r8, #0
 800bd78:	d023      	beq.n	800bdc2 <__d2b+0x82>
 800bd7a:	4668      	mov	r0, sp
 800bd7c:	9300      	str	r3, [sp, #0]
 800bd7e:	f7ff fd0c 	bl	800b79a <__lo0bits>
 800bd82:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bd86:	b1d0      	cbz	r0, 800bdbe <__d2b+0x7e>
 800bd88:	f1c0 0320 	rsb	r3, r0, #32
 800bd8c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd90:	430b      	orrs	r3, r1
 800bd92:	40c2      	lsrs	r2, r0
 800bd94:	6163      	str	r3, [r4, #20]
 800bd96:	9201      	str	r2, [sp, #4]
 800bd98:	9b01      	ldr	r3, [sp, #4]
 800bd9a:	61a3      	str	r3, [r4, #24]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	bf0c      	ite	eq
 800bda0:	2201      	moveq	r2, #1
 800bda2:	2202      	movne	r2, #2
 800bda4:	6122      	str	r2, [r4, #16]
 800bda6:	b1a5      	cbz	r5, 800bdd2 <__d2b+0x92>
 800bda8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bdac:	4405      	add	r5, r0
 800bdae:	603d      	str	r5, [r7, #0]
 800bdb0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bdb4:	6030      	str	r0, [r6, #0]
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	b003      	add	sp, #12
 800bdba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdbe:	6161      	str	r1, [r4, #20]
 800bdc0:	e7ea      	b.n	800bd98 <__d2b+0x58>
 800bdc2:	a801      	add	r0, sp, #4
 800bdc4:	f7ff fce9 	bl	800b79a <__lo0bits>
 800bdc8:	9b01      	ldr	r3, [sp, #4]
 800bdca:	6163      	str	r3, [r4, #20]
 800bdcc:	3020      	adds	r0, #32
 800bdce:	2201      	movs	r2, #1
 800bdd0:	e7e8      	b.n	800bda4 <__d2b+0x64>
 800bdd2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bdd6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bdda:	6038      	str	r0, [r7, #0]
 800bddc:	6918      	ldr	r0, [r3, #16]
 800bdde:	f7ff fcbd 	bl	800b75c <__hi0bits>
 800bde2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bde6:	e7e5      	b.n	800bdb4 <__d2b+0x74>
 800bde8:	0801205b 	.word	0x0801205b
 800bdec:	080120cc 	.word	0x080120cc

0800bdf0 <__ratio>:
 800bdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf4:	b085      	sub	sp, #20
 800bdf6:	e9cd 1000 	strd	r1, r0, [sp]
 800bdfa:	a902      	add	r1, sp, #8
 800bdfc:	f7ff ff56 	bl	800bcac <__b2d>
 800be00:	9800      	ldr	r0, [sp, #0]
 800be02:	a903      	add	r1, sp, #12
 800be04:	ec55 4b10 	vmov	r4, r5, d0
 800be08:	f7ff ff50 	bl	800bcac <__b2d>
 800be0c:	9b01      	ldr	r3, [sp, #4]
 800be0e:	6919      	ldr	r1, [r3, #16]
 800be10:	9b00      	ldr	r3, [sp, #0]
 800be12:	691b      	ldr	r3, [r3, #16]
 800be14:	1ac9      	subs	r1, r1, r3
 800be16:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800be1a:	1a9b      	subs	r3, r3, r2
 800be1c:	ec5b ab10 	vmov	sl, fp, d0
 800be20:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800be24:	2b00      	cmp	r3, #0
 800be26:	bfce      	itee	gt
 800be28:	462a      	movgt	r2, r5
 800be2a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be2e:	465a      	movle	r2, fp
 800be30:	462f      	mov	r7, r5
 800be32:	46d9      	mov	r9, fp
 800be34:	bfcc      	ite	gt
 800be36:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800be3a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800be3e:	464b      	mov	r3, r9
 800be40:	4652      	mov	r2, sl
 800be42:	4620      	mov	r0, r4
 800be44:	4639      	mov	r1, r7
 800be46:	f7f4 fd01 	bl	800084c <__aeabi_ddiv>
 800be4a:	ec41 0b10 	vmov	d0, r0, r1
 800be4e:	b005      	add	sp, #20
 800be50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be54 <__copybits>:
 800be54:	3901      	subs	r1, #1
 800be56:	b570      	push	{r4, r5, r6, lr}
 800be58:	1149      	asrs	r1, r1, #5
 800be5a:	6914      	ldr	r4, [r2, #16]
 800be5c:	3101      	adds	r1, #1
 800be5e:	f102 0314 	add.w	r3, r2, #20
 800be62:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800be66:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800be6a:	1f05      	subs	r5, r0, #4
 800be6c:	42a3      	cmp	r3, r4
 800be6e:	d30c      	bcc.n	800be8a <__copybits+0x36>
 800be70:	1aa3      	subs	r3, r4, r2
 800be72:	3b11      	subs	r3, #17
 800be74:	f023 0303 	bic.w	r3, r3, #3
 800be78:	3211      	adds	r2, #17
 800be7a:	42a2      	cmp	r2, r4
 800be7c:	bf88      	it	hi
 800be7e:	2300      	movhi	r3, #0
 800be80:	4418      	add	r0, r3
 800be82:	2300      	movs	r3, #0
 800be84:	4288      	cmp	r0, r1
 800be86:	d305      	bcc.n	800be94 <__copybits+0x40>
 800be88:	bd70      	pop	{r4, r5, r6, pc}
 800be8a:	f853 6b04 	ldr.w	r6, [r3], #4
 800be8e:	f845 6f04 	str.w	r6, [r5, #4]!
 800be92:	e7eb      	b.n	800be6c <__copybits+0x18>
 800be94:	f840 3b04 	str.w	r3, [r0], #4
 800be98:	e7f4      	b.n	800be84 <__copybits+0x30>

0800be9a <__any_on>:
 800be9a:	f100 0214 	add.w	r2, r0, #20
 800be9e:	6900      	ldr	r0, [r0, #16]
 800bea0:	114b      	asrs	r3, r1, #5
 800bea2:	4298      	cmp	r0, r3
 800bea4:	b510      	push	{r4, lr}
 800bea6:	db11      	blt.n	800becc <__any_on+0x32>
 800bea8:	dd0a      	ble.n	800bec0 <__any_on+0x26>
 800beaa:	f011 011f 	ands.w	r1, r1, #31
 800beae:	d007      	beq.n	800bec0 <__any_on+0x26>
 800beb0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800beb4:	fa24 f001 	lsr.w	r0, r4, r1
 800beb8:	fa00 f101 	lsl.w	r1, r0, r1
 800bebc:	428c      	cmp	r4, r1
 800bebe:	d10b      	bne.n	800bed8 <__any_on+0x3e>
 800bec0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d803      	bhi.n	800bed0 <__any_on+0x36>
 800bec8:	2000      	movs	r0, #0
 800beca:	bd10      	pop	{r4, pc}
 800becc:	4603      	mov	r3, r0
 800bece:	e7f7      	b.n	800bec0 <__any_on+0x26>
 800bed0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bed4:	2900      	cmp	r1, #0
 800bed6:	d0f5      	beq.n	800bec4 <__any_on+0x2a>
 800bed8:	2001      	movs	r0, #1
 800beda:	e7f6      	b.n	800beca <__any_on+0x30>

0800bedc <_strtol_l.constprop.0>:
 800bedc:	2b24      	cmp	r3, #36	@ 0x24
 800bede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bee2:	4686      	mov	lr, r0
 800bee4:	4690      	mov	r8, r2
 800bee6:	d801      	bhi.n	800beec <_strtol_l.constprop.0+0x10>
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d106      	bne.n	800befa <_strtol_l.constprop.0+0x1e>
 800beec:	f7fe f83a 	bl	8009f64 <__errno>
 800bef0:	2316      	movs	r3, #22
 800bef2:	6003      	str	r3, [r0, #0]
 800bef4:	2000      	movs	r0, #0
 800bef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800befa:	4834      	ldr	r0, [pc, #208]	@ (800bfcc <_strtol_l.constprop.0+0xf0>)
 800befc:	460d      	mov	r5, r1
 800befe:	462a      	mov	r2, r5
 800bf00:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf04:	5d06      	ldrb	r6, [r0, r4]
 800bf06:	f016 0608 	ands.w	r6, r6, #8
 800bf0a:	d1f8      	bne.n	800befe <_strtol_l.constprop.0+0x22>
 800bf0c:	2c2d      	cmp	r4, #45	@ 0x2d
 800bf0e:	d12d      	bne.n	800bf6c <_strtol_l.constprop.0+0x90>
 800bf10:	782c      	ldrb	r4, [r5, #0]
 800bf12:	2601      	movs	r6, #1
 800bf14:	1c95      	adds	r5, r2, #2
 800bf16:	f033 0210 	bics.w	r2, r3, #16
 800bf1a:	d109      	bne.n	800bf30 <_strtol_l.constprop.0+0x54>
 800bf1c:	2c30      	cmp	r4, #48	@ 0x30
 800bf1e:	d12a      	bne.n	800bf76 <_strtol_l.constprop.0+0x9a>
 800bf20:	782a      	ldrb	r2, [r5, #0]
 800bf22:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bf26:	2a58      	cmp	r2, #88	@ 0x58
 800bf28:	d125      	bne.n	800bf76 <_strtol_l.constprop.0+0x9a>
 800bf2a:	786c      	ldrb	r4, [r5, #1]
 800bf2c:	2310      	movs	r3, #16
 800bf2e:	3502      	adds	r5, #2
 800bf30:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bf34:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bf38:	2200      	movs	r2, #0
 800bf3a:	fbbc f9f3 	udiv	r9, ip, r3
 800bf3e:	4610      	mov	r0, r2
 800bf40:	fb03 ca19 	mls	sl, r3, r9, ip
 800bf44:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bf48:	2f09      	cmp	r7, #9
 800bf4a:	d81b      	bhi.n	800bf84 <_strtol_l.constprop.0+0xa8>
 800bf4c:	463c      	mov	r4, r7
 800bf4e:	42a3      	cmp	r3, r4
 800bf50:	dd27      	ble.n	800bfa2 <_strtol_l.constprop.0+0xc6>
 800bf52:	1c57      	adds	r7, r2, #1
 800bf54:	d007      	beq.n	800bf66 <_strtol_l.constprop.0+0x8a>
 800bf56:	4581      	cmp	r9, r0
 800bf58:	d320      	bcc.n	800bf9c <_strtol_l.constprop.0+0xc0>
 800bf5a:	d101      	bne.n	800bf60 <_strtol_l.constprop.0+0x84>
 800bf5c:	45a2      	cmp	sl, r4
 800bf5e:	db1d      	blt.n	800bf9c <_strtol_l.constprop.0+0xc0>
 800bf60:	fb00 4003 	mla	r0, r0, r3, r4
 800bf64:	2201      	movs	r2, #1
 800bf66:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf6a:	e7eb      	b.n	800bf44 <_strtol_l.constprop.0+0x68>
 800bf6c:	2c2b      	cmp	r4, #43	@ 0x2b
 800bf6e:	bf04      	itt	eq
 800bf70:	782c      	ldrbeq	r4, [r5, #0]
 800bf72:	1c95      	addeq	r5, r2, #2
 800bf74:	e7cf      	b.n	800bf16 <_strtol_l.constprop.0+0x3a>
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d1da      	bne.n	800bf30 <_strtol_l.constprop.0+0x54>
 800bf7a:	2c30      	cmp	r4, #48	@ 0x30
 800bf7c:	bf0c      	ite	eq
 800bf7e:	2308      	moveq	r3, #8
 800bf80:	230a      	movne	r3, #10
 800bf82:	e7d5      	b.n	800bf30 <_strtol_l.constprop.0+0x54>
 800bf84:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bf88:	2f19      	cmp	r7, #25
 800bf8a:	d801      	bhi.n	800bf90 <_strtol_l.constprop.0+0xb4>
 800bf8c:	3c37      	subs	r4, #55	@ 0x37
 800bf8e:	e7de      	b.n	800bf4e <_strtol_l.constprop.0+0x72>
 800bf90:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bf94:	2f19      	cmp	r7, #25
 800bf96:	d804      	bhi.n	800bfa2 <_strtol_l.constprop.0+0xc6>
 800bf98:	3c57      	subs	r4, #87	@ 0x57
 800bf9a:	e7d8      	b.n	800bf4e <_strtol_l.constprop.0+0x72>
 800bf9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bfa0:	e7e1      	b.n	800bf66 <_strtol_l.constprop.0+0x8a>
 800bfa2:	1c53      	adds	r3, r2, #1
 800bfa4:	d108      	bne.n	800bfb8 <_strtol_l.constprop.0+0xdc>
 800bfa6:	2322      	movs	r3, #34	@ 0x22
 800bfa8:	f8ce 3000 	str.w	r3, [lr]
 800bfac:	4660      	mov	r0, ip
 800bfae:	f1b8 0f00 	cmp.w	r8, #0
 800bfb2:	d0a0      	beq.n	800bef6 <_strtol_l.constprop.0+0x1a>
 800bfb4:	1e69      	subs	r1, r5, #1
 800bfb6:	e006      	b.n	800bfc6 <_strtol_l.constprop.0+0xea>
 800bfb8:	b106      	cbz	r6, 800bfbc <_strtol_l.constprop.0+0xe0>
 800bfba:	4240      	negs	r0, r0
 800bfbc:	f1b8 0f00 	cmp.w	r8, #0
 800bfc0:	d099      	beq.n	800bef6 <_strtol_l.constprop.0+0x1a>
 800bfc2:	2a00      	cmp	r2, #0
 800bfc4:	d1f6      	bne.n	800bfb4 <_strtol_l.constprop.0+0xd8>
 800bfc6:	f8c8 1000 	str.w	r1, [r8]
 800bfca:	e794      	b.n	800bef6 <_strtol_l.constprop.0+0x1a>
 800bfcc:	08012229 	.word	0x08012229

0800bfd0 <_strtol_r>:
 800bfd0:	f7ff bf84 	b.w	800bedc <_strtol_l.constprop.0>

0800bfd4 <__ascii_wctomb>:
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	4608      	mov	r0, r1
 800bfd8:	b141      	cbz	r1, 800bfec <__ascii_wctomb+0x18>
 800bfda:	2aff      	cmp	r2, #255	@ 0xff
 800bfdc:	d904      	bls.n	800bfe8 <__ascii_wctomb+0x14>
 800bfde:	228a      	movs	r2, #138	@ 0x8a
 800bfe0:	601a      	str	r2, [r3, #0]
 800bfe2:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe6:	4770      	bx	lr
 800bfe8:	700a      	strb	r2, [r1, #0]
 800bfea:	2001      	movs	r0, #1
 800bfec:	4770      	bx	lr

0800bfee <__ssputs_r>:
 800bfee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bff2:	688e      	ldr	r6, [r1, #8]
 800bff4:	461f      	mov	r7, r3
 800bff6:	42be      	cmp	r6, r7
 800bff8:	680b      	ldr	r3, [r1, #0]
 800bffa:	4682      	mov	sl, r0
 800bffc:	460c      	mov	r4, r1
 800bffe:	4690      	mov	r8, r2
 800c000:	d82d      	bhi.n	800c05e <__ssputs_r+0x70>
 800c002:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c006:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c00a:	d026      	beq.n	800c05a <__ssputs_r+0x6c>
 800c00c:	6965      	ldr	r5, [r4, #20]
 800c00e:	6909      	ldr	r1, [r1, #16]
 800c010:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c014:	eba3 0901 	sub.w	r9, r3, r1
 800c018:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c01c:	1c7b      	adds	r3, r7, #1
 800c01e:	444b      	add	r3, r9
 800c020:	106d      	asrs	r5, r5, #1
 800c022:	429d      	cmp	r5, r3
 800c024:	bf38      	it	cc
 800c026:	461d      	movcc	r5, r3
 800c028:	0553      	lsls	r3, r2, #21
 800c02a:	d527      	bpl.n	800c07c <__ssputs_r+0x8e>
 800c02c:	4629      	mov	r1, r5
 800c02e:	f7ff fa05 	bl	800b43c <_malloc_r>
 800c032:	4606      	mov	r6, r0
 800c034:	b360      	cbz	r0, 800c090 <__ssputs_r+0xa2>
 800c036:	6921      	ldr	r1, [r4, #16]
 800c038:	464a      	mov	r2, r9
 800c03a:	f7fd ffc8 	bl	8009fce <memcpy>
 800c03e:	89a3      	ldrh	r3, [r4, #12]
 800c040:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c048:	81a3      	strh	r3, [r4, #12]
 800c04a:	6126      	str	r6, [r4, #16]
 800c04c:	6165      	str	r5, [r4, #20]
 800c04e:	444e      	add	r6, r9
 800c050:	eba5 0509 	sub.w	r5, r5, r9
 800c054:	6026      	str	r6, [r4, #0]
 800c056:	60a5      	str	r5, [r4, #8]
 800c058:	463e      	mov	r6, r7
 800c05a:	42be      	cmp	r6, r7
 800c05c:	d900      	bls.n	800c060 <__ssputs_r+0x72>
 800c05e:	463e      	mov	r6, r7
 800c060:	6820      	ldr	r0, [r4, #0]
 800c062:	4632      	mov	r2, r6
 800c064:	4641      	mov	r1, r8
 800c066:	f000 f9d7 	bl	800c418 <memmove>
 800c06a:	68a3      	ldr	r3, [r4, #8]
 800c06c:	1b9b      	subs	r3, r3, r6
 800c06e:	60a3      	str	r3, [r4, #8]
 800c070:	6823      	ldr	r3, [r4, #0]
 800c072:	4433      	add	r3, r6
 800c074:	6023      	str	r3, [r4, #0]
 800c076:	2000      	movs	r0, #0
 800c078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c07c:	462a      	mov	r2, r5
 800c07e:	f000 fa10 	bl	800c4a2 <_realloc_r>
 800c082:	4606      	mov	r6, r0
 800c084:	2800      	cmp	r0, #0
 800c086:	d1e0      	bne.n	800c04a <__ssputs_r+0x5c>
 800c088:	6921      	ldr	r1, [r4, #16]
 800c08a:	4650      	mov	r0, sl
 800c08c:	f7fe fe28 	bl	800ace0 <_free_r>
 800c090:	230c      	movs	r3, #12
 800c092:	f8ca 3000 	str.w	r3, [sl]
 800c096:	89a3      	ldrh	r3, [r4, #12]
 800c098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c09c:	81a3      	strh	r3, [r4, #12]
 800c09e:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a2:	e7e9      	b.n	800c078 <__ssputs_r+0x8a>

0800c0a4 <_svfiprintf_r>:
 800c0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a8:	4698      	mov	r8, r3
 800c0aa:	898b      	ldrh	r3, [r1, #12]
 800c0ac:	061b      	lsls	r3, r3, #24
 800c0ae:	b09d      	sub	sp, #116	@ 0x74
 800c0b0:	4607      	mov	r7, r0
 800c0b2:	460d      	mov	r5, r1
 800c0b4:	4614      	mov	r4, r2
 800c0b6:	d510      	bpl.n	800c0da <_svfiprintf_r+0x36>
 800c0b8:	690b      	ldr	r3, [r1, #16]
 800c0ba:	b973      	cbnz	r3, 800c0da <_svfiprintf_r+0x36>
 800c0bc:	2140      	movs	r1, #64	@ 0x40
 800c0be:	f7ff f9bd 	bl	800b43c <_malloc_r>
 800c0c2:	6028      	str	r0, [r5, #0]
 800c0c4:	6128      	str	r0, [r5, #16]
 800c0c6:	b930      	cbnz	r0, 800c0d6 <_svfiprintf_r+0x32>
 800c0c8:	230c      	movs	r3, #12
 800c0ca:	603b      	str	r3, [r7, #0]
 800c0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d0:	b01d      	add	sp, #116	@ 0x74
 800c0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d6:	2340      	movs	r3, #64	@ 0x40
 800c0d8:	616b      	str	r3, [r5, #20]
 800c0da:	2300      	movs	r3, #0
 800c0dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0de:	2320      	movs	r3, #32
 800c0e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c0e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0e8:	2330      	movs	r3, #48	@ 0x30
 800c0ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c288 <_svfiprintf_r+0x1e4>
 800c0ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c0f2:	f04f 0901 	mov.w	r9, #1
 800c0f6:	4623      	mov	r3, r4
 800c0f8:	469a      	mov	sl, r3
 800c0fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0fe:	b10a      	cbz	r2, 800c104 <_svfiprintf_r+0x60>
 800c100:	2a25      	cmp	r2, #37	@ 0x25
 800c102:	d1f9      	bne.n	800c0f8 <_svfiprintf_r+0x54>
 800c104:	ebba 0b04 	subs.w	fp, sl, r4
 800c108:	d00b      	beq.n	800c122 <_svfiprintf_r+0x7e>
 800c10a:	465b      	mov	r3, fp
 800c10c:	4622      	mov	r2, r4
 800c10e:	4629      	mov	r1, r5
 800c110:	4638      	mov	r0, r7
 800c112:	f7ff ff6c 	bl	800bfee <__ssputs_r>
 800c116:	3001      	adds	r0, #1
 800c118:	f000 80a7 	beq.w	800c26a <_svfiprintf_r+0x1c6>
 800c11c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c11e:	445a      	add	r2, fp
 800c120:	9209      	str	r2, [sp, #36]	@ 0x24
 800c122:	f89a 3000 	ldrb.w	r3, [sl]
 800c126:	2b00      	cmp	r3, #0
 800c128:	f000 809f 	beq.w	800c26a <_svfiprintf_r+0x1c6>
 800c12c:	2300      	movs	r3, #0
 800c12e:	f04f 32ff 	mov.w	r2, #4294967295
 800c132:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c136:	f10a 0a01 	add.w	sl, sl, #1
 800c13a:	9304      	str	r3, [sp, #16]
 800c13c:	9307      	str	r3, [sp, #28]
 800c13e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c142:	931a      	str	r3, [sp, #104]	@ 0x68
 800c144:	4654      	mov	r4, sl
 800c146:	2205      	movs	r2, #5
 800c148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c14c:	484e      	ldr	r0, [pc, #312]	@ (800c288 <_svfiprintf_r+0x1e4>)
 800c14e:	f7f4 f83f 	bl	80001d0 <memchr>
 800c152:	9a04      	ldr	r2, [sp, #16]
 800c154:	b9d8      	cbnz	r0, 800c18e <_svfiprintf_r+0xea>
 800c156:	06d0      	lsls	r0, r2, #27
 800c158:	bf44      	itt	mi
 800c15a:	2320      	movmi	r3, #32
 800c15c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c160:	0711      	lsls	r1, r2, #28
 800c162:	bf44      	itt	mi
 800c164:	232b      	movmi	r3, #43	@ 0x2b
 800c166:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c16a:	f89a 3000 	ldrb.w	r3, [sl]
 800c16e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c170:	d015      	beq.n	800c19e <_svfiprintf_r+0xfa>
 800c172:	9a07      	ldr	r2, [sp, #28]
 800c174:	4654      	mov	r4, sl
 800c176:	2000      	movs	r0, #0
 800c178:	f04f 0c0a 	mov.w	ip, #10
 800c17c:	4621      	mov	r1, r4
 800c17e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c182:	3b30      	subs	r3, #48	@ 0x30
 800c184:	2b09      	cmp	r3, #9
 800c186:	d94b      	bls.n	800c220 <_svfiprintf_r+0x17c>
 800c188:	b1b0      	cbz	r0, 800c1b8 <_svfiprintf_r+0x114>
 800c18a:	9207      	str	r2, [sp, #28]
 800c18c:	e014      	b.n	800c1b8 <_svfiprintf_r+0x114>
 800c18e:	eba0 0308 	sub.w	r3, r0, r8
 800c192:	fa09 f303 	lsl.w	r3, r9, r3
 800c196:	4313      	orrs	r3, r2
 800c198:	9304      	str	r3, [sp, #16]
 800c19a:	46a2      	mov	sl, r4
 800c19c:	e7d2      	b.n	800c144 <_svfiprintf_r+0xa0>
 800c19e:	9b03      	ldr	r3, [sp, #12]
 800c1a0:	1d19      	adds	r1, r3, #4
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	9103      	str	r1, [sp, #12]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	bfbb      	ittet	lt
 800c1aa:	425b      	neglt	r3, r3
 800c1ac:	f042 0202 	orrlt.w	r2, r2, #2
 800c1b0:	9307      	strge	r3, [sp, #28]
 800c1b2:	9307      	strlt	r3, [sp, #28]
 800c1b4:	bfb8      	it	lt
 800c1b6:	9204      	strlt	r2, [sp, #16]
 800c1b8:	7823      	ldrb	r3, [r4, #0]
 800c1ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800c1bc:	d10a      	bne.n	800c1d4 <_svfiprintf_r+0x130>
 800c1be:	7863      	ldrb	r3, [r4, #1]
 800c1c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1c2:	d132      	bne.n	800c22a <_svfiprintf_r+0x186>
 800c1c4:	9b03      	ldr	r3, [sp, #12]
 800c1c6:	1d1a      	adds	r2, r3, #4
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	9203      	str	r2, [sp, #12]
 800c1cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c1d0:	3402      	adds	r4, #2
 800c1d2:	9305      	str	r3, [sp, #20]
 800c1d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c298 <_svfiprintf_r+0x1f4>
 800c1d8:	7821      	ldrb	r1, [r4, #0]
 800c1da:	2203      	movs	r2, #3
 800c1dc:	4650      	mov	r0, sl
 800c1de:	f7f3 fff7 	bl	80001d0 <memchr>
 800c1e2:	b138      	cbz	r0, 800c1f4 <_svfiprintf_r+0x150>
 800c1e4:	9b04      	ldr	r3, [sp, #16]
 800c1e6:	eba0 000a 	sub.w	r0, r0, sl
 800c1ea:	2240      	movs	r2, #64	@ 0x40
 800c1ec:	4082      	lsls	r2, r0
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	3401      	adds	r4, #1
 800c1f2:	9304      	str	r3, [sp, #16]
 800c1f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1f8:	4824      	ldr	r0, [pc, #144]	@ (800c28c <_svfiprintf_r+0x1e8>)
 800c1fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c1fe:	2206      	movs	r2, #6
 800c200:	f7f3 ffe6 	bl	80001d0 <memchr>
 800c204:	2800      	cmp	r0, #0
 800c206:	d036      	beq.n	800c276 <_svfiprintf_r+0x1d2>
 800c208:	4b21      	ldr	r3, [pc, #132]	@ (800c290 <_svfiprintf_r+0x1ec>)
 800c20a:	bb1b      	cbnz	r3, 800c254 <_svfiprintf_r+0x1b0>
 800c20c:	9b03      	ldr	r3, [sp, #12]
 800c20e:	3307      	adds	r3, #7
 800c210:	f023 0307 	bic.w	r3, r3, #7
 800c214:	3308      	adds	r3, #8
 800c216:	9303      	str	r3, [sp, #12]
 800c218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c21a:	4433      	add	r3, r6
 800c21c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c21e:	e76a      	b.n	800c0f6 <_svfiprintf_r+0x52>
 800c220:	fb0c 3202 	mla	r2, ip, r2, r3
 800c224:	460c      	mov	r4, r1
 800c226:	2001      	movs	r0, #1
 800c228:	e7a8      	b.n	800c17c <_svfiprintf_r+0xd8>
 800c22a:	2300      	movs	r3, #0
 800c22c:	3401      	adds	r4, #1
 800c22e:	9305      	str	r3, [sp, #20]
 800c230:	4619      	mov	r1, r3
 800c232:	f04f 0c0a 	mov.w	ip, #10
 800c236:	4620      	mov	r0, r4
 800c238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c23c:	3a30      	subs	r2, #48	@ 0x30
 800c23e:	2a09      	cmp	r2, #9
 800c240:	d903      	bls.n	800c24a <_svfiprintf_r+0x1a6>
 800c242:	2b00      	cmp	r3, #0
 800c244:	d0c6      	beq.n	800c1d4 <_svfiprintf_r+0x130>
 800c246:	9105      	str	r1, [sp, #20]
 800c248:	e7c4      	b.n	800c1d4 <_svfiprintf_r+0x130>
 800c24a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c24e:	4604      	mov	r4, r0
 800c250:	2301      	movs	r3, #1
 800c252:	e7f0      	b.n	800c236 <_svfiprintf_r+0x192>
 800c254:	ab03      	add	r3, sp, #12
 800c256:	9300      	str	r3, [sp, #0]
 800c258:	462a      	mov	r2, r5
 800c25a:	4b0e      	ldr	r3, [pc, #56]	@ (800c294 <_svfiprintf_r+0x1f0>)
 800c25c:	a904      	add	r1, sp, #16
 800c25e:	4638      	mov	r0, r7
 800c260:	f7fc fea0 	bl	8008fa4 <_printf_float>
 800c264:	1c42      	adds	r2, r0, #1
 800c266:	4606      	mov	r6, r0
 800c268:	d1d6      	bne.n	800c218 <_svfiprintf_r+0x174>
 800c26a:	89ab      	ldrh	r3, [r5, #12]
 800c26c:	065b      	lsls	r3, r3, #25
 800c26e:	f53f af2d 	bmi.w	800c0cc <_svfiprintf_r+0x28>
 800c272:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c274:	e72c      	b.n	800c0d0 <_svfiprintf_r+0x2c>
 800c276:	ab03      	add	r3, sp, #12
 800c278:	9300      	str	r3, [sp, #0]
 800c27a:	462a      	mov	r2, r5
 800c27c:	4b05      	ldr	r3, [pc, #20]	@ (800c294 <_svfiprintf_r+0x1f0>)
 800c27e:	a904      	add	r1, sp, #16
 800c280:	4638      	mov	r0, r7
 800c282:	f7fd f927 	bl	80094d4 <_printf_i>
 800c286:	e7ed      	b.n	800c264 <_svfiprintf_r+0x1c0>
 800c288:	08012329 	.word	0x08012329
 800c28c:	08012333 	.word	0x08012333
 800c290:	08008fa5 	.word	0x08008fa5
 800c294:	0800bfef 	.word	0x0800bfef
 800c298:	0801232f 	.word	0x0801232f

0800c29c <__sflush_r>:
 800c29c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a4:	0716      	lsls	r6, r2, #28
 800c2a6:	4605      	mov	r5, r0
 800c2a8:	460c      	mov	r4, r1
 800c2aa:	d454      	bmi.n	800c356 <__sflush_r+0xba>
 800c2ac:	684b      	ldr	r3, [r1, #4]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	dc02      	bgt.n	800c2b8 <__sflush_r+0x1c>
 800c2b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	dd48      	ble.n	800c34a <__sflush_r+0xae>
 800c2b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c2ba:	2e00      	cmp	r6, #0
 800c2bc:	d045      	beq.n	800c34a <__sflush_r+0xae>
 800c2be:	2300      	movs	r3, #0
 800c2c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c2c4:	682f      	ldr	r7, [r5, #0]
 800c2c6:	6a21      	ldr	r1, [r4, #32]
 800c2c8:	602b      	str	r3, [r5, #0]
 800c2ca:	d030      	beq.n	800c32e <__sflush_r+0x92>
 800c2cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c2ce:	89a3      	ldrh	r3, [r4, #12]
 800c2d0:	0759      	lsls	r1, r3, #29
 800c2d2:	d505      	bpl.n	800c2e0 <__sflush_r+0x44>
 800c2d4:	6863      	ldr	r3, [r4, #4]
 800c2d6:	1ad2      	subs	r2, r2, r3
 800c2d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c2da:	b10b      	cbz	r3, 800c2e0 <__sflush_r+0x44>
 800c2dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c2de:	1ad2      	subs	r2, r2, r3
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c2e4:	6a21      	ldr	r1, [r4, #32]
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	47b0      	blx	r6
 800c2ea:	1c43      	adds	r3, r0, #1
 800c2ec:	89a3      	ldrh	r3, [r4, #12]
 800c2ee:	d106      	bne.n	800c2fe <__sflush_r+0x62>
 800c2f0:	6829      	ldr	r1, [r5, #0]
 800c2f2:	291d      	cmp	r1, #29
 800c2f4:	d82b      	bhi.n	800c34e <__sflush_r+0xb2>
 800c2f6:	4a2a      	ldr	r2, [pc, #168]	@ (800c3a0 <__sflush_r+0x104>)
 800c2f8:	410a      	asrs	r2, r1
 800c2fa:	07d6      	lsls	r6, r2, #31
 800c2fc:	d427      	bmi.n	800c34e <__sflush_r+0xb2>
 800c2fe:	2200      	movs	r2, #0
 800c300:	6062      	str	r2, [r4, #4]
 800c302:	04d9      	lsls	r1, r3, #19
 800c304:	6922      	ldr	r2, [r4, #16]
 800c306:	6022      	str	r2, [r4, #0]
 800c308:	d504      	bpl.n	800c314 <__sflush_r+0x78>
 800c30a:	1c42      	adds	r2, r0, #1
 800c30c:	d101      	bne.n	800c312 <__sflush_r+0x76>
 800c30e:	682b      	ldr	r3, [r5, #0]
 800c310:	b903      	cbnz	r3, 800c314 <__sflush_r+0x78>
 800c312:	6560      	str	r0, [r4, #84]	@ 0x54
 800c314:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c316:	602f      	str	r7, [r5, #0]
 800c318:	b1b9      	cbz	r1, 800c34a <__sflush_r+0xae>
 800c31a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c31e:	4299      	cmp	r1, r3
 800c320:	d002      	beq.n	800c328 <__sflush_r+0x8c>
 800c322:	4628      	mov	r0, r5
 800c324:	f7fe fcdc 	bl	800ace0 <_free_r>
 800c328:	2300      	movs	r3, #0
 800c32a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c32c:	e00d      	b.n	800c34a <__sflush_r+0xae>
 800c32e:	2301      	movs	r3, #1
 800c330:	4628      	mov	r0, r5
 800c332:	47b0      	blx	r6
 800c334:	4602      	mov	r2, r0
 800c336:	1c50      	adds	r0, r2, #1
 800c338:	d1c9      	bne.n	800c2ce <__sflush_r+0x32>
 800c33a:	682b      	ldr	r3, [r5, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d0c6      	beq.n	800c2ce <__sflush_r+0x32>
 800c340:	2b1d      	cmp	r3, #29
 800c342:	d001      	beq.n	800c348 <__sflush_r+0xac>
 800c344:	2b16      	cmp	r3, #22
 800c346:	d11e      	bne.n	800c386 <__sflush_r+0xea>
 800c348:	602f      	str	r7, [r5, #0]
 800c34a:	2000      	movs	r0, #0
 800c34c:	e022      	b.n	800c394 <__sflush_r+0xf8>
 800c34e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c352:	b21b      	sxth	r3, r3
 800c354:	e01b      	b.n	800c38e <__sflush_r+0xf2>
 800c356:	690f      	ldr	r7, [r1, #16]
 800c358:	2f00      	cmp	r7, #0
 800c35a:	d0f6      	beq.n	800c34a <__sflush_r+0xae>
 800c35c:	0793      	lsls	r3, r2, #30
 800c35e:	680e      	ldr	r6, [r1, #0]
 800c360:	bf08      	it	eq
 800c362:	694b      	ldreq	r3, [r1, #20]
 800c364:	600f      	str	r7, [r1, #0]
 800c366:	bf18      	it	ne
 800c368:	2300      	movne	r3, #0
 800c36a:	eba6 0807 	sub.w	r8, r6, r7
 800c36e:	608b      	str	r3, [r1, #8]
 800c370:	f1b8 0f00 	cmp.w	r8, #0
 800c374:	dde9      	ble.n	800c34a <__sflush_r+0xae>
 800c376:	6a21      	ldr	r1, [r4, #32]
 800c378:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c37a:	4643      	mov	r3, r8
 800c37c:	463a      	mov	r2, r7
 800c37e:	4628      	mov	r0, r5
 800c380:	47b0      	blx	r6
 800c382:	2800      	cmp	r0, #0
 800c384:	dc08      	bgt.n	800c398 <__sflush_r+0xfc>
 800c386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c38a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c38e:	81a3      	strh	r3, [r4, #12]
 800c390:	f04f 30ff 	mov.w	r0, #4294967295
 800c394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c398:	4407      	add	r7, r0
 800c39a:	eba8 0800 	sub.w	r8, r8, r0
 800c39e:	e7e7      	b.n	800c370 <__sflush_r+0xd4>
 800c3a0:	dfbffffe 	.word	0xdfbffffe

0800c3a4 <_fflush_r>:
 800c3a4:	b538      	push	{r3, r4, r5, lr}
 800c3a6:	690b      	ldr	r3, [r1, #16]
 800c3a8:	4605      	mov	r5, r0
 800c3aa:	460c      	mov	r4, r1
 800c3ac:	b913      	cbnz	r3, 800c3b4 <_fflush_r+0x10>
 800c3ae:	2500      	movs	r5, #0
 800c3b0:	4628      	mov	r0, r5
 800c3b2:	bd38      	pop	{r3, r4, r5, pc}
 800c3b4:	b118      	cbz	r0, 800c3be <_fflush_r+0x1a>
 800c3b6:	6a03      	ldr	r3, [r0, #32]
 800c3b8:	b90b      	cbnz	r3, 800c3be <_fflush_r+0x1a>
 800c3ba:	f7fd fc4b 	bl	8009c54 <__sinit>
 800c3be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d0f3      	beq.n	800c3ae <_fflush_r+0xa>
 800c3c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c3c8:	07d0      	lsls	r0, r2, #31
 800c3ca:	d404      	bmi.n	800c3d6 <_fflush_r+0x32>
 800c3cc:	0599      	lsls	r1, r3, #22
 800c3ce:	d402      	bmi.n	800c3d6 <_fflush_r+0x32>
 800c3d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c3d2:	f7fd fdf2 	bl	8009fba <__retarget_lock_acquire_recursive>
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	4621      	mov	r1, r4
 800c3da:	f7ff ff5f 	bl	800c29c <__sflush_r>
 800c3de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c3e0:	07da      	lsls	r2, r3, #31
 800c3e2:	4605      	mov	r5, r0
 800c3e4:	d4e4      	bmi.n	800c3b0 <_fflush_r+0xc>
 800c3e6:	89a3      	ldrh	r3, [r4, #12]
 800c3e8:	059b      	lsls	r3, r3, #22
 800c3ea:	d4e1      	bmi.n	800c3b0 <_fflush_r+0xc>
 800c3ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c3ee:	f7fd fde5 	bl	8009fbc <__retarget_lock_release_recursive>
 800c3f2:	e7dd      	b.n	800c3b0 <_fflush_r+0xc>

0800c3f4 <fiprintf>:
 800c3f4:	b40e      	push	{r1, r2, r3}
 800c3f6:	b503      	push	{r0, r1, lr}
 800c3f8:	4601      	mov	r1, r0
 800c3fa:	ab03      	add	r3, sp, #12
 800c3fc:	4805      	ldr	r0, [pc, #20]	@ (800c414 <fiprintf+0x20>)
 800c3fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c402:	6800      	ldr	r0, [r0, #0]
 800c404:	9301      	str	r3, [sp, #4]
 800c406:	f000 f8a3 	bl	800c550 <_vfiprintf_r>
 800c40a:	b002      	add	sp, #8
 800c40c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c410:	b003      	add	sp, #12
 800c412:	4770      	bx	lr
 800c414:	200001bc 	.word	0x200001bc

0800c418 <memmove>:
 800c418:	4288      	cmp	r0, r1
 800c41a:	b510      	push	{r4, lr}
 800c41c:	eb01 0402 	add.w	r4, r1, r2
 800c420:	d902      	bls.n	800c428 <memmove+0x10>
 800c422:	4284      	cmp	r4, r0
 800c424:	4623      	mov	r3, r4
 800c426:	d807      	bhi.n	800c438 <memmove+0x20>
 800c428:	1e43      	subs	r3, r0, #1
 800c42a:	42a1      	cmp	r1, r4
 800c42c:	d008      	beq.n	800c440 <memmove+0x28>
 800c42e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c432:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c436:	e7f8      	b.n	800c42a <memmove+0x12>
 800c438:	4402      	add	r2, r0
 800c43a:	4601      	mov	r1, r0
 800c43c:	428a      	cmp	r2, r1
 800c43e:	d100      	bne.n	800c442 <memmove+0x2a>
 800c440:	bd10      	pop	{r4, pc}
 800c442:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c446:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c44a:	e7f7      	b.n	800c43c <memmove+0x24>

0800c44c <_sbrk_r>:
 800c44c:	b538      	push	{r3, r4, r5, lr}
 800c44e:	4d06      	ldr	r5, [pc, #24]	@ (800c468 <_sbrk_r+0x1c>)
 800c450:	2300      	movs	r3, #0
 800c452:	4604      	mov	r4, r0
 800c454:	4608      	mov	r0, r1
 800c456:	602b      	str	r3, [r5, #0]
 800c458:	f7f6 fb9c 	bl	8002b94 <_sbrk>
 800c45c:	1c43      	adds	r3, r0, #1
 800c45e:	d102      	bne.n	800c466 <_sbrk_r+0x1a>
 800c460:	682b      	ldr	r3, [r5, #0]
 800c462:	b103      	cbz	r3, 800c466 <_sbrk_r+0x1a>
 800c464:	6023      	str	r3, [r4, #0]
 800c466:	bd38      	pop	{r3, r4, r5, pc}
 800c468:	200028a0 	.word	0x200028a0

0800c46c <abort>:
 800c46c:	b508      	push	{r3, lr}
 800c46e:	2006      	movs	r0, #6
 800c470:	f000 fa42 	bl	800c8f8 <raise>
 800c474:	2001      	movs	r0, #1
 800c476:	f7f6 fb5d 	bl	8002b34 <_exit>

0800c47a <_calloc_r>:
 800c47a:	b570      	push	{r4, r5, r6, lr}
 800c47c:	fba1 5402 	umull	r5, r4, r1, r2
 800c480:	b93c      	cbnz	r4, 800c492 <_calloc_r+0x18>
 800c482:	4629      	mov	r1, r5
 800c484:	f7fe ffda 	bl	800b43c <_malloc_r>
 800c488:	4606      	mov	r6, r0
 800c48a:	b928      	cbnz	r0, 800c498 <_calloc_r+0x1e>
 800c48c:	2600      	movs	r6, #0
 800c48e:	4630      	mov	r0, r6
 800c490:	bd70      	pop	{r4, r5, r6, pc}
 800c492:	220c      	movs	r2, #12
 800c494:	6002      	str	r2, [r0, #0]
 800c496:	e7f9      	b.n	800c48c <_calloc_r+0x12>
 800c498:	462a      	mov	r2, r5
 800c49a:	4621      	mov	r1, r4
 800c49c:	f7fd fc94 	bl	8009dc8 <memset>
 800c4a0:	e7f5      	b.n	800c48e <_calloc_r+0x14>

0800c4a2 <_realloc_r>:
 800c4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a6:	4680      	mov	r8, r0
 800c4a8:	4615      	mov	r5, r2
 800c4aa:	460c      	mov	r4, r1
 800c4ac:	b921      	cbnz	r1, 800c4b8 <_realloc_r+0x16>
 800c4ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4b2:	4611      	mov	r1, r2
 800c4b4:	f7fe bfc2 	b.w	800b43c <_malloc_r>
 800c4b8:	b92a      	cbnz	r2, 800c4c6 <_realloc_r+0x24>
 800c4ba:	f7fe fc11 	bl	800ace0 <_free_r>
 800c4be:	2400      	movs	r4, #0
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4c6:	f000 fa33 	bl	800c930 <_malloc_usable_size_r>
 800c4ca:	4285      	cmp	r5, r0
 800c4cc:	4606      	mov	r6, r0
 800c4ce:	d802      	bhi.n	800c4d6 <_realloc_r+0x34>
 800c4d0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c4d4:	d8f4      	bhi.n	800c4c0 <_realloc_r+0x1e>
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	4640      	mov	r0, r8
 800c4da:	f7fe ffaf 	bl	800b43c <_malloc_r>
 800c4de:	4607      	mov	r7, r0
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	d0ec      	beq.n	800c4be <_realloc_r+0x1c>
 800c4e4:	42b5      	cmp	r5, r6
 800c4e6:	462a      	mov	r2, r5
 800c4e8:	4621      	mov	r1, r4
 800c4ea:	bf28      	it	cs
 800c4ec:	4632      	movcs	r2, r6
 800c4ee:	f7fd fd6e 	bl	8009fce <memcpy>
 800c4f2:	4621      	mov	r1, r4
 800c4f4:	4640      	mov	r0, r8
 800c4f6:	f7fe fbf3 	bl	800ace0 <_free_r>
 800c4fa:	463c      	mov	r4, r7
 800c4fc:	e7e0      	b.n	800c4c0 <_realloc_r+0x1e>

0800c4fe <__sfputc_r>:
 800c4fe:	6893      	ldr	r3, [r2, #8]
 800c500:	3b01      	subs	r3, #1
 800c502:	2b00      	cmp	r3, #0
 800c504:	b410      	push	{r4}
 800c506:	6093      	str	r3, [r2, #8]
 800c508:	da08      	bge.n	800c51c <__sfputc_r+0x1e>
 800c50a:	6994      	ldr	r4, [r2, #24]
 800c50c:	42a3      	cmp	r3, r4
 800c50e:	db01      	blt.n	800c514 <__sfputc_r+0x16>
 800c510:	290a      	cmp	r1, #10
 800c512:	d103      	bne.n	800c51c <__sfputc_r+0x1e>
 800c514:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c518:	f000 b932 	b.w	800c780 <__swbuf_r>
 800c51c:	6813      	ldr	r3, [r2, #0]
 800c51e:	1c58      	adds	r0, r3, #1
 800c520:	6010      	str	r0, [r2, #0]
 800c522:	7019      	strb	r1, [r3, #0]
 800c524:	4608      	mov	r0, r1
 800c526:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <__sfputs_r>:
 800c52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c52e:	4606      	mov	r6, r0
 800c530:	460f      	mov	r7, r1
 800c532:	4614      	mov	r4, r2
 800c534:	18d5      	adds	r5, r2, r3
 800c536:	42ac      	cmp	r4, r5
 800c538:	d101      	bne.n	800c53e <__sfputs_r+0x12>
 800c53a:	2000      	movs	r0, #0
 800c53c:	e007      	b.n	800c54e <__sfputs_r+0x22>
 800c53e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c542:	463a      	mov	r2, r7
 800c544:	4630      	mov	r0, r6
 800c546:	f7ff ffda 	bl	800c4fe <__sfputc_r>
 800c54a:	1c43      	adds	r3, r0, #1
 800c54c:	d1f3      	bne.n	800c536 <__sfputs_r+0xa>
 800c54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c550 <_vfiprintf_r>:
 800c550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c554:	460d      	mov	r5, r1
 800c556:	b09d      	sub	sp, #116	@ 0x74
 800c558:	4614      	mov	r4, r2
 800c55a:	4698      	mov	r8, r3
 800c55c:	4606      	mov	r6, r0
 800c55e:	b118      	cbz	r0, 800c568 <_vfiprintf_r+0x18>
 800c560:	6a03      	ldr	r3, [r0, #32]
 800c562:	b90b      	cbnz	r3, 800c568 <_vfiprintf_r+0x18>
 800c564:	f7fd fb76 	bl	8009c54 <__sinit>
 800c568:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c56a:	07d9      	lsls	r1, r3, #31
 800c56c:	d405      	bmi.n	800c57a <_vfiprintf_r+0x2a>
 800c56e:	89ab      	ldrh	r3, [r5, #12]
 800c570:	059a      	lsls	r2, r3, #22
 800c572:	d402      	bmi.n	800c57a <_vfiprintf_r+0x2a>
 800c574:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c576:	f7fd fd20 	bl	8009fba <__retarget_lock_acquire_recursive>
 800c57a:	89ab      	ldrh	r3, [r5, #12]
 800c57c:	071b      	lsls	r3, r3, #28
 800c57e:	d501      	bpl.n	800c584 <_vfiprintf_r+0x34>
 800c580:	692b      	ldr	r3, [r5, #16]
 800c582:	b99b      	cbnz	r3, 800c5ac <_vfiprintf_r+0x5c>
 800c584:	4629      	mov	r1, r5
 800c586:	4630      	mov	r0, r6
 800c588:	f000 f938 	bl	800c7fc <__swsetup_r>
 800c58c:	b170      	cbz	r0, 800c5ac <_vfiprintf_r+0x5c>
 800c58e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c590:	07dc      	lsls	r4, r3, #31
 800c592:	d504      	bpl.n	800c59e <_vfiprintf_r+0x4e>
 800c594:	f04f 30ff 	mov.w	r0, #4294967295
 800c598:	b01d      	add	sp, #116	@ 0x74
 800c59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c59e:	89ab      	ldrh	r3, [r5, #12]
 800c5a0:	0598      	lsls	r0, r3, #22
 800c5a2:	d4f7      	bmi.n	800c594 <_vfiprintf_r+0x44>
 800c5a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5a6:	f7fd fd09 	bl	8009fbc <__retarget_lock_release_recursive>
 800c5aa:	e7f3      	b.n	800c594 <_vfiprintf_r+0x44>
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5b0:	2320      	movs	r3, #32
 800c5b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5ba:	2330      	movs	r3, #48	@ 0x30
 800c5bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c76c <_vfiprintf_r+0x21c>
 800c5c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c5c4:	f04f 0901 	mov.w	r9, #1
 800c5c8:	4623      	mov	r3, r4
 800c5ca:	469a      	mov	sl, r3
 800c5cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5d0:	b10a      	cbz	r2, 800c5d6 <_vfiprintf_r+0x86>
 800c5d2:	2a25      	cmp	r2, #37	@ 0x25
 800c5d4:	d1f9      	bne.n	800c5ca <_vfiprintf_r+0x7a>
 800c5d6:	ebba 0b04 	subs.w	fp, sl, r4
 800c5da:	d00b      	beq.n	800c5f4 <_vfiprintf_r+0xa4>
 800c5dc:	465b      	mov	r3, fp
 800c5de:	4622      	mov	r2, r4
 800c5e0:	4629      	mov	r1, r5
 800c5e2:	4630      	mov	r0, r6
 800c5e4:	f7ff ffa2 	bl	800c52c <__sfputs_r>
 800c5e8:	3001      	adds	r0, #1
 800c5ea:	f000 80a7 	beq.w	800c73c <_vfiprintf_r+0x1ec>
 800c5ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5f0:	445a      	add	r2, fp
 800c5f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5f4:	f89a 3000 	ldrb.w	r3, [sl]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f000 809f 	beq.w	800c73c <_vfiprintf_r+0x1ec>
 800c5fe:	2300      	movs	r3, #0
 800c600:	f04f 32ff 	mov.w	r2, #4294967295
 800c604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c608:	f10a 0a01 	add.w	sl, sl, #1
 800c60c:	9304      	str	r3, [sp, #16]
 800c60e:	9307      	str	r3, [sp, #28]
 800c610:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c614:	931a      	str	r3, [sp, #104]	@ 0x68
 800c616:	4654      	mov	r4, sl
 800c618:	2205      	movs	r2, #5
 800c61a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c61e:	4853      	ldr	r0, [pc, #332]	@ (800c76c <_vfiprintf_r+0x21c>)
 800c620:	f7f3 fdd6 	bl	80001d0 <memchr>
 800c624:	9a04      	ldr	r2, [sp, #16]
 800c626:	b9d8      	cbnz	r0, 800c660 <_vfiprintf_r+0x110>
 800c628:	06d1      	lsls	r1, r2, #27
 800c62a:	bf44      	itt	mi
 800c62c:	2320      	movmi	r3, #32
 800c62e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c632:	0713      	lsls	r3, r2, #28
 800c634:	bf44      	itt	mi
 800c636:	232b      	movmi	r3, #43	@ 0x2b
 800c638:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c63c:	f89a 3000 	ldrb.w	r3, [sl]
 800c640:	2b2a      	cmp	r3, #42	@ 0x2a
 800c642:	d015      	beq.n	800c670 <_vfiprintf_r+0x120>
 800c644:	9a07      	ldr	r2, [sp, #28]
 800c646:	4654      	mov	r4, sl
 800c648:	2000      	movs	r0, #0
 800c64a:	f04f 0c0a 	mov.w	ip, #10
 800c64e:	4621      	mov	r1, r4
 800c650:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c654:	3b30      	subs	r3, #48	@ 0x30
 800c656:	2b09      	cmp	r3, #9
 800c658:	d94b      	bls.n	800c6f2 <_vfiprintf_r+0x1a2>
 800c65a:	b1b0      	cbz	r0, 800c68a <_vfiprintf_r+0x13a>
 800c65c:	9207      	str	r2, [sp, #28]
 800c65e:	e014      	b.n	800c68a <_vfiprintf_r+0x13a>
 800c660:	eba0 0308 	sub.w	r3, r0, r8
 800c664:	fa09 f303 	lsl.w	r3, r9, r3
 800c668:	4313      	orrs	r3, r2
 800c66a:	9304      	str	r3, [sp, #16]
 800c66c:	46a2      	mov	sl, r4
 800c66e:	e7d2      	b.n	800c616 <_vfiprintf_r+0xc6>
 800c670:	9b03      	ldr	r3, [sp, #12]
 800c672:	1d19      	adds	r1, r3, #4
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	9103      	str	r1, [sp, #12]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	bfbb      	ittet	lt
 800c67c:	425b      	neglt	r3, r3
 800c67e:	f042 0202 	orrlt.w	r2, r2, #2
 800c682:	9307      	strge	r3, [sp, #28]
 800c684:	9307      	strlt	r3, [sp, #28]
 800c686:	bfb8      	it	lt
 800c688:	9204      	strlt	r2, [sp, #16]
 800c68a:	7823      	ldrb	r3, [r4, #0]
 800c68c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c68e:	d10a      	bne.n	800c6a6 <_vfiprintf_r+0x156>
 800c690:	7863      	ldrb	r3, [r4, #1]
 800c692:	2b2a      	cmp	r3, #42	@ 0x2a
 800c694:	d132      	bne.n	800c6fc <_vfiprintf_r+0x1ac>
 800c696:	9b03      	ldr	r3, [sp, #12]
 800c698:	1d1a      	adds	r2, r3, #4
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	9203      	str	r2, [sp, #12]
 800c69e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6a2:	3402      	adds	r4, #2
 800c6a4:	9305      	str	r3, [sp, #20]
 800c6a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c77c <_vfiprintf_r+0x22c>
 800c6aa:	7821      	ldrb	r1, [r4, #0]
 800c6ac:	2203      	movs	r2, #3
 800c6ae:	4650      	mov	r0, sl
 800c6b0:	f7f3 fd8e 	bl	80001d0 <memchr>
 800c6b4:	b138      	cbz	r0, 800c6c6 <_vfiprintf_r+0x176>
 800c6b6:	9b04      	ldr	r3, [sp, #16]
 800c6b8:	eba0 000a 	sub.w	r0, r0, sl
 800c6bc:	2240      	movs	r2, #64	@ 0x40
 800c6be:	4082      	lsls	r2, r0
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	3401      	adds	r4, #1
 800c6c4:	9304      	str	r3, [sp, #16]
 800c6c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ca:	4829      	ldr	r0, [pc, #164]	@ (800c770 <_vfiprintf_r+0x220>)
 800c6cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c6d0:	2206      	movs	r2, #6
 800c6d2:	f7f3 fd7d 	bl	80001d0 <memchr>
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	d03f      	beq.n	800c75a <_vfiprintf_r+0x20a>
 800c6da:	4b26      	ldr	r3, [pc, #152]	@ (800c774 <_vfiprintf_r+0x224>)
 800c6dc:	bb1b      	cbnz	r3, 800c726 <_vfiprintf_r+0x1d6>
 800c6de:	9b03      	ldr	r3, [sp, #12]
 800c6e0:	3307      	adds	r3, #7
 800c6e2:	f023 0307 	bic.w	r3, r3, #7
 800c6e6:	3308      	adds	r3, #8
 800c6e8:	9303      	str	r3, [sp, #12]
 800c6ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6ec:	443b      	add	r3, r7
 800c6ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6f0:	e76a      	b.n	800c5c8 <_vfiprintf_r+0x78>
 800c6f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6f6:	460c      	mov	r4, r1
 800c6f8:	2001      	movs	r0, #1
 800c6fa:	e7a8      	b.n	800c64e <_vfiprintf_r+0xfe>
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	3401      	adds	r4, #1
 800c700:	9305      	str	r3, [sp, #20]
 800c702:	4619      	mov	r1, r3
 800c704:	f04f 0c0a 	mov.w	ip, #10
 800c708:	4620      	mov	r0, r4
 800c70a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c70e:	3a30      	subs	r2, #48	@ 0x30
 800c710:	2a09      	cmp	r2, #9
 800c712:	d903      	bls.n	800c71c <_vfiprintf_r+0x1cc>
 800c714:	2b00      	cmp	r3, #0
 800c716:	d0c6      	beq.n	800c6a6 <_vfiprintf_r+0x156>
 800c718:	9105      	str	r1, [sp, #20]
 800c71a:	e7c4      	b.n	800c6a6 <_vfiprintf_r+0x156>
 800c71c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c720:	4604      	mov	r4, r0
 800c722:	2301      	movs	r3, #1
 800c724:	e7f0      	b.n	800c708 <_vfiprintf_r+0x1b8>
 800c726:	ab03      	add	r3, sp, #12
 800c728:	9300      	str	r3, [sp, #0]
 800c72a:	462a      	mov	r2, r5
 800c72c:	4b12      	ldr	r3, [pc, #72]	@ (800c778 <_vfiprintf_r+0x228>)
 800c72e:	a904      	add	r1, sp, #16
 800c730:	4630      	mov	r0, r6
 800c732:	f7fc fc37 	bl	8008fa4 <_printf_float>
 800c736:	4607      	mov	r7, r0
 800c738:	1c78      	adds	r0, r7, #1
 800c73a:	d1d6      	bne.n	800c6ea <_vfiprintf_r+0x19a>
 800c73c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c73e:	07d9      	lsls	r1, r3, #31
 800c740:	d405      	bmi.n	800c74e <_vfiprintf_r+0x1fe>
 800c742:	89ab      	ldrh	r3, [r5, #12]
 800c744:	059a      	lsls	r2, r3, #22
 800c746:	d402      	bmi.n	800c74e <_vfiprintf_r+0x1fe>
 800c748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c74a:	f7fd fc37 	bl	8009fbc <__retarget_lock_release_recursive>
 800c74e:	89ab      	ldrh	r3, [r5, #12]
 800c750:	065b      	lsls	r3, r3, #25
 800c752:	f53f af1f 	bmi.w	800c594 <_vfiprintf_r+0x44>
 800c756:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c758:	e71e      	b.n	800c598 <_vfiprintf_r+0x48>
 800c75a:	ab03      	add	r3, sp, #12
 800c75c:	9300      	str	r3, [sp, #0]
 800c75e:	462a      	mov	r2, r5
 800c760:	4b05      	ldr	r3, [pc, #20]	@ (800c778 <_vfiprintf_r+0x228>)
 800c762:	a904      	add	r1, sp, #16
 800c764:	4630      	mov	r0, r6
 800c766:	f7fc feb5 	bl	80094d4 <_printf_i>
 800c76a:	e7e4      	b.n	800c736 <_vfiprintf_r+0x1e6>
 800c76c:	08012329 	.word	0x08012329
 800c770:	08012333 	.word	0x08012333
 800c774:	08008fa5 	.word	0x08008fa5
 800c778:	0800c52d 	.word	0x0800c52d
 800c77c:	0801232f 	.word	0x0801232f

0800c780 <__swbuf_r>:
 800c780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c782:	460e      	mov	r6, r1
 800c784:	4614      	mov	r4, r2
 800c786:	4605      	mov	r5, r0
 800c788:	b118      	cbz	r0, 800c792 <__swbuf_r+0x12>
 800c78a:	6a03      	ldr	r3, [r0, #32]
 800c78c:	b90b      	cbnz	r3, 800c792 <__swbuf_r+0x12>
 800c78e:	f7fd fa61 	bl	8009c54 <__sinit>
 800c792:	69a3      	ldr	r3, [r4, #24]
 800c794:	60a3      	str	r3, [r4, #8]
 800c796:	89a3      	ldrh	r3, [r4, #12]
 800c798:	071a      	lsls	r2, r3, #28
 800c79a:	d501      	bpl.n	800c7a0 <__swbuf_r+0x20>
 800c79c:	6923      	ldr	r3, [r4, #16]
 800c79e:	b943      	cbnz	r3, 800c7b2 <__swbuf_r+0x32>
 800c7a0:	4621      	mov	r1, r4
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	f000 f82a 	bl	800c7fc <__swsetup_r>
 800c7a8:	b118      	cbz	r0, 800c7b2 <__swbuf_r+0x32>
 800c7aa:	f04f 37ff 	mov.w	r7, #4294967295
 800c7ae:	4638      	mov	r0, r7
 800c7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7b2:	6823      	ldr	r3, [r4, #0]
 800c7b4:	6922      	ldr	r2, [r4, #16]
 800c7b6:	1a98      	subs	r0, r3, r2
 800c7b8:	6963      	ldr	r3, [r4, #20]
 800c7ba:	b2f6      	uxtb	r6, r6
 800c7bc:	4283      	cmp	r3, r0
 800c7be:	4637      	mov	r7, r6
 800c7c0:	dc05      	bgt.n	800c7ce <__swbuf_r+0x4e>
 800c7c2:	4621      	mov	r1, r4
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	f7ff fded 	bl	800c3a4 <_fflush_r>
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	d1ed      	bne.n	800c7aa <__swbuf_r+0x2a>
 800c7ce:	68a3      	ldr	r3, [r4, #8]
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	60a3      	str	r3, [r4, #8]
 800c7d4:	6823      	ldr	r3, [r4, #0]
 800c7d6:	1c5a      	adds	r2, r3, #1
 800c7d8:	6022      	str	r2, [r4, #0]
 800c7da:	701e      	strb	r6, [r3, #0]
 800c7dc:	6962      	ldr	r2, [r4, #20]
 800c7de:	1c43      	adds	r3, r0, #1
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d004      	beq.n	800c7ee <__swbuf_r+0x6e>
 800c7e4:	89a3      	ldrh	r3, [r4, #12]
 800c7e6:	07db      	lsls	r3, r3, #31
 800c7e8:	d5e1      	bpl.n	800c7ae <__swbuf_r+0x2e>
 800c7ea:	2e0a      	cmp	r6, #10
 800c7ec:	d1df      	bne.n	800c7ae <__swbuf_r+0x2e>
 800c7ee:	4621      	mov	r1, r4
 800c7f0:	4628      	mov	r0, r5
 800c7f2:	f7ff fdd7 	bl	800c3a4 <_fflush_r>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d0d9      	beq.n	800c7ae <__swbuf_r+0x2e>
 800c7fa:	e7d6      	b.n	800c7aa <__swbuf_r+0x2a>

0800c7fc <__swsetup_r>:
 800c7fc:	b538      	push	{r3, r4, r5, lr}
 800c7fe:	4b29      	ldr	r3, [pc, #164]	@ (800c8a4 <__swsetup_r+0xa8>)
 800c800:	4605      	mov	r5, r0
 800c802:	6818      	ldr	r0, [r3, #0]
 800c804:	460c      	mov	r4, r1
 800c806:	b118      	cbz	r0, 800c810 <__swsetup_r+0x14>
 800c808:	6a03      	ldr	r3, [r0, #32]
 800c80a:	b90b      	cbnz	r3, 800c810 <__swsetup_r+0x14>
 800c80c:	f7fd fa22 	bl	8009c54 <__sinit>
 800c810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c814:	0719      	lsls	r1, r3, #28
 800c816:	d422      	bmi.n	800c85e <__swsetup_r+0x62>
 800c818:	06da      	lsls	r2, r3, #27
 800c81a:	d407      	bmi.n	800c82c <__swsetup_r+0x30>
 800c81c:	2209      	movs	r2, #9
 800c81e:	602a      	str	r2, [r5, #0]
 800c820:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c824:	81a3      	strh	r3, [r4, #12]
 800c826:	f04f 30ff 	mov.w	r0, #4294967295
 800c82a:	e033      	b.n	800c894 <__swsetup_r+0x98>
 800c82c:	0758      	lsls	r0, r3, #29
 800c82e:	d512      	bpl.n	800c856 <__swsetup_r+0x5a>
 800c830:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c832:	b141      	cbz	r1, 800c846 <__swsetup_r+0x4a>
 800c834:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c838:	4299      	cmp	r1, r3
 800c83a:	d002      	beq.n	800c842 <__swsetup_r+0x46>
 800c83c:	4628      	mov	r0, r5
 800c83e:	f7fe fa4f 	bl	800ace0 <_free_r>
 800c842:	2300      	movs	r3, #0
 800c844:	6363      	str	r3, [r4, #52]	@ 0x34
 800c846:	89a3      	ldrh	r3, [r4, #12]
 800c848:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c84c:	81a3      	strh	r3, [r4, #12]
 800c84e:	2300      	movs	r3, #0
 800c850:	6063      	str	r3, [r4, #4]
 800c852:	6923      	ldr	r3, [r4, #16]
 800c854:	6023      	str	r3, [r4, #0]
 800c856:	89a3      	ldrh	r3, [r4, #12]
 800c858:	f043 0308 	orr.w	r3, r3, #8
 800c85c:	81a3      	strh	r3, [r4, #12]
 800c85e:	6923      	ldr	r3, [r4, #16]
 800c860:	b94b      	cbnz	r3, 800c876 <__swsetup_r+0x7a>
 800c862:	89a3      	ldrh	r3, [r4, #12]
 800c864:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c86c:	d003      	beq.n	800c876 <__swsetup_r+0x7a>
 800c86e:	4621      	mov	r1, r4
 800c870:	4628      	mov	r0, r5
 800c872:	f000 f88b 	bl	800c98c <__smakebuf_r>
 800c876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c87a:	f013 0201 	ands.w	r2, r3, #1
 800c87e:	d00a      	beq.n	800c896 <__swsetup_r+0x9a>
 800c880:	2200      	movs	r2, #0
 800c882:	60a2      	str	r2, [r4, #8]
 800c884:	6962      	ldr	r2, [r4, #20]
 800c886:	4252      	negs	r2, r2
 800c888:	61a2      	str	r2, [r4, #24]
 800c88a:	6922      	ldr	r2, [r4, #16]
 800c88c:	b942      	cbnz	r2, 800c8a0 <__swsetup_r+0xa4>
 800c88e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c892:	d1c5      	bne.n	800c820 <__swsetup_r+0x24>
 800c894:	bd38      	pop	{r3, r4, r5, pc}
 800c896:	0799      	lsls	r1, r3, #30
 800c898:	bf58      	it	pl
 800c89a:	6962      	ldrpl	r2, [r4, #20]
 800c89c:	60a2      	str	r2, [r4, #8]
 800c89e:	e7f4      	b.n	800c88a <__swsetup_r+0x8e>
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	e7f7      	b.n	800c894 <__swsetup_r+0x98>
 800c8a4:	200001bc 	.word	0x200001bc

0800c8a8 <_raise_r>:
 800c8a8:	291f      	cmp	r1, #31
 800c8aa:	b538      	push	{r3, r4, r5, lr}
 800c8ac:	4605      	mov	r5, r0
 800c8ae:	460c      	mov	r4, r1
 800c8b0:	d904      	bls.n	800c8bc <_raise_r+0x14>
 800c8b2:	2316      	movs	r3, #22
 800c8b4:	6003      	str	r3, [r0, #0]
 800c8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ba:	bd38      	pop	{r3, r4, r5, pc}
 800c8bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c8be:	b112      	cbz	r2, 800c8c6 <_raise_r+0x1e>
 800c8c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8c4:	b94b      	cbnz	r3, 800c8da <_raise_r+0x32>
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	f000 f830 	bl	800c92c <_getpid_r>
 800c8cc:	4622      	mov	r2, r4
 800c8ce:	4601      	mov	r1, r0
 800c8d0:	4628      	mov	r0, r5
 800c8d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8d6:	f000 b817 	b.w	800c908 <_kill_r>
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d00a      	beq.n	800c8f4 <_raise_r+0x4c>
 800c8de:	1c59      	adds	r1, r3, #1
 800c8e0:	d103      	bne.n	800c8ea <_raise_r+0x42>
 800c8e2:	2316      	movs	r3, #22
 800c8e4:	6003      	str	r3, [r0, #0]
 800c8e6:	2001      	movs	r0, #1
 800c8e8:	e7e7      	b.n	800c8ba <_raise_r+0x12>
 800c8ea:	2100      	movs	r1, #0
 800c8ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	4798      	blx	r3
 800c8f4:	2000      	movs	r0, #0
 800c8f6:	e7e0      	b.n	800c8ba <_raise_r+0x12>

0800c8f8 <raise>:
 800c8f8:	4b02      	ldr	r3, [pc, #8]	@ (800c904 <raise+0xc>)
 800c8fa:	4601      	mov	r1, r0
 800c8fc:	6818      	ldr	r0, [r3, #0]
 800c8fe:	f7ff bfd3 	b.w	800c8a8 <_raise_r>
 800c902:	bf00      	nop
 800c904:	200001bc 	.word	0x200001bc

0800c908 <_kill_r>:
 800c908:	b538      	push	{r3, r4, r5, lr}
 800c90a:	4d07      	ldr	r5, [pc, #28]	@ (800c928 <_kill_r+0x20>)
 800c90c:	2300      	movs	r3, #0
 800c90e:	4604      	mov	r4, r0
 800c910:	4608      	mov	r0, r1
 800c912:	4611      	mov	r1, r2
 800c914:	602b      	str	r3, [r5, #0]
 800c916:	f7f6 f905 	bl	8002b24 <_kill>
 800c91a:	1c43      	adds	r3, r0, #1
 800c91c:	d102      	bne.n	800c924 <_kill_r+0x1c>
 800c91e:	682b      	ldr	r3, [r5, #0]
 800c920:	b103      	cbz	r3, 800c924 <_kill_r+0x1c>
 800c922:	6023      	str	r3, [r4, #0]
 800c924:	bd38      	pop	{r3, r4, r5, pc}
 800c926:	bf00      	nop
 800c928:	200028a0 	.word	0x200028a0

0800c92c <_getpid_r>:
 800c92c:	f7f6 b8f8 	b.w	8002b20 <_getpid>

0800c930 <_malloc_usable_size_r>:
 800c930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c934:	1f18      	subs	r0, r3, #4
 800c936:	2b00      	cmp	r3, #0
 800c938:	bfbc      	itt	lt
 800c93a:	580b      	ldrlt	r3, [r1, r0]
 800c93c:	18c0      	addlt	r0, r0, r3
 800c93e:	4770      	bx	lr

0800c940 <__swhatbuf_r>:
 800c940:	b570      	push	{r4, r5, r6, lr}
 800c942:	460c      	mov	r4, r1
 800c944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c948:	2900      	cmp	r1, #0
 800c94a:	b096      	sub	sp, #88	@ 0x58
 800c94c:	4615      	mov	r5, r2
 800c94e:	461e      	mov	r6, r3
 800c950:	da0d      	bge.n	800c96e <__swhatbuf_r+0x2e>
 800c952:	89a3      	ldrh	r3, [r4, #12]
 800c954:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c958:	f04f 0100 	mov.w	r1, #0
 800c95c:	bf14      	ite	ne
 800c95e:	2340      	movne	r3, #64	@ 0x40
 800c960:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c964:	2000      	movs	r0, #0
 800c966:	6031      	str	r1, [r6, #0]
 800c968:	602b      	str	r3, [r5, #0]
 800c96a:	b016      	add	sp, #88	@ 0x58
 800c96c:	bd70      	pop	{r4, r5, r6, pc}
 800c96e:	466a      	mov	r2, sp
 800c970:	f000 f848 	bl	800ca04 <_fstat_r>
 800c974:	2800      	cmp	r0, #0
 800c976:	dbec      	blt.n	800c952 <__swhatbuf_r+0x12>
 800c978:	9901      	ldr	r1, [sp, #4]
 800c97a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c97e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c982:	4259      	negs	r1, r3
 800c984:	4159      	adcs	r1, r3
 800c986:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c98a:	e7eb      	b.n	800c964 <__swhatbuf_r+0x24>

0800c98c <__smakebuf_r>:
 800c98c:	898b      	ldrh	r3, [r1, #12]
 800c98e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c990:	079d      	lsls	r5, r3, #30
 800c992:	4606      	mov	r6, r0
 800c994:	460c      	mov	r4, r1
 800c996:	d507      	bpl.n	800c9a8 <__smakebuf_r+0x1c>
 800c998:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c99c:	6023      	str	r3, [r4, #0]
 800c99e:	6123      	str	r3, [r4, #16]
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	6163      	str	r3, [r4, #20]
 800c9a4:	b003      	add	sp, #12
 800c9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9a8:	ab01      	add	r3, sp, #4
 800c9aa:	466a      	mov	r2, sp
 800c9ac:	f7ff ffc8 	bl	800c940 <__swhatbuf_r>
 800c9b0:	9f00      	ldr	r7, [sp, #0]
 800c9b2:	4605      	mov	r5, r0
 800c9b4:	4639      	mov	r1, r7
 800c9b6:	4630      	mov	r0, r6
 800c9b8:	f7fe fd40 	bl	800b43c <_malloc_r>
 800c9bc:	b948      	cbnz	r0, 800c9d2 <__smakebuf_r+0x46>
 800c9be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9c2:	059a      	lsls	r2, r3, #22
 800c9c4:	d4ee      	bmi.n	800c9a4 <__smakebuf_r+0x18>
 800c9c6:	f023 0303 	bic.w	r3, r3, #3
 800c9ca:	f043 0302 	orr.w	r3, r3, #2
 800c9ce:	81a3      	strh	r3, [r4, #12]
 800c9d0:	e7e2      	b.n	800c998 <__smakebuf_r+0xc>
 800c9d2:	89a3      	ldrh	r3, [r4, #12]
 800c9d4:	6020      	str	r0, [r4, #0]
 800c9d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9da:	81a3      	strh	r3, [r4, #12]
 800c9dc:	9b01      	ldr	r3, [sp, #4]
 800c9de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c9e2:	b15b      	cbz	r3, 800c9fc <__smakebuf_r+0x70>
 800c9e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9e8:	4630      	mov	r0, r6
 800c9ea:	f000 f81d 	bl	800ca28 <_isatty_r>
 800c9ee:	b128      	cbz	r0, 800c9fc <__smakebuf_r+0x70>
 800c9f0:	89a3      	ldrh	r3, [r4, #12]
 800c9f2:	f023 0303 	bic.w	r3, r3, #3
 800c9f6:	f043 0301 	orr.w	r3, r3, #1
 800c9fa:	81a3      	strh	r3, [r4, #12]
 800c9fc:	89a3      	ldrh	r3, [r4, #12]
 800c9fe:	431d      	orrs	r5, r3
 800ca00:	81a5      	strh	r5, [r4, #12]
 800ca02:	e7cf      	b.n	800c9a4 <__smakebuf_r+0x18>

0800ca04 <_fstat_r>:
 800ca04:	b538      	push	{r3, r4, r5, lr}
 800ca06:	4d07      	ldr	r5, [pc, #28]	@ (800ca24 <_fstat_r+0x20>)
 800ca08:	2300      	movs	r3, #0
 800ca0a:	4604      	mov	r4, r0
 800ca0c:	4608      	mov	r0, r1
 800ca0e:	4611      	mov	r1, r2
 800ca10:	602b      	str	r3, [r5, #0]
 800ca12:	f7f6 f8b6 	bl	8002b82 <_fstat>
 800ca16:	1c43      	adds	r3, r0, #1
 800ca18:	d102      	bne.n	800ca20 <_fstat_r+0x1c>
 800ca1a:	682b      	ldr	r3, [r5, #0]
 800ca1c:	b103      	cbz	r3, 800ca20 <_fstat_r+0x1c>
 800ca1e:	6023      	str	r3, [r4, #0]
 800ca20:	bd38      	pop	{r3, r4, r5, pc}
 800ca22:	bf00      	nop
 800ca24:	200028a0 	.word	0x200028a0

0800ca28 <_isatty_r>:
 800ca28:	b538      	push	{r3, r4, r5, lr}
 800ca2a:	4d06      	ldr	r5, [pc, #24]	@ (800ca44 <_isatty_r+0x1c>)
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	4604      	mov	r4, r0
 800ca30:	4608      	mov	r0, r1
 800ca32:	602b      	str	r3, [r5, #0]
 800ca34:	f7f6 f8aa 	bl	8002b8c <_isatty>
 800ca38:	1c43      	adds	r3, r0, #1
 800ca3a:	d102      	bne.n	800ca42 <_isatty_r+0x1a>
 800ca3c:	682b      	ldr	r3, [r5, #0]
 800ca3e:	b103      	cbz	r3, 800ca42 <_isatty_r+0x1a>
 800ca40:	6023      	str	r3, [r4, #0]
 800ca42:	bd38      	pop	{r3, r4, r5, pc}
 800ca44:	200028a0 	.word	0x200028a0

0800ca48 <_init>:
 800ca48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca4a:	bf00      	nop
 800ca4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca4e:	bc08      	pop	{r3}
 800ca50:	469e      	mov	lr, r3
 800ca52:	4770      	bx	lr

0800ca54 <_fini>:
 800ca54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca56:	bf00      	nop
 800ca58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca5a:	bc08      	pop	{r3}
 800ca5c:	469e      	mov	lr, r3
 800ca5e:	4770      	bx	lr
